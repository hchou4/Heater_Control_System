

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May 13 10:11:37 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	text111,global,reloc=2,class=CODE,delta=1
   128                           	psect	text112,global,reloc=2,class=CODE,delta=1
   129                           	psect	text113,global,reloc=2,class=CODE,delta=1
   130                           	psect	text114,global,reloc=2,class=CODE,delta=1
   131                           	psect	text115,global,reloc=2,class=CODE,delta=1
   132                           	psect	text116,global,reloc=2,class=CODE,delta=1
   133                           	psect	text117,global,reloc=2,class=CODE,delta=1
   134                           	psect	text118,global,reloc=2,class=CODE,delta=1
   135                           	psect	text119,global,reloc=2,class=CODE,delta=1
   136                           	psect	text120,global,reloc=2,class=CODE,delta=1
   137                           	psect	text121,global,reloc=2,class=CODE,delta=1
   138                           	psect	text122,global,reloc=2,class=CODE,delta=1
   139                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   140                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   141                           	psect	text124,global,reloc=2,class=CODE,delta=1
   142                           	psect	text125,global,reloc=2,class=CODE,delta=1
   143                           	psect	text126,global,reloc=2,class=CODE,delta=1
   144                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   145                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           	psect	idataBANK0
   148  004C20                     __pidataBANK0:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _fan_set_temp
   152  004C20  4B                 	db	75
   153                           
   154                           ;initializer for _tempSecond
   155  004C21  FF                 	db	255
   156                           
   157                           ;initializer for _wrap
   158  004C22  01                 	db	1
   159                           
   160                           ;initializer for _Fan_Set_Temp_Txt
   161  004C23  30                 	db	48
   162  004C24  37                 	db	55
   163  004C25  35                 	db	53
   164  004C26  46                 	db	70
   165  004C27  00                 	db	0
   166                           
   167                           ;initializer for _RPM_Txt
   168  004C28  30                 	db	48
   169  004C29  30                 	db	48
   170  004C2A  30                 	db	48
   171  004C2B  30                 	db	48
   172  004C2C  00                 	db	0
   173                           
   174                           ;initializer for _setup_fan_set_text
   175  004C2D  30                 	db	48
   176  004C2E  37                 	db	55
   177  004C2F  35                 	db	53
   178  004C30  46                 	db	70
   179  004C31  00                 	db	0
   180                           
   181                           ;initializer for _Alarm_SW_Txt
   182  004C32  4F                 	db	79
   183  004C33  46                 	db	70
   184  004C34  46                 	db	70
   185  004C35  00                 	db	0
   186                           
   187                           ;initializer for _DC_Txt
   188  004C36  30                 	db	48
   189  004C37  30                 	db	48
   190  004C38  30                 	db	48
   191  004C39  00                 	db	0
   192                           
   193                           ;initializer for _Fan_SW_Txt
   194  004C3A  4F                 	db	79
   195  004C3B  46                 	db	70
   196  004C3C  46                 	db	70
   197  004C3D  00                 	db	0
   198                           
   199                           ;initializer for _tempC
   200  004C3E  2B                 	db	43
   201  004C3F  32                 	db	50
   202  004C40  35                 	db	53
   203  004C41  00                 	db	0
   204                           
   205                           ;initializer for _tempF
   206  004C42  2B                 	db	43
   207  004C43  37                 	db	55
   208  004C44  37                 	db	55
   209  004C45  00                 	db	0
   210                           
   211                           ;initializer for _RTC_ALARM_Txt
   212  004C46  30                 	db	48
   213  004C47  00                 	db	0
   214                           
   215                           	psect	idataBANK1
   216  004292                     __pidataBANK1:
   217                           	opt stack 0
   218                           
   219                           ;initializer for _buffer
   220  004292  20                 	db	32
   221  004293  45                 	db	69
   222  004294  43                 	db	67
   223  004295  45                 	db	69
   224  004296  33                 	db	51
   225  004297  33                 	db	51
   226  004298  30                 	db	48
   227  004299  31                 	db	49
   228  00429A  4C                 	db	76
   229  00429B  20                 	db	32
   230  00429C  53                 	db	83
   231  00429D  70                 	db	112
   232  00429E  27                 	db	39
   233  00429F  32                 	db	50
   234  0042A0  31                 	db	49
   235  0042A1  20                 	db	32
   236  0042A2  46                 	db	70
   237  0042A3  69                 	db	105
   238  0042A4  6E                 	db	110
   239  0042A5  61                 	db	97
   240  0042A6  6C                 	db	108
   241  0042A7  00                 	db	0
   242  0042A8  00                 	db	0
   243  0042A9  00                 	db	0
   244  0042AA  00                 	db	0
   245  0042AB  00                 	db	0
   246  0042AC  00                 	db	0
   247  0042AD  00                 	db	0
   248  0042AE  00                 	db	0
   249  0042AF  00                 	db	0
   250  0042B0  00                 	db	0
   251                           
   252                           ;initializer for _array1
   253  0042B1  A2                 	db	162
   254  0042B2  62                 	db	98
   255  0042B3  E2                 	db	226
   256  0042B4  22                 	db	34
   257  0042B5  02                 	db	2
   258  0042B6  C2                 	db	194
   259  0042B7  E0                 	db	224
   260  0042B8  A8                 	db	168
   261  0042B9  90                 	db	144
   262  0042BA  68                 	db	104
   263  0042BB  98                 	db	152
   264  0042BC  B0                 	db	176
   265  0042BD  30                 	db	48
   266  0042BE  18                 	db	24
   267  0042BF  7A                 	db	122
   268  0042C0  10                 	db	16
   269  0042C1  38                 	db	56
   270  0042C2  5A                 	db	90
   271  0042C3  42                 	db	66
   272  0042C4  4A                 	db	74
   273  0042C5  52                 	db	82
   274                           
   275                           ;initializer for _alarm_time
   276  0042C6  30                 	db	48
   277  0042C7  30                 	db	48
   278  0042C8  3A                 	db	58
   279  0042C9  30                 	db	48
   280  0042CA  30                 	db	48
   281  0042CB  3A                 	db	58
   282  0042CC  30                 	db	48
   283  0042CD  30                 	db	48
   284  0042CE  00                 	db	0
   285                           
   286                           ;initializer for _date
   287  0042CF  30                 	db	48
   288  0042D0  30                 	db	48
   289  0042D1  2F                 	db	47
   290  0042D2  30                 	db	48
   291  0042D3  30                 	db	48
   292  0042D4  2F                 	db	47
   293  0042D5  30                 	db	48
   294  0042D6  30                 	db	48
   295  0042D7  00                 	db	0
   296                           
   297                           ;initializer for _setup_alarm_time
   298  0042D8  30                 	db	48
   299  0042D9  30                 	db	48
   300  0042DA  3A                 	db	58
   301  0042DB  30                 	db	48
   302  0042DC  30                 	db	48
   303  0042DD  3A                 	db	58
   304  0042DE  30                 	db	48
   305  0042DF  30                 	db	48
   306  0042E0  00                 	db	0
   307                           
   308                           ;initializer for _setup_date
   309  0042E1  30                 	db	48
   310  0042E2  31                 	db	49
   311  0042E3  2F                 	db	47
   312  0042E4  30                 	db	48
   313  0042E5  31                 	db	49
   314  0042E6  2F                 	db	47
   315  0042E7  30                 	db	48
   316  0042E8  30                 	db	48
   317  0042E9  00                 	db	0
   318                           
   319                           ;initializer for _setup_time
   320  0042EA  30                 	db	48
   321  0042EB  30                 	db	48
   322  0042EC  3A                 	db	58
   323  0042ED  30                 	db	48
   324  0042EE  30                 	db	48
   325  0042EF  3A                 	db	58
   326  0042F0  30                 	db	48
   327  0042F1  30                 	db	48
   328  0042F2  00                 	db	0
   329                           
   330                           ;initializer for _time
   331  0042F3  30                 	db	48
   332  0042F4  30                 	db	48
   333  0042F5  3A                 	db	58
   334  0042F6  30                 	db	48
   335  0042F7  30                 	db	48
   336  0042F8  3A                 	db	58
   337  0042F9  30                 	db	48
   338  0042FA  30                 	db	48
   339  0042FB  00                 	db	0
   340                           
   341                           ;initializer for _Volt_Txt
   342  0042FC  30                 	db	48
   343  0042FD  2E                 	db	46
   344  0042FE  30                 	db	48
   345  0042FF  30                 	db	48
   346  004300  56                 	db	86
   347  004301  00                 	db	0
   348                           
   349                           	psect	mediumconst
   350  00FC42                     __pmediumconst:
   351                           	opt stack 0
   352  00FC42  00                 	db	0
   353  00FC43                     _font:
   354                           	opt stack 0
   355  00FC43  00                 	db	0
   356  00FC44  00                 	db	0
   357  00FC45  00                 	db	0
   358  00FC46  00                 	db	0
   359  00FC47  00                 	db	0
   360  00FC48  00                 	db	0
   361  00FC49  00                 	db	0
   362  00FC4A  5F                 	db	95
   363  00FC4B  00                 	db	0
   364  00FC4C  00                 	db	0
   365  00FC4D  00                 	db	0
   366  00FC4E  07                 	db	7
   367  00FC4F  00                 	db	0
   368  00FC50  07                 	db	7
   369  00FC51  00                 	db	0
   370  00FC52  14                 	db	20
   371  00FC53  7F                 	db	127
   372  00FC54  14                 	db	20
   373  00FC55  7F                 	db	127
   374  00FC56  14                 	db	20
   375  00FC57  24                 	db	36
   376  00FC58  2A                 	db	42
   377  00FC59  7F                 	db	127
   378  00FC5A  2A                 	db	42
   379  00FC5B  12                 	db	18
   380  00FC5C  23                 	db	35
   381  00FC5D  13                 	db	19
   382  00FC5E  08                 	db	8
   383  00FC5F  64                 	db	100
   384  00FC60  62                 	db	98
   385  00FC61  36                 	db	54
   386  00FC62  49                 	db	73
   387  00FC63  56                 	db	86
   388  00FC64  20                 	db	32
   389  00FC65  50                 	db	80
   390  00FC66  00                 	db	0
   391  00FC67  08                 	db	8
   392  00FC68  07                 	db	7
   393  00FC69  03                 	db	3
   394  00FC6A  00                 	db	0
   395  00FC6B  00                 	db	0
   396  00FC6C  1C                 	db	28
   397  00FC6D  22                 	db	34
   398  00FC6E  41                 	db	65
   399  00FC6F  00                 	db	0
   400  00FC70  00                 	db	0
   401  00FC71  41                 	db	65
   402  00FC72  22                 	db	34
   403  00FC73  1C                 	db	28
   404  00FC74  00                 	db	0
   405  00FC75  2A                 	db	42
   406  00FC76  1C                 	db	28
   407  00FC77  7F                 	db	127
   408  00FC78  1C                 	db	28
   409  00FC79  2A                 	db	42
   410  00FC7A  08                 	db	8
   411  00FC7B  08                 	db	8
   412  00FC7C  3E                 	db	62
   413  00FC7D  08                 	db	8
   414  00FC7E  08                 	db	8
   415  00FC7F  00                 	db	0
   416  00FC80  80                 	db	128
   417  00FC81  70                 	db	112
   418  00FC82  30                 	db	48
   419  00FC83  00                 	db	0
   420  00FC84  08                 	db	8
   421  00FC85  08                 	db	8
   422  00FC86  08                 	db	8
   423  00FC87  08                 	db	8
   424  00FC88  08                 	db	8
   425  00FC89  00                 	db	0
   426  00FC8A  00                 	db	0
   427  00FC8B  60                 	db	96
   428  00FC8C  60                 	db	96
   429  00FC8D  00                 	db	0
   430  00FC8E  20                 	db	32
   431  00FC8F  10                 	db	16
   432  00FC90  08                 	db	8
   433  00FC91  04                 	db	4
   434  00FC92  02                 	db	2
   435  00FC93  3E                 	db	62
   436  00FC94  51                 	db	81
   437  00FC95  49                 	db	73
   438  00FC96  45                 	db	69
   439  00FC97  3E                 	db	62
   440  00FC98  00                 	db	0
   441  00FC99  42                 	db	66
   442  00FC9A  7F                 	db	127
   443  00FC9B  40                 	db	64
   444  00FC9C  00                 	db	0
   445  00FC9D  72                 	db	114
   446  00FC9E  49                 	db	73
   447  00FC9F  49                 	db	73
   448  00FCA0  49                 	db	73
   449  00FCA1  46                 	db	70
   450  00FCA2  21                 	db	33
   451  00FCA3  41                 	db	65
   452  00FCA4  49                 	db	73
   453  00FCA5  4D                 	db	77
   454  00FCA6  33                 	db	51
   455  00FCA7  18                 	db	24
   456  00FCA8  14                 	db	20
   457  00FCA9  12                 	db	18
   458  00FCAA  7F                 	db	127
   459  00FCAB  10                 	db	16
   460  00FCAC  27                 	db	39
   461  00FCAD  45                 	db	69
   462  00FCAE  45                 	db	69
   463  00FCAF  45                 	db	69
   464  00FCB0  39                 	db	57
   465  00FCB1  3C                 	db	60
   466  00FCB2  4A                 	db	74
   467  00FCB3  49                 	db	73
   468  00FCB4  49                 	db	73
   469  00FCB5  31                 	db	49
   470  00FCB6  41                 	db	65
   471  00FCB7  21                 	db	33
   472  00FCB8  11                 	db	17
   473  00FCB9  09                 	db	9
   474  00FCBA  07                 	db	7
   475  00FCBB  36                 	db	54
   476  00FCBC  49                 	db	73
   477  00FCBD  49                 	db	73
   478  00FCBE  49                 	db	73
   479  00FCBF  36                 	db	54
   480  00FCC0  46                 	db	70
   481  00FCC1  49                 	db	73
   482  00FCC2  49                 	db	73
   483  00FCC3  29                 	db	41
   484  00FCC4  1E                 	db	30
   485  00FCC5  00                 	db	0
   486  00FCC6  00                 	db	0
   487  00FCC7  14                 	db	20
   488  00FCC8  00                 	db	0
   489  00FCC9  00                 	db	0
   490  00FCCA  00                 	db	0
   491  00FCCB  40                 	db	64
   492  00FCCC  34                 	db	52
   493  00FCCD  00                 	db	0
   494  00FCCE  00                 	db	0
   495  00FCCF  00                 	db	0
   496  00FCD0  08                 	db	8
   497  00FCD1  14                 	db	20
   498  00FCD2  22                 	db	34
   499  00FCD3  41                 	db	65
   500  00FCD4  14                 	db	20
   501  00FCD5  14                 	db	20
   502  00FCD6  14                 	db	20
   503  00FCD7  14                 	db	20
   504  00FCD8  14                 	db	20
   505  00FCD9  00                 	db	0
   506  00FCDA  41                 	db	65
   507  00FCDB  22                 	db	34
   508  00FCDC  14                 	db	20
   509  00FCDD  08                 	db	8
   510  00FCDE  02                 	db	2
   511  00FCDF  01                 	db	1
   512  00FCE0  59                 	db	89
   513  00FCE1  09                 	db	9
   514  00FCE2  06                 	db	6
   515  00FCE3  3E                 	db	62
   516  00FCE4  41                 	db	65
   517  00FCE5  5D                 	db	93
   518  00FCE6  59                 	db	89
   519  00FCE7  4E                 	db	78
   520  00FCE8  7C                 	db	124
   521  00FCE9  12                 	db	18
   522  00FCEA  11                 	db	17
   523  00FCEB  12                 	db	18
   524  00FCEC  7C                 	db	124
   525  00FCED  7F                 	db	127
   526  00FCEE  49                 	db	73
   527  00FCEF  49                 	db	73
   528  00FCF0  49                 	db	73
   529  00FCF1  36                 	db	54
   530  00FCF2  3E                 	db	62
   531  00FCF3  41                 	db	65
   532  00FCF4  41                 	db	65
   533  00FCF5  41                 	db	65
   534  00FCF6  22                 	db	34
   535  00FCF7  7F                 	db	127
   536  00FCF8  41                 	db	65
   537  00FCF9  41                 	db	65
   538  00FCFA  41                 	db	65
   539  00FCFB  3E                 	db	62
   540  00FCFC  7F                 	db	127
   541  00FCFD  49                 	db	73
   542  00FCFE  49                 	db	73
   543  00FCFF  49                 	db	73
   544  00FD00  41                 	db	65
   545  00FD01  7F                 	db	127
   546  00FD02  09                 	db	9
   547  00FD03  09                 	db	9
   548  00FD04  09                 	db	9
   549  00FD05  01                 	db	1
   550  00FD06  3E                 	db	62
   551  00FD07  41                 	db	65
   552  00FD08  41                 	db	65
   553  00FD09  51                 	db	81
   554  00FD0A  73                 	db	115
   555  00FD0B  7F                 	db	127
   556  00FD0C  08                 	db	8
   557  00FD0D  08                 	db	8
   558  00FD0E  08                 	db	8
   559  00FD0F  7F                 	db	127
   560  00FD10  00                 	db	0
   561  00FD11  41                 	db	65
   562  00FD12  7F                 	db	127
   563  00FD13  41                 	db	65
   564  00FD14  00                 	db	0
   565  00FD15  20                 	db	32
   566  00FD16  40                 	db	64
   567  00FD17  41                 	db	65
   568  00FD18  3F                 	db	63
   569  00FD19  01                 	db	1
   570  00FD1A  7F                 	db	127
   571  00FD1B  08                 	db	8
   572  00FD1C  14                 	db	20
   573  00FD1D  22                 	db	34
   574  00FD1E  41                 	db	65
   575  00FD1F  7F                 	db	127
   576  00FD20  40                 	db	64
   577  00FD21  40                 	db	64
   578  00FD22  40                 	db	64
   579  00FD23  40                 	db	64
   580  00FD24  7F                 	db	127
   581  00FD25  02                 	db	2
   582  00FD26  1C                 	db	28
   583  00FD27  02                 	db	2
   584  00FD28  7F                 	db	127
   585  00FD29  7F                 	db	127
   586  00FD2A  04                 	db	4
   587  00FD2B  08                 	db	8
   588  00FD2C  10                 	db	16
   589  00FD2D  7F                 	db	127
   590  00FD2E  3E                 	db	62
   591  00FD2F  41                 	db	65
   592  00FD30  41                 	db	65
   593  00FD31  41                 	db	65
   594  00FD32  3E                 	db	62
   595  00FD33  7F                 	db	127
   596  00FD34  09                 	db	9
   597  00FD35  09                 	db	9
   598  00FD36  09                 	db	9
   599  00FD37  06                 	db	6
   600  00FD38  3E                 	db	62
   601  00FD39  41                 	db	65
   602  00FD3A  51                 	db	81
   603  00FD3B  21                 	db	33
   604  00FD3C  5E                 	db	94
   605  00FD3D  7F                 	db	127
   606  00FD3E  09                 	db	9
   607  00FD3F  19                 	db	25
   608  00FD40  29                 	db	41
   609  00FD41  46                 	db	70
   610  00FD42                     __end_of_font:
   611                           	opt stack 0
   612  00FD42                     _font2:
   613                           	opt stack 0
   614  00FD42  26                 	db	38
   615  00FD43  49                 	db	73
   616  00FD44  49                 	db	73
   617  00FD45  49                 	db	73
   618  00FD46  32                 	db	50
   619  00FD47  03                 	db	3
   620  00FD48  01                 	db	1
   621  00FD49  7F                 	db	127
   622  00FD4A  01                 	db	1
   623  00FD4B  03                 	db	3
   624  00FD4C  3F                 	db	63
   625  00FD4D  40                 	db	64
   626  00FD4E  40                 	db	64
   627  00FD4F  40                 	db	64
   628  00FD50  3F                 	db	63
   629  00FD51  1F                 	db	31
   630  00FD52  20                 	db	32
   631  00FD53  40                 	db	64
   632  00FD54  20                 	db	32
   633  00FD55  1F                 	db	31
   634  00FD56  3F                 	db	63
   635  00FD57  40                 	db	64
   636  00FD58  38                 	db	56
   637  00FD59  40                 	db	64
   638  00FD5A  3F                 	db	63
   639  00FD5B  63                 	db	99
   640  00FD5C  14                 	db	20
   641  00FD5D  08                 	db	8
   642  00FD5E  14                 	db	20
   643  00FD5F  63                 	db	99
   644  00FD60  03                 	db	3
   645  00FD61  04                 	db	4
   646  00FD62  78                 	db	120
   647  00FD63  04                 	db	4
   648  00FD64  03                 	db	3
   649  00FD65  61                 	db	97
   650  00FD66  59                 	db	89
   651  00FD67  49                 	db	73
   652  00FD68  4D                 	db	77
   653  00FD69  43                 	db	67
   654  00FD6A  00                 	db	0
   655  00FD6B  7F                 	db	127
   656  00FD6C  41                 	db	65
   657  00FD6D  41                 	db	65
   658  00FD6E  41                 	db	65
   659  00FD6F  02                 	db	2
   660  00FD70  04                 	db	4
   661  00FD71  08                 	db	8
   662  00FD72  10                 	db	16
   663  00FD73  20                 	db	32
   664  00FD74  00                 	db	0
   665  00FD75  41                 	db	65
   666  00FD76  41                 	db	65
   667  00FD77  41                 	db	65
   668  00FD78  7F                 	db	127
   669  00FD79  04                 	db	4
   670  00FD7A  02                 	db	2
   671  00FD7B  01                 	db	1
   672  00FD7C  02                 	db	2
   673  00FD7D  04                 	db	4
   674  00FD7E  40                 	db	64
   675  00FD7F  40                 	db	64
   676  00FD80  40                 	db	64
   677  00FD81  40                 	db	64
   678  00FD82  40                 	db	64
   679  00FD83  00                 	db	0
   680  00FD84  03                 	db	3
   681  00FD85  07                 	db	7
   682  00FD86  08                 	db	8
   683  00FD87  00                 	db	0
   684  00FD88  20                 	db	32
   685  00FD89  54                 	db	84
   686  00FD8A  54                 	db	84
   687  00FD8B  78                 	db	120
   688  00FD8C  40                 	db	64
   689  00FD8D  7F                 	db	127
   690  00FD8E  28                 	db	40
   691  00FD8F  44                 	db	68
   692  00FD90  44                 	db	68
   693  00FD91  38                 	db	56
   694  00FD92  38                 	db	56
   695  00FD93  44                 	db	68
   696  00FD94  44                 	db	68
   697  00FD95  44                 	db	68
   698  00FD96  28                 	db	40
   699  00FD97  38                 	db	56
   700  00FD98  44                 	db	68
   701  00FD99  44                 	db	68
   702  00FD9A  28                 	db	40
   703  00FD9B  7F                 	db	127
   704  00FD9C  38                 	db	56
   705  00FD9D  54                 	db	84
   706  00FD9E  54                 	db	84
   707  00FD9F  54                 	db	84
   708  00FDA0  18                 	db	24
   709  00FDA1  00                 	db	0
   710  00FDA2  08                 	db	8
   711  00FDA3  7E                 	db	126
   712  00FDA4  09                 	db	9
   713  00FDA5  02                 	db	2
   714  00FDA6  18                 	db	24
   715  00FDA7  A4                 	db	164
   716  00FDA8  A4                 	db	164
   717  00FDA9  9C                 	db	156
   718  00FDAA  78                 	db	120
   719  00FDAB  7F                 	db	127
   720  00FDAC  08                 	db	8
   721  00FDAD  04                 	db	4
   722  00FDAE  04                 	db	4
   723  00FDAF  78                 	db	120
   724  00FDB0  00                 	db	0
   725  00FDB1  44                 	db	68
   726  00FDB2  7D                 	db	125
   727  00FDB3  40                 	db	64
   728  00FDB4  00                 	db	0
   729  00FDB5  20                 	db	32
   730  00FDB6  40                 	db	64
   731  00FDB7  40                 	db	64
   732  00FDB8  3D                 	db	61
   733  00FDB9  00                 	db	0
   734  00FDBA  7F                 	db	127
   735  00FDBB  10                 	db	16
   736  00FDBC  28                 	db	40
   737  00FDBD  44                 	db	68
   738  00FDBE  00                 	db	0
   739  00FDBF  00                 	db	0
   740  00FDC0  41                 	db	65
   741  00FDC1  7F                 	db	127
   742  00FDC2  40                 	db	64
   743  00FDC3  00                 	db	0
   744  00FDC4  7C                 	db	124
   745  00FDC5  04                 	db	4
   746  00FDC6  78                 	db	120
   747  00FDC7  04                 	db	4
   748  00FDC8  78                 	db	120
   749  00FDC9  7C                 	db	124
   750  00FDCA  08                 	db	8
   751  00FDCB  04                 	db	4
   752  00FDCC  04                 	db	4
   753  00FDCD  78                 	db	120
   754  00FDCE  38                 	db	56
   755  00FDCF  44                 	db	68
   756  00FDD0  44                 	db	68
   757  00FDD1  44                 	db	68
   758  00FDD2  38                 	db	56
   759  00FDD3  FC                 	db	252
   760  00FDD4  18                 	db	24
   761  00FDD5  24                 	db	36
   762  00FDD6  24                 	db	36
   763  00FDD7  18                 	db	24
   764  00FDD8  18                 	db	24
   765  00FDD9  24                 	db	36
   766  00FDDA  24                 	db	36
   767  00FDDB  18                 	db	24
   768  00FDDC  FC                 	db	252
   769  00FDDD  7C                 	db	124
   770  00FDDE  08                 	db	8
   771  00FDDF  04                 	db	4
   772  00FDE0  04                 	db	4
   773  00FDE1  08                 	db	8
   774  00FDE2  48                 	db	72
   775  00FDE3  54                 	db	84
   776  00FDE4  54                 	db	84
   777  00FDE5  54                 	db	84
   778  00FDE6  24                 	db	36
   779  00FDE7  04                 	db	4
   780  00FDE8  04                 	db	4
   781  00FDE9  3F                 	db	63
   782  00FDEA  44                 	db	68
   783  00FDEB  24                 	db	36
   784  00FDEC  3C                 	db	60
   785  00FDED  40                 	db	64
   786  00FDEE  40                 	db	64
   787  00FDEF  20                 	db	32
   788  00FDF0  7C                 	db	124
   789  00FDF1  1C                 	db	28
   790  00FDF2  20                 	db	32
   791  00FDF3  40                 	db	64
   792  00FDF4  20                 	db	32
   793  00FDF5  1C                 	db	28
   794  00FDF6  3C                 	db	60
   795  00FDF7  40                 	db	64
   796  00FDF8  30                 	db	48
   797  00FDF9  40                 	db	64
   798  00FDFA  3C                 	db	60
   799  00FDFB  44                 	db	68
   800  00FDFC  28                 	db	40
   801  00FDFD  10                 	db	16
   802  00FDFE  28                 	db	40
   803  00FDFF  44                 	db	68
   804  00FE00  4C                 	db	76
   805  00FE01  90                 	db	144
   806  00FE02  90                 	db	144
   807  00FE03  90                 	db	144
   808  00FE04  7C                 	db	124
   809  00FE05  44                 	db	68
   810  00FE06  64                 	db	100
   811  00FE07  54                 	db	84
   812  00FE08  4C                 	db	76
   813  00FE09  44                 	db	68
   814  00FE0A  00                 	db	0
   815  00FE0B  08                 	db	8
   816  00FE0C  36                 	db	54
   817  00FE0D  41                 	db	65
   818  00FE0E  00                 	db	0
   819  00FE0F  00                 	db	0
   820  00FE10  00                 	db	0
   821  00FE11  77                 	db	119
   822  00FE12  00                 	db	0
   823  00FE13  00                 	db	0
   824  00FE14  00                 	db	0
   825  00FE15  41                 	db	65
   826  00FE16  36                 	db	54
   827  00FE17  08                 	db	8
   828  00FE18  00                 	db	0
   829  00FE19  02                 	db	2
   830  00FE1A  01                 	db	1
   831  00FE1B  02                 	db	2
   832  00FE1C  04                 	db	4
   833  00FE1D  02                 	db	2
   834  00FE1E                     __end_of_font2:
   835                           	opt stack 0
   836  00FE1E                     _dpowers:
   837                           	opt stack 0
   838  00FE1E  0001               	dw	1
   839  00FE20  0000               	dw	0
   840  00FE22  000A               	dw	10
   841  00FE24  0000               	dw	0
   842  00FE26  0064               	dw	100
   843  00FE28  0000               	dw	0
   844  00FE2A  03E8               	dw	1000
   845  00FE2C  0000               	dw	0
   846  00FE2E  2710               	dw	10000
   847  00FE30  0000               	dw	0
   848  00FE32  86A0               	dw	34464
   849  00FE34  0001               	dw	1
   850  00FE36  4240               	dw	16960
   851  00FE38  000F               	dw	15
   852  00FE3A  9680               	dw	38528
   853  00FE3C  0098               	dw	152
   854  00FE3E  E100               	dw	57600
   855  00FE40  05F5               	dw	1525
   856  00FE42  CA00               	dw	51712
   857  00FE44  3B9A               	dw	15258
   858  00FE46                     __end_of_dpowers:
   859                           	opt stack 0
   860  00FE46                     __npowers_:
   861                           	opt stack 0
   862  00FE46  00                 	db	0
   863  00FE47  80                 	db	128
   864  00FE48  3F                 	db	63
   865  00FE49  CD                 	db	205
   866  00FE4A  CC                 	db	204
   867  00FE4B  3D                 	db	61
   868  00FE4C  D7                 	db	215
   869  00FE4D  23                 	db	35
   870  00FE4E  3C                 	db	60
   871  00FE4F  12                 	db	18
   872  00FE50  83                 	db	131
   873  00FE51  3A                 	db	58
   874  00FE52  B7                 	db	183
   875  00FE53  D1                 	db	209
   876  00FE54  38                 	db	56
   877  00FE55  C6                 	db	198
   878  00FE56  27                 	db	39
   879  00FE57  37                 	db	55
   880  00FE58  38                 	db	56
   881  00FE59  86                 	db	134
   882  00FE5A  35                 	db	53
   883  00FE5B  C0                 	db	192
   884  00FE5C  D6                 	db	214
   885  00FE5D  33                 	db	51
   886  00FE5E  CC                 	db	204
   887  00FE5F  2B                 	db	43
   888  00FE60  32                 	db	50
   889  00FE61  70                 	db	112
   890  00FE62  89                 	db	137
   891  00FE63  30                 	db	48
   892  00FE64  E7                 	db	231
   893  00FE65  DB                 	db	219
   894  00FE66  2E                 	db	46
   895  00FE67  E5                 	db	229
   896  00FE68  3C                 	db	60
   897  00FE69  1E                 	db	30
   898  00FE6A  42                 	db	66
   899  00FE6B  A2                 	db	162
   900  00FE6C  0D                 	db	13
   901  00FE6D                     __end_of__npowers_:
   902                           	opt stack 0
   903  00FE6D                     __powers_:
   904                           	opt stack 0
   905  00FE6D  00                 	db	0
   906  00FE6E  80                 	db	128
   907  00FE6F  3F                 	db	63
   908  00FE70  00                 	db	0
   909  00FE71  20                 	db	32
   910  00FE72  41                 	db	65
   911  00FE73  00                 	db	0
   912  00FE74  C8                 	db	200
   913  00FE75  42                 	db	66
   914  00FE76  00                 	db	0
   915  00FE77  7A                 	db	122
   916  00FE78  44                 	db	68
   917  00FE79  40                 	db	64
   918  00FE7A  1C                 	db	28
   919  00FE7B  46                 	db	70
   920  00FE7C  50                 	db	80
   921  00FE7D  C3                 	db	195
   922  00FE7E  47                 	db	71
   923  00FE7F  24                 	db	36
   924  00FE80  74                 	db	116
   925  00FE81  49                 	db	73
   926  00FE82  97                 	db	151
   927  00FE83  18                 	db	24
   928  00FE84  4B                 	db	75
   929  00FE85  BC                 	db	188
   930  00FE86  BE                 	db	190
   931  00FE87  4C                 	db	76
   932  00FE88  6B                 	db	107
   933  00FE89  6E                 	db	110
   934  00FE8A  4E                 	db	78
   935  00FE8B  03                 	db	3
   936  00FE8C  15                 	db	21
   937  00FE8D  50                 	db	80
   938  00FE8E  79                 	db	121
   939  00FE8F  AD                 	db	173
   940  00FE90  60                 	db	96
   941  00FE91  F3                 	db	243
   942  00FE92  49                 	db	73
   943  00FE93  71                 	db	113
   944  00FE94                     __end_of__powers_:
   945                           	opt stack 0
   946  00FE94                     _hexpowers:
   947                           	opt stack 0
   948  00FE94  0001               	dw	1
   949  00FE96  0000               	dw	0
   950  00FE98  0010               	dw	16
   951  00FE9A  0000               	dw	0
   952  00FE9C  0100               	dw	256
   953  00FE9E  0000               	dw	0
   954  00FEA0  1000               	dw	4096
   955  00FEA2  0000               	dw	0
   956  00FEA4  0000               	dw	0
   957  00FEA6  0001               	dw	1
   958  00FEA8  0000               	dw	0
   959  00FEAA  0010               	dw	16
   960  00FEAC  0000               	dw	0
   961  00FEAE  0100               	dw	256
   962  00FEB0  0000               	dw	0
   963  00FEB2  1000               	dw	4096
   964  00FEB4                     __end_of_hexpowers:
   965                           	opt stack 0
   966  0000                     _ADCON0	set	4034
   967  0000                     _ADCON0bits	set	4034
   968  0000                     _ADCON1	set	4033
   969  0000                     _ADCON2	set	4032
   970  0000                     _ADRESH	set	4036
   971  0000                     _ADRESL	set	4035
   972  0000                     _CCP1CON	set	4029
   973  0000                     _CCP2CON	set	4026
   974  0000                     _CCPR1L	set	4030
   975  0000                     _CCPR2L	set	4027
   976  0000                     _INTCON2bits	set	4081
   977  0000                     _INTCON3bits	set	4080
   978  0000                     _INTCONbits	set	4082
   979  0000                     _OSCCON	set	4051
   980  0000                     _PIE1bits	set	3997
   981  0000                     _PIR1bits	set	3998
   982  0000                     _PORTAbits	set	3968
   983  0000                     _PORTBbits	set	3969
   984  0000                     _PORTDbits	set	3971
   985  0000                     _PORTE	set	3972
   986  0000                     _PR2	set	4043
   987  0000                     _RCSTA	set	4011
   988  0000                     _RCSTAbits	set	4011
   989  0000                     _SPBRG	set	4015
   990  0000                     _SPBRGH	set	4016
   991  0000                     _SSPBUF	set	4041
   992  0000                     _SSPCON1	set	4038
   993  0000                     _SSPSTAT	set	4039
   994  0000                     _SSPSTATbits	set	4039
   995  0000                     _T0CON	set	4053
   996  0000                     _T0CONbits	set	4053
   997  0000                     _T1CON	set	4045
   998  0000                     _T1CONbits	set	4045
   999  0000                     _T2CON	set	4042
  1000  0000                     _T3CON	set	4017
  1001  0000                     _TMR0H	set	4055
  1002  0000                     _TMR0L	set	4054
  1003  0000                     _TMR1H	set	4047
  1004  0000                     _TMR1L	set	4046
  1005  0000                     _TMR3L	set	4018
  1006  0000                     _TRISA	set	3986
  1007  0000                     _TRISB	set	3987
  1008  0000                     _TRISC	set	3988
  1009  0000                     _TRISCbits	set	3988
  1010  0000                     _TRISD	set	3989
  1011  0000                     _TRISDbits	set	3989
  1012  0000                     _TRISE	set	3990
  1013  0000                     _TXREG	set	4013
  1014  0000                     _TXSTA	set	4012
  1015  0000                     _TXSTAbits	set	4012
  1016  0000                     _RBPU	set	32655
  1017  0000                     _TRMT	set	32097
  1018  00FEB4                     STR_1:
  1019                           
  1020                           ; BSR set to: 0
  1021  00FEB4  25                 	db	37
  1022  00FEB5  30                 	db	48	;'0'
  1023  00FEB6  32                 	db	50	;'2'
  1024  00FEB7  78                 	db	120	;'x'
  1025  00FEB8  3A                 	db	58	;':'
  1026  00FEB9  25                 	db	37
  1027  00FEBA  30                 	db	48	;'0'
  1028  00FEBB  32                 	db	50	;'2'
  1029  00FEBC  78                 	db	120	;'x'
  1030  00FEBD  3A                 	db	58	;':'
  1031  00FEBE  25                 	db	37
  1032  00FEBF  30                 	db	48	;'0'
  1033  00FEC0  32                 	db	50	;'2'
  1034  00FEC1  78                 	db	120	;'x'
  1035  00FEC2  20                 	db	32
  1036  00FEC3  25                 	db	37
  1037  00FEC4  30                 	db	48	;'0'
  1038  00FEC5  32                 	db	50	;'2'
  1039  00FEC6  78                 	db	120	;'x'
  1040  00FEC7  2F                 	db	47
  1041  00FEC8  25                 	db	37
  1042  00FEC9  30                 	db	48	;'0'
  1043  00FECA  32                 	db	50	;'2'
  1044  00FECB  78                 	db	120	;'x'
  1045  00FECC  2F                 	db	47
  1046  00FECD  25                 	db	37
  1047  00FECE  30                 	db	48	;'0'
  1048  00FECF  32                 	db	50	;'2'
  1049  00FED0  78                 	db	120	;'x'
  1050  00FED1  00                 	db	0
  1051  00FED2                     STR_3:
  1052                           
  1053                           ; BSR set to: 0
  1054  00FED2  61                 	db	97	;'a'
  1055  00FED3  6C                 	db	108	;'l'
  1056  00FED4  61                 	db	97	;'a'
  1057  00FED5  72                 	db	114	;'r'
  1058  00FED6  6D                 	db	109	;'m'
  1059  00FED7  20                 	db	32
  1060  00FED8  3D                 	db	61	;'='
  1061  00FED9  20                 	db	32
  1062  00FEDA  25                 	db	37
  1063  00FEDB  64                 	db	100	;'d'
  1064  00FEDC  20                 	db	32
  1065  00FEDD  6D                 	db	109	;'m'
  1066  00FEDE  61                 	db	97	;'a'
  1067  00FEDF  74                 	db	116	;'t'
  1068  00FEE0  63                 	db	99	;'c'
  1069  00FEE1  68                 	db	104	;'h'
  1070  00FEE2  20                 	db	32
  1071  00FEE3  3D                 	db	61	;'='
  1072  00FEE4  20                 	db	32
  1073  00FEE5  25                 	db	37
  1074  00FEE6  64                 	db	100	;'d'
  1075  00FEE7  20                 	db	32
  1076  00FEE8  00                 	db	0
  1077  00FEE9                     STR_35:
  1078                           
  1079                           ; BSR set to: 0
  1080  00FEE9  43                 	db	67	;'C'
  1081  00FEEA  61                 	db	97	;'a'
  1082  00FEEB  6E                 	db	110	;'n'
  1083  00FEEC  6E                 	db	110	;'n'
  1084  00FEED  6F                 	db	111	;'o'
  1085  00FEEE  74                 	db	116	;'t'
  1086  00FEEF  20                 	db	32
  1087  00FEF0  66                 	db	102	;'f'
  1088  00FEF1  69                 	db	105	;'i'
  1089  00FEF2  6E                 	db	110	;'n'
  1090  00FEF3  64                 	db	100	;'d'
  1091  00FEF4  20                 	db	32
  1092  00FEF5  62                 	db	98	;'b'
  1093  00FEF6  75                 	db	117	;'u'
  1094  00FEF7  74                 	db	116	;'t'
  1095  00FEF8  74                 	db	116	;'t'
  1096  00FEF9  6F                 	db	111	;'o'
  1097  00FEFA  6E                 	db	110	;'n'
  1098  00FEFB  20                 	db	32
  1099  00FEFC  0D                 	db	13
  1100  00FEFD  0A                 	db	10
  1101  00FEFE  00                 	db	0
  1102  00FEFF                     STR_6:
  1103                           
  1104                           ; BSR set to: 0
  1105  00FEFF  45                 	db	69	;'E'
  1106  00FF00  43                 	db	67	;'C'
  1107  00FF01  45                 	db	69	;'E'
  1108  00FF02  33                 	db	51	;'3'
  1109  00FF03  33                 	db	51	;'3'
  1110  00FF04  30                 	db	48	;'0'
  1111  00FF05  31                 	db	49	;'1'
  1112  00FF06  4C                 	db	76	;'L'
  1113  00FF07  20                 	db	32
  1114  00FF08  53                 	db	83	;'S'
  1115  00FF09  70                 	db	112	;'p'
  1116  00FF0A  32                 	db	50	;'2'
  1117  00FF0B  31                 	db	49	;'1'
  1118  00FF0C  20                 	db	32
  1119  00FF0D  46                 	db	70	;'F'
  1120  00FF0E  69                 	db	105	;'i'
  1121  00FF0F  6E                 	db	110	;'n'
  1122  00FF10  61                 	db	97	;'a'
  1123  00FF11  6C                 	db	108	;'l'
  1124  00FF12  00                 	db	0
  1125  00FF13  00                 	db	0
  1126  00FF14                     STR_2:
  1127                           
  1128                           ; BSR set to: 0
  1129  00FF14  20                 	db	32
  1130  00FF15  54                 	db	84	;'T'
  1131  00FF16  65                 	db	101	;'e'
  1132  00FF17  6D                 	db	109	;'m'
  1133  00FF18  70                 	db	112	;'p'
  1134  00FF19  20                 	db	32
  1135  00FF1A  3D                 	db	61	;'='
  1136  00FF1B  20                 	db	32
  1137  00FF1C  25                 	db	37
  1138  00FF1D  64                 	db	100	;'d'
  1139  00FF1E  20                 	db	32
  1140  00FF1F  43                 	db	67	;'C'
  1141  00FF20  20                 	db	32
  1142  00FF21  3D                 	db	61	;'='
  1143  00FF22  20                 	db	32
  1144  00FF23  25                 	db	37
  1145  00FF24  64                 	db	100	;'d'
  1146  00FF25  20                 	db	32
  1147  00FF26  46                 	db	70	;'F'
  1148  00FF27  20                 	db	32
  1149  00FF28  00                 	db	0
  1150  00FF29                     STR_24:
  1151                           
  1152                           ; BSR set to: 0
  1153  00FF29  45                 	db	69	;'E'
  1154  00FF2A  43                 	db	67	;'C'
  1155  00FF2B  45                 	db	69	;'E'
  1156  00FF2C  33                 	db	51	;'3'
  1157  00FF2D  33                 	db	51	;'3'
  1158  00FF2E  30                 	db	48	;'0'
  1159  00FF2F  31                 	db	49	;'1'
  1160  00FF30  4C                 	db	76	;'L'
  1161  00FF31  20                 	db	32
  1162  00FF32  53                 	db	83	;'S'
  1163  00FF33  70                 	db	112	;'p'
  1164  00FF34  32                 	db	50	;'2'
  1165  00FF35  31                 	db	49	;'1'
  1166  00FF36  20                 	db	32
  1167  00FF37  46                 	db	70	;'F'
  1168  00FF38  69                 	db	105	;'i'
  1169  00FF39  6E                 	db	110	;'n'
  1170  00FF3A  61                 	db	97	;'a'
  1171  00FF3B  6C                 	db	108	;'l'
  1172  00FF3C  00                 	db	0
  1173  00FF3D                     STR_4:
  1174                           
  1175                           ; BSR set to: 0
  1176  00FF3D  52                 	db	82	;'R'
  1177  00FF3E  50                 	db	80	;'P'
  1178  00FF3F  4D                 	db	77	;'M'
  1179  00FF40  20                 	db	32
  1180  00FF41  3D                 	db	61	;'='
  1181  00FF42  20                 	db	32
  1182  00FF43  25                 	db	37
  1183  00FF44  64                 	db	100	;'d'
  1184  00FF45  20                 	db	32
  1185  00FF46  20                 	db	32
  1186  00FF47  64                 	db	100	;'d'
  1187  00FF48  63                 	db	99	;'c'
  1188  00FF49  20                 	db	32
  1189  00FF4A  3D                 	db	61	;'='
  1190  00FF4B  20                 	db	32
  1191  00FF4C  25                 	db	37
  1192  00FF4D  64                 	db	100	;'d'
  1193  00FF4E  20                 	db	32
  1194  00FF4F  00                 	db	0
  1195  00FF50                     STR_36:
  1196                           
  1197                           ; BSR set to: 0
  1198  00FF50  30                 	db	48	;'0'
  1199  00FF51  31                 	db	49	;'1'
  1200  00FF52  32                 	db	50	;'2'
  1201  00FF53  33                 	db	51	;'3'
  1202  00FF54  34                 	db	52	;'4'
  1203  00FF55  35                 	db	53	;'5'
  1204  00FF56  36                 	db	54	;'6'
  1205  00FF57  37                 	db	55	;'7'
  1206  00FF58  38                 	db	56	;'8'
  1207  00FF59  39                 	db	57	;'9'
  1208  00FF5A  61                 	db	97	;'a'
  1209  00FF5B  62                 	db	98	;'b'
  1210  00FF5C  63                 	db	99	;'c'
  1211  00FF5D  64                 	db	100	;'d'
  1212  00FF5E  65                 	db	101	;'e'
  1213  00FF5F  66                 	db	102	;'f'
  1214  00FF60  00                 	db	0
  1215  00FF61                     STR_30:
  1216                           
  1217                           ; BSR set to: 0
  1218  00FF61  20                 	db	32
  1219  00FF62  20                 	db	32
  1220  00FF63  53                 	db	83	;'S'
  1221  00FF64  65                 	db	101	;'e'
  1222  00FF65  74                 	db	116	;'t'
  1223  00FF66  20                 	db	32
  1224  00FF67  46                 	db	70	;'F'
  1225  00FF68  61                 	db	97	;'a'
  1226  00FF69  6E                 	db	110	;'n'
  1227  00FF6A  20                 	db	32
  1228  00FF6B  54                 	db	84	;'T'
  1229  00FF6C  65                 	db	101	;'e'
  1230  00FF6D  6D                 	db	109	;'m'
  1231  00FF6E  70                 	db	112	;'p'
  1232  00FF6F  00                 	db	0
  1233  00FF70                     STR_7:
  1234                           
  1235                           ; BSR set to: 0
  1236  00FF70  54                 	db	84	;'T'
  1237  00FF71  65                 	db	101	;'e'
  1238  00FF72  6D                 	db	109	;'m'
  1239  00FF73  70                 	db	112	;'p'
  1240  00FF74  65                 	db	101	;'e'
  1241  00FF75  72                 	db	114	;'r'
  1242  00FF76  61                 	db	97	;'a'
  1243  00FF77  74                 	db	116	;'t'
  1244  00FF78  75                 	db	117	;'u'
  1245  00FF79  72                 	db	114	;'r'
  1246  00FF7A  65                 	db	101	;'e'
  1247  00FF7B  3A                 	db	58	;':'
  1248  00FF7C  00                 	db	0
  1249  00FF7D                     STR_14:
  1250                           
  1251                           ; BSR set to: 0
  1252  00FF7D  46                 	db	70	;'F'
  1253  00FF7E  41                 	db	65	;'A'
  1254  00FF7F  4E                 	db	78	;'N'
  1255  00FF80  20                 	db	32
  1256  00FF81  53                 	db	83	;'S'
  1257  00FF82  65                 	db	101	;'e'
  1258  00FF83  74                 	db	116	;'t'
  1259  00FF84  20                 	db	32
  1260  00FF85  54                 	db	84	;'T'
  1261  00FF86  65                 	db	101	;'e'
  1262  00FF87  6D                 	db	109	;'m'
  1263  00FF88  70                 	db	112	;'p'
  1264  00FF89  00                 	db	0
  1265  00FF8A                     STR_32:
  1266                           
  1267                           ; BSR set to: 0
  1268  00FF8A  54                 	db	84	;'T'
  1269  00FF8B  69                 	db	105	;'i'
  1270  00FF8C  6D                 	db	109	;'m'
  1271  00FF8D  65                 	db	101	;'e'
  1272  00FF8E  20                 	db	32
  1273  00FF8F  53                 	db	83	;'S'
  1274  00FF90  65                 	db	101	;'e'
  1275  00FF91  74                 	db	116	;'t'
  1276  00FF92  75                 	db	117	;'u'
  1277  00FF93  70                 	db	112	;'p'
  1278  00FF94  00                 	db	0
  1279  00FF95  00                 	db	0
  1280  00FF96                     STR_29:
  1281                           
  1282                           ; BSR set to: 0
  1283  00FF96  20                 	db	32
  1284  00FF97  46                 	db	70	;'F'
  1285  00FF98  61                 	db	97	;'a'
  1286  00FF99  6E                 	db	110	;'n'
  1287  00FF9A  20                 	db	32
  1288  00FF9B  53                 	db	83	;'S'
  1289  00FF9C  65                 	db	101	;'e'
  1290  00FF9D  74                 	db	116	;'t'
  1291  00FF9E  75                 	db	117	;'u'
  1292  00FF9F  70                 	db	112	;'p'
  1293  00FFA0  00                 	db	0
  1294  00FFA1  00                 	db	0
  1295  00FFA2                     STR_5:
  1296                           
  1297                           ; BSR set to: 0
  1298  00FFA2  56                 	db	86	;'V'
  1299  00FFA3  6F                 	db	111	;'o'
  1300  00FFA4  6C                 	db	108	;'l'
  1301  00FFA5  74                 	db	116	;'t'
  1302  00FFA6  20                 	db	32
  1303  00FFA7  3D                 	db	61	;'='
  1304  00FFA8  20                 	db	32
  1305  00FFA9  25                 	db	37
  1306  00FFAA  66                 	db	102	;'f'
  1307  00FFAB  0D                 	db	13
  1308  00FFAC  0A                 	db	10
  1309  00FFAD  00                 	db	0
  1310  00FFAE                     STR_27:
  1311                           
  1312                           ; BSR set to: 0
  1313  00FFAE  25                 	db	37
  1314  00FFAF  78                 	db	120	;'x'
  1315  00FFB0  3A                 	db	58	;':'
  1316  00FFB1  25                 	db	37
  1317  00FFB2  78                 	db	120	;'x'
  1318  00FFB3  3A                 	db	58	;':'
  1319  00FFB4  25                 	db	37
  1320  00FFB5  78                 	db	120	;'x'
  1321  00FFB6  0D                 	db	13
  1322  00FFB7  0A                 	db	10
  1323  00FFB8  00                 	db	0
  1324  00FFB9                     STR_25:
  1325                           
  1326                           ; BSR set to: 0
  1327  00FFB9  41                 	db	65	;'A'
  1328  00FFBA  6C                 	db	108	;'l'
  1329  00FFBB  72                 	db	114	;'r'
  1330  00FFBC  6D                 	db	109	;'m'
  1331  00FFBD  20                 	db	32
  1332  00FFBE  53                 	db	83	;'S'
  1333  00FFBF  65                 	db	101	;'e'
  1334  00FFC0  74                 	db	116	;'t'
  1335  00FFC1  75                 	db	117	;'u'
  1336  00FFC2  70                 	db	112	;'p'
  1337  00FFC3  00                 	db	0
  1338  00FFC4                     STR_12:
  1339                           
  1340                           ; BSR set to: 0
  1341  00FFC4  41                 	db	65	;'A'
  1342  00FFC5  6C                 	db	108	;'l'
  1343  00FFC6  61                 	db	97	;'a'
  1344  00FFC7  72                 	db	114	;'r'
  1345  00FFC8  6D                 	db	109	;'m'
  1346  00FFC9  20                 	db	32
  1347  00FFCA  54                 	db	84	;'T'
  1348  00FFCB  69                 	db	105	;'i'
  1349  00FFCC  6D                 	db	109	;'m'
  1350  00FFCD  65                 	db	101	;'e'
  1351  00FFCE  00                 	db	0
  1352  00FFCF                     STR_13:
  1353                           
  1354                           ; BSR set to: 0
  1355  00FFCF  41                 	db	65	;'A'
  1356  00FFD0  6C                 	db	108	;'l'
  1357  00FFD1  61                 	db	97	;'a'
  1358  00FFD2  72                 	db	114	;'r'
  1359  00FFD3  6D                 	db	109	;'m'
  1360  00FFD4  20                 	db	32
  1361  00FFD5  53                 	db	83	;'S'
  1362  00FFD6  57                 	db	87	;'W'
  1363  00FFD7  00                 	db	0
  1364  00FFD8                     STR_15:
  1365                           
  1366                           ; BSR set to: 0
  1367  00FFD8  46                 	db	70	;'F'
  1368  00FFD9  61                 	db	97	;'a'
  1369  00FFDA  6E                 	db	110	;'n'
  1370  00FFDB  20                 	db	32
  1371  00FFDC  53                 	db	83	;'S'
  1372  00FFDD  57                 	db	87	;'W'
  1373  00FFDE  00                 	db	0
  1374  00FFDF                     STR_11:
  1375                           
  1376                           ; BSR set to: 0
  1377  00FFDF  44                 	db	68	;'D'
  1378  00FFE0  61                 	db	97	;'a'
  1379  00FFE1  74                 	db	116	;'t'
  1380  00FFE2  65                 	db	101	;'e'
  1381  00FFE3  00                 	db	0
  1382  00FFE4                     STR_18:
  1383                           
  1384                           ; BSR set to: 0
  1385  00FFE4  56                 	db	86	;'V'
  1386  00FFE5  6F                 	db	111	;'o'
  1387  00FFE6  6C                 	db	108	;'l'
  1388  00FFE7  74                 	db	116	;'t'
  1389  00FFE8  00                 	db	0
  1390  00FFE9                     STR_20:
  1391                           
  1392                           ; BSR set to: 0
  1393  00FFE9  4F                 	db	79	;'O'
  1394  00FFEA  4E                 	db	78	;'N'
  1395  00FFEB  20                 	db	32
  1396  00FFEC  00                 	db	0
  1397  00FFED                     STR_21:
  1398                           
  1399                           ; BSR set to: 0
  1400  00FFED  4F                 	db	79	;'O'
  1401  00FFEE  46                 	db	70	;'F'
  1402  00FFEF  46                 	db	70	;'F'
  1403  00FFF0  00                 	db	0
  1404  00FFF1                     STR_19:
  1405                           
  1406                           ; BSR set to: 0
  1407  00FFF1  52                 	db	82	;'R'
  1408  00FFF2  50                 	db	80	;'P'
  1409  00FFF3  4D                 	db	77	;'M'
  1410  00FFF4  00                 	db	0
  1411  00FFF5                     STR_8:
  1412                           
  1413                           ; BSR set to: 0
  1414  00FFF5  43                 	db	67	;'C'
  1415  00FFF6  2F                 	db	47
  1416  00FFF7  00                 	db	0
  1417  00FFF8                     STR_16:
  1418                           
  1419                           ; BSR set to: 0
  1420  00FFF8  44                 	db	68	;'D'
  1421  00FFF9  43                 	db	67	;'C'
  1422  00FFFA  00                 	db	0
  1423  00FFFB                     STR_17:
  1424                           
  1425                           ; BSR set to: 0
  1426  00FFFB  52                 	db	82	;'R'
  1427  00FFFC  4D                 	db	77	;'M'
  1428  00FFFD  00                 	db	0
  1429  0000                     
  1430                           ; #config settings
  1431  00FFFE  00                 	db	0	; dummy byte at the end
  1432  0000                     
  1433                           	psect	cinit
  1434  0044AE                     __pcinit:
  1435                           	opt stack 0
  1436  0044AE                     start_initialization:
  1437                           	opt stack 0
  1438  0044AE                     __initialization:
  1439                           	opt stack 0
  1440                           
  1441                           ; Clear objects allocated to BANK0 (53 bytes)
  1442  0044AE  EE00  F080         	lfsr	0,__pbssBANK0
  1443  0044B2  0E35               	movlw	53
  1444  0044B4                     clear_0:
  1445  0044B4  6AEE               	clrf	postinc0,c
  1446  0044B6  06E8               	decf	wreg,f,c
  1447  0044B8  E1FD               	bnz	clear_0
  1448                           
  1449                           ; Clear objects allocated to COMRAM (16 bytes)
  1450  0044BA  EE00  F060         	lfsr	0,__pbssCOMRAM
  1451  0044BE  0E10               	movlw	16
  1452  0044C0                     clear_1:
  1453  0044C0  6AEE               	clrf	postinc0,c
  1454  0044C2  06E8               	decf	wreg,f,c
  1455  0044C4  E1FD               	bnz	clear_1
  1456                           
  1457                           ; Initialize objects allocated to BANK1 (112 bytes)
  1458                           ; load TBLPTR registers with __pidataBANK1
  1459  0044C6  0E92               	movlw	low __pidataBANK1
  1460  0044C8  6EF6               	movwf	tblptrl,c
  1461  0044CA  0E42               	movlw	high __pidataBANK1
  1462  0044CC  6EF7               	movwf	tblptrh,c
  1463  0044CE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1464  0044D0  6EF8               	movwf	tblptru,c
  1465  0044D2  EE01  F000         	lfsr	0,__pdataBANK1
  1466  0044D6  EE10 F070          	lfsr	1,112
  1467  0044DA                     copy_data0:
  1468  0044DA  0009               	tblrd		*+
  1469  0044DC  CFF5 FFEE          	movff	tablat,postinc0
  1470  0044E0  50E5               	movf	postdec1,w,c
  1471  0044E2  50E1               	movf	fsr1l,w,c
  1472  0044E4  E1FA               	bnz	copy_data0
  1473                           
  1474                           ; Initialize objects allocated to BANK0 (40 bytes)
  1475                           ; load TBLPTR registers with __pidataBANK0
  1476  0044E6  0E20               	movlw	low __pidataBANK0
  1477  0044E8  6EF6               	movwf	tblptrl,c
  1478  0044EA  0E4C               	movlw	high __pidataBANK0
  1479  0044EC  6EF7               	movwf	tblptrh,c
  1480  0044EE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1481  0044F0  6EF8               	movwf	tblptru,c
  1482  0044F2  EE00  F0B5         	lfsr	0,__pdataBANK0
  1483  0044F6  EE10 F028          	lfsr	1,40
  1484  0044FA                     copy_data1:
  1485  0044FA  0009               	tblrd		*+
  1486  0044FC  CFF5 FFEE          	movff	tablat,postinc0
  1487  004500  50E5               	movf	postdec1,w,c
  1488  004502  50E1               	movf	fsr1l,w,c
  1489  004504  E1FA               	bnz	copy_data1
  1490  004506                     end_of_initialization:
  1491                           	opt stack 0
  1492  004506                     __end_of__initialization:
  1493                           	opt stack 0
  1494  004506  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1495  004508  6EF8               	movwf	tblptru,c
  1496  00450A  0100               	movlb	0
  1497  00450C  EF0C  F00E         	goto	_main	;jump to C main() function
  1498                           tblptru	equ	0xFF8
  1499                           tblptrh	equ	0xFF7
  1500                           tblptrl	equ	0xFF6
  1501                           tablat	equ	0xFF5
  1502                           postinc0	equ	0xFEE
  1503                           wreg	equ	0xFE8
  1504                           postdec1	equ	0xFE5
  1505                           fsr1l	equ	0xFE1
  1506                           
  1507                           	psect	bssCOMRAM
  1508  000060                     __pbssCOMRAM:
  1509                           	opt stack 0
  1510  000060                     _Time_Elapsed:
  1511                           	opt stack 0
  1512  000060                     	ds	2
  1513  000062                     _txt:
  1514                           	opt stack 0
  1515  000062                     	ds	2
  1516  000064                     _alarm_hour:
  1517                           	opt stack 0
  1518  000064                     	ds	1
  1519  000065                     _alarm_minute:
  1520                           	opt stack 0
  1521  000065                     	ds	1
  1522  000066                     _alarm_second:
  1523                           	opt stack 0
  1524  000066                     	ds	1
  1525  000067                     _day:
  1526                           	opt stack 0
  1527  000067                     	ds	1
  1528  000068                     _duty_cycle:
  1529                           	opt stack 0
  1530  000068                     	ds	1
  1531  000069                     _found:
  1532                           	opt stack 0
  1533  000069                     	ds	1
  1534  00006A                     _hour:
  1535                           	opt stack 0
  1536  00006A                     	ds	1
  1537  00006B                     _minute:
  1538                           	opt stack 0
  1539  00006B                     	ds	1
  1540  00006C                     _month:
  1541                           	opt stack 0
  1542  00006C                     	ds	1
  1543  00006D                     _second:
  1544                           	opt stack 0
  1545  00006D                     	ds	1
  1546  00006E                     _setup_day:
  1547                           	opt stack 0
  1548  00006E                     	ds	1
  1549  00006F                     _setup_month:
  1550                           	opt stack 0
  1551  00006F                     	ds	1
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	bssBANK0
  1562  000080                     __pbssBANK0:
  1563                           	opt stack 0
  1564  000080                     _Nec_code:
  1565                           	opt stack 0
  1566  000080                     	ds	4
  1567  000084                     _volt:
  1568                           	opt stack 0
  1569  000084                     	ds	3
  1570  000087                     _ALARMEN:
  1571                           	opt stack 0
  1572  000087                     	ds	2
  1573  000089                     _DS1621_tempC:
  1574                           	opt stack 0
  1575  000089                     	ds	2
  1576  00008B                     _DS1621_tempF:
  1577                           	opt stack 0
  1578  00008B                     	ds	2
  1579  00008D                     _MATCHED:
  1580                           	opt stack 0
  1581  00008D                     	ds	2
  1582  00008F                     _alarm_mode:
  1583                           	opt stack 0
  1584  00008F                     	ds	2
  1585  000091                     _color:
  1586                           	opt stack 0
  1587  000091                     	ds	2
  1588  000093                     _nbr:
  1589                           	opt stack 0
  1590  000093                     	ds	2
  1591  000095                     _nec_ok:
  1592                           	opt stack 0
  1593  000095                     	ds	2
  1594  000097                     _rpm:
  1595                           	opt stack 0
  1596  000097                     	ds	2
  1597  000099                     _rps:
  1598                           	opt stack 0
  1599  000099                     	ds	2
  1600  00009B                     _FAN:
  1601                           	opt stack 0
  1602  00009B                     	ds	1
  1603  00009C                     _INT1_flag:
  1604                           	opt stack 0
  1605  00009C                     	ds	1
  1606  00009D                     _INT2_flag:
  1607                           	opt stack 0
  1608  00009D                     	ds	1
  1609  00009E                     _In_Alarm_Time_Setup:
  1610                           	opt stack 0
  1611  00009E                     	ds	1
  1612  00009F                     _In_Fan_Temp_Setup:
  1613                           	opt stack 0
  1614  00009F                     	ds	1
  1615  0000A0                     _In_Time_Setup:
  1616                           	opt stack 0
  1617  0000A0                     	ds	1
  1618  0000A1                     _Nec_code1:
  1619                           	opt stack 0
  1620  0000A1                     	ds	1
  1621  0000A2                     _Nec_state:
  1622                           	opt stack 0
  1623  0000A2                     	ds	1
  1624  0000A3                     _Select_Alarm_Field:
  1625                           	opt stack 0
  1626  0000A3                     	ds	1
  1627  0000A4                     _Select_Fan_Temp_Field:
  1628                           	opt stack 0
  1629  0000A4                     	ds	1
  1630  0000A5                     _Select_Field:
  1631                           	opt stack 0
  1632  0000A5                     	ds	1
  1633  0000A6                     __tft_type:
  1634                           	opt stack 0
  1635  0000A6                     	ds	1
  1636  0000A7                     _alarm_date:
  1637                           	opt stack 0
  1638  0000A7                     	ds	1
  1639  0000A8                     _bit_count:
  1640                           	opt stack 0
  1641  0000A8                     	ds	1
  1642  0000A9                     _colstart:
  1643                           	opt stack 0
  1644  0000A9                     	ds	1
  1645  0000AA                     _dow:
  1646                           	opt stack 0
  1647  0000AA                     	ds	1
  1648  0000AB                     _rowstart:
  1649                           	opt stack 0
  1650  0000AB                     	ds	1
  1651  0000AC                     _setup_alarm_hour:
  1652                           	opt stack 0
  1653  0000AC                     	ds	1
  1654  0000AD                     _setup_alarm_minute:
  1655                           	opt stack 0
  1656  0000AD                     	ds	1
  1657  0000AE                     _setup_alarm_second:
  1658                           	opt stack 0
  1659  0000AE                     	ds	1
  1660  0000AF                     _setup_fan_set_temp:
  1661                           	opt stack 0
  1662  0000AF                     	ds	1
  1663  0000B0                     _setup_hour:
  1664                           	opt stack 0
  1665  0000B0                     	ds	1
  1666  0000B1                     _setup_minute:
  1667                           	opt stack 0
  1668  0000B1                     	ds	1
  1669  0000B2                     _setup_second:
  1670                           	opt stack 0
  1671  0000B2                     	ds	1
  1672  0000B3                     _setup_year:
  1673                           	opt stack 0
  1674  0000B3                     	ds	1
  1675  0000B4                     _year:
  1676                           	opt stack 0
  1677  0000B4                     	ds	1
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           postinc0	equ	0xFEE
  1683                           wreg	equ	0xFE8
  1684                           postdec1	equ	0xFE5
  1685                           fsr1l	equ	0xFE1
  1686                           
  1687                           	psect	dataBANK0
  1688  0000B5                     __pdataBANK0:
  1689                           	opt stack 0
  1690  0000B5                     _fan_set_temp:
  1691                           	opt stack 0
  1692  0000B5                     	ds	1
  1693  0000B6                     _tempSecond:
  1694                           	opt stack 0
  1695  0000B6                     	ds	1
  1696  0000B7                     _wrap:
  1697                           	opt stack 0
  1698  0000B7                     	ds	1
  1699  0000B8                     _Fan_Set_Temp_Txt:
  1700                           	opt stack 0
  1701  0000B8                     	ds	5
  1702  0000BD                     _RPM_Txt:
  1703                           	opt stack 0
  1704  0000BD                     	ds	5
  1705  0000C2                     _setup_fan_set_text:
  1706                           	opt stack 0
  1707  0000C2                     	ds	5
  1708  0000C7                     _Alarm_SW_Txt:
  1709                           	opt stack 0
  1710  0000C7                     	ds	4
  1711  0000CB                     _DC_Txt:
  1712                           	opt stack 0
  1713  0000CB                     	ds	4
  1714  0000CF                     _Fan_SW_Txt:
  1715                           	opt stack 0
  1716  0000CF                     	ds	4
  1717  0000D3                     _tempC:
  1718                           	opt stack 0
  1719  0000D3                     	ds	4
  1720  0000D7                     _tempF:
  1721                           	opt stack 0
  1722  0000D7                     	ds	4
  1723  0000DB                     _RTC_ALARM_Txt:
  1724                           	opt stack 0
  1725  0000DB                     	ds	2
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1l	equ	0xFE1
  1734                           
  1735                           	psect	dataBANK1
  1736  000100                     __pdataBANK1:
  1737                           	opt stack 0
  1738  000100                     _buffer:
  1739                           	opt stack 0
  1740  000100                     	ds	31
  1741  00011F                     _array1:
  1742                           	opt stack 0
  1743  00011F                     	ds	21
  1744  000134                     _alarm_time:
  1745                           	opt stack 0
  1746  000134                     	ds	9
  1747  00013D                     _date:
  1748                           	opt stack 0
  1749  00013D                     	ds	9
  1750  000146                     _setup_alarm_time:
  1751                           	opt stack 0
  1752  000146                     	ds	9
  1753  00014F                     _setup_date:
  1754                           	opt stack 0
  1755  00014F                     	ds	9
  1756  000158                     _setup_time:
  1757                           	opt stack 0
  1758  000158                     	ds	9
  1759  000161                     _time:
  1760                           	opt stack 0
  1761  000161                     	ds	9
  1762  00016A                     _Volt_Txt:
  1763                           	opt stack 0
  1764  00016A                     	ds	6
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1l	equ	0xFE1
  1773                           
  1774                           	psect	cstackBANK1
  1775  000170                     __pcstackBANK1:
  1776                           	opt stack 0
  1777  000170                     _printf$3057:
  1778                           	opt stack 0
  1779                           
  1780                           ; 3 bytes @ 0x0
  1781  000170                     	ds	3
  1782  000173                     printf@idx:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x3
  1786  000173                     	ds	1
  1787  000174                     printf@ap:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x4
  1791  000174                     	ds	2
  1792  000176                     printf@prec:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x6
  1796  000176                     	ds	2
  1797  000178                     printf@tmpval:
  1798                           	opt stack 0
  1799                           
  1800                           ; 4 bytes @ 0x8
  1801  000178                     	ds	4
  1802  00017C                     printf@width:
  1803                           	opt stack 0
  1804                           
  1805                           ; 2 bytes @ 0xC
  1806  00017C                     	ds	2
  1807  00017E                     printf@exp:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0xE
  1811  00017E                     	ds	2
  1812  000180                     printf@val:
  1813                           	opt stack 0
  1814                           
  1815                           ; 4 bytes @ 0x10
  1816  000180                     	ds	4
  1817  000184                     printf@flag:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x14
  1821  000184                     	ds	2
  1822  000186                     printf@fval:
  1823                           	opt stack 0
  1824                           
  1825                           ; 3 bytes @ 0x16
  1826  000186                     	ds	3
  1827  000189                     printf@c:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x19
  1831  000189                     	ds	1
  1832                           tblptru	equ	0xFF8
  1833                           tblptrh	equ	0xFF7
  1834                           tblptrl	equ	0xFF6
  1835                           tablat	equ	0xFF5
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           fsr1l	equ	0xFE1
  1840                           
  1841                           	psect	cstackBANK0
  1842  0000DD                     __pcstackBANK0:
  1843                           	opt stack 0
  1844  0000DD                     ?_printf:
  1845                           	opt stack 0
  1846  0000DD                     printf@f:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x0
  1850  0000DD                     	ds	14
  1851  0000EB                     ??_printf:
  1852                           
  1853                           ; 0 bytes @ 0xE
  1854  0000EB                     	ds	6
  1855  0000F1                     check_for_button_input@j:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x14
  1859  0000F1                     	ds	2
  1860  0000F3                     ??_Setup_Temp_Fan:
  1861                           
  1862                           ; 0 bytes @ 0x16
  1863  0000F3                     	ds	2
  1864  0000F5                     ??_main:
  1865                           
  1866                           ; 0 bytes @ 0x18
  1867  0000F5                     	ds	1
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           
  1877                           	psect	cstackCOMRAM
  1878  000001                     __pcstackCOMRAM:
  1879                           	opt stack 0
  1880  000001                     ??_INT0_isr:
  1881  000001                     
  1882                           ; 2 bytes @ 0x0
  1883  000001                     	ds	2
  1884  000003                     ??_chkisr:
  1885                           
  1886                           ; 0 bytes @ 0x2
  1887  000003                     	ds	14
  1888  000011                     ??_bcd_2_dec:
  1889  000011                     ??_isdigit:
  1890  000011                     ?_strlen:
  1891                           	opt stack 0
  1892  000011                     ?_get_full_ADC:
  1893                           	opt stack 0
  1894  000011                     ?_get_duty_cycle:
  1895                           	opt stack 0
  1896  000011                     ?___wmul:
  1897                           	opt stack 0
  1898  000011                     ?___ftpack:
  1899                           	opt stack 0
  1900  000011                     ?___ftneg:
  1901                           	opt stack 0
  1902  000011                     ?__tdiv_to_l_:
  1903                           	opt stack 0
  1904  000011                     ?__div_to_l_:
  1905                           	opt stack 0
  1906  000011                     ?___lldiv:
  1907                           	opt stack 0
  1908  000011                     I2C_Read@ack:
  1909                           	opt stack 0
  1910  000011                     I2C_Write@outByte:
  1911                           	opt stack 0
  1912  000011                     putch@c:
  1913                           	opt stack 0
  1914  000011                     spiwrite@x:
  1915                           	opt stack 0
  1916  000011                     Set_RGB_Color@color:
  1917                           	opt stack 0
  1918  000011                     get_duty_cycle@temp:
  1919                           	opt stack 0
  1920  000011                     Wait_One_Sec@k:
  1921                           	opt stack 0
  1922  000011                     OpenUSART@spbrg:
  1923                           	opt stack 0
  1924  000011                     ___wmul@multiplier:
  1925                           	opt stack 0
  1926  000011                     strcpy@to:
  1927                           	opt stack 0
  1928  000011                     strlen@s:
  1929                           	opt stack 0
  1930  000011                     __div_to_l_@f1:
  1931                           	opt stack 0
  1932  000011                     ___ftpack@arg:
  1933                           	opt stack 0
  1934  000011                     __tdiv_to_l_@f1:
  1935                           	opt stack 0
  1936  000011                     ___ftge@ff1:
  1937                           	opt stack 0
  1938  000011                     ___ftneg@f1:
  1939                           	opt stack 0
  1940  000011                     I2C_Init@c:
  1941                           	opt stack 0
  1942  000011                     ___lldiv@dividend:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x10
  1946  000011                     	ds	1
  1947  000012                     I2C_Read@n:
  1948                           	opt stack 0
  1949  000012                     I2C_Write@n:
  1950                           	opt stack 0
  1951  000012                     spiwrite@spidata:
  1952                           	opt stack 0
  1953  000012                     _isdigit$2691:
  1954                           	opt stack 0
  1955                           
  1956                           ; 1 bytes @ 0x11
  1957  000012                     	ds	1
  1958  000013                     ??_strlen:
  1959  000013                     ??_get_full_ADC:
  1960  000013                     I2C_Read@inByte:
  1961                           	opt stack 0
  1962  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1963                           	opt stack 0
  1964  000013                     I2C_Write_Cmd_Only@Cmd:
  1965                           	opt stack 0
  1966  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1967                           	opt stack 0
  1968  000013                     write_command@cmd_:
  1969                           	opt stack 0
  1970  000013                     write_data@data_:
  1971                           	opt stack 0
  1972  000013                     OpenUSART@config:
  1973                           	opt stack 0
  1974  000013                     isdigit@c:
  1975                           	opt stack 0
  1976  000013                     get_duty_cycle@set_temp:
  1977                           	opt stack 0
  1978  000013                     bcd_2_dec@dec:
  1979                           	opt stack 0
  1980  000013                     ___wmul@multiplicand:
  1981                           	opt stack 0
  1982  000013                     strcpy@from:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x12
  1986  000013                     	ds	1
  1987  000014                     ?_DS1621_Read_Temp:
  1988                           	opt stack 0
  1989  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1990                           	opt stack 0
  1991  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1992                           	opt stack 0
  1993  000014                     I2C_Write_Cmd_Only@Device:
  1994                           	opt stack 0
  1995  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1996                           	opt stack 0
  1997  000014                     DS3231_Read_Time@Address:
  1998                           	opt stack 0
  1999  000014                     DS3231_Read_Alarm_Time@Address:
  2000                           	opt stack 0
  2001  000014                     setAddrWindow@y0:
  2002                           	opt stack 0
  2003  000014                     ___ftpack@exp:
  2004                           	opt stack 0
  2005  000014                     __div_to_l_@f2:
  2006                           	opt stack 0
  2007  000014                     __tdiv_to_l_@f2:
  2008                           	opt stack 0
  2009  000014                     ___ftge@ff2:
  2010                           	opt stack 0
  2011                           
  2012                           ; 3 bytes @ 0x13
  2013  000014                     	ds	1
  2014  000015                     ??_get_duty_cycle:
  2015  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  2016                           	opt stack 0
  2017  000015                     I2C_Write_Address_Write_One_Byte@Device:
  2018                           	opt stack 0
  2019  000015                     I2C_Write_Cmd_Write_Data@Device:
  2020                           	opt stack 0
  2021  000015                     DS3231_Read_Time@Device:
  2022                           	opt stack 0
  2023  000015                     DS3231_Read_Alarm_Time@Device:
  2024                           	opt stack 0
  2025  000015                     setAddrWindow@x1:
  2026                           	opt stack 0
  2027  000015                     bcd_2_dec@bcd:
  2028                           	opt stack 0
  2029  000015                     ___ftpack@sign:
  2030                           	opt stack 0
  2031  000015                     get_full_ADC@result:
  2032                           	opt stack 0
  2033  000015                     ___wmul@product:
  2034                           	opt stack 0
  2035  000015                     strcpy@cp:
  2036                           	opt stack 0
  2037  000015                     strlen@cp:
  2038                           	opt stack 0
  2039  000015                     ___lldiv@divisor:
  2040                           	opt stack 0
  2041                           
  2042                           ; 4 bytes @ 0x14
  2043  000015                     	ds	1
  2044  000016                     ??___ftpack:
  2045  000016                     I2C_Write_Address_Read_One_Byte@Device:
  2046                           	opt stack 0
  2047  000016                     DS1621_Init@Device:
  2048                           	opt stack 0
  2049  000016                     DS1621_Read_Temp@Cmd:
  2050                           	opt stack 0
  2051  000016                     setAddrWindow@y1:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x15
  2055  000016                     	ds	1
  2056  000017                     ??__tdiv_to_l_:
  2057  000017                     ??___ftge:
  2058  000017                     ?___awdiv:
  2059                           	opt stack 0
  2060  000017                     DS1621_Read_Temp@Data_Ret:
  2061                           	opt stack 0
  2062  000017                     DS3231_Init@Address_7:
  2063                           	opt stack 0
  2064  000017                     setAddrWindow@x0:
  2065                           	opt stack 0
  2066  000017                     delay_ms@ms:
  2067                           	opt stack 0
  2068  000017                     ___awdiv@dividend:
  2069                           	opt stack 0
  2070  000017                     __div_to_l_@quot:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0x16
  2074  000017                     	ds	1
  2075  000018                     DS1621_Read_Temp@Device:
  2076                           	opt stack 0
  2077  000018                     DS3231_Init@Address_E:
  2078                           	opt stack 0
  2079  000018                     drawPixel@y:
  2080                           	opt stack 0
  2081  000018                     drawFastVLine@y:
  2082                           	opt stack 0
  2083  000018                     fillRectangle@y:
  2084                           	opt stack 0
  2085                           
  2086                           ; 1 bytes @ 0x17
  2087  000018                     	ds	1
  2088  000019                     ??_delay_ms:
  2089  000019                     ?___awtoft:
  2090                           	opt stack 0
  2091  000019                     ?___lbtoft:
  2092                           	opt stack 0
  2093  000019                     ?___lltoft:
  2094                           	opt stack 0
  2095  000019                     DS3231_Init@control_E:
  2096                           	opt stack 0
  2097  000019                     drawFastVLine@h:
  2098                           	opt stack 0
  2099  000019                     fillRectangle@w:
  2100                           	opt stack 0
  2101  000019                     drawPixel@color:
  2102                           	opt stack 0
  2103  000019                     ___awdiv@divisor:
  2104                           	opt stack 0
  2105  000019                     ___awtoft@c:
  2106                           	opt stack 0
  2107  000019                     ___lldiv@quotient:
  2108                           	opt stack 0
  2109  000019                     ___lltoft@c:
  2110                           	opt stack 0
  2111                           
  2112                           ; 4 bytes @ 0x18
  2113  000019                     	ds	1
  2114  00001A                     DS3231_Init@Device:
  2115                           	opt stack 0
  2116  00001A                     fillRectangle@h:
  2117                           	opt stack 0
  2118  00001A                     drawFastVLine@color:
  2119                           	opt stack 0
  2120  00001A                     __tdiv_to_l_@quot:
  2121                           	opt stack 0
  2122                           
  2123                           ; 4 bytes @ 0x19
  2124  00001A                     	ds	1
  2125  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2126                           	opt stack 0
  2127  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2128                           	opt stack 0
  2129  00001B                     drawPixel@x:
  2130                           	opt stack 0
  2131  00001B                     ___awdiv@counter:
  2132                           	opt stack 0
  2133  00001B                     __div_to_l_@cntr:
  2134                           	opt stack 0
  2135  00001B                     delay_ms@count:
  2136                           	opt stack 0
  2137  00001B                     fillRectangle@color:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x1A
  2141  00001B                     	ds	1
  2142  00001C                     ??_drawFastVLine:
  2143  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2144                           	opt stack 0
  2145  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2146                           	opt stack 0
  2147  00001C                     ___awdiv@sign:
  2148                           	opt stack 0
  2149  00001C                     ___awtoft@sign:
  2150                           	opt stack 0
  2151  00001C                     __div_to_l_@exp1:
  2152                           	opt stack 0
  2153  00001C                     ___lbtoft@c:
  2154                           	opt stack 0
  2155  00001C                     drawCircle@x0:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x1B
  2159  00001C                     	ds	1
  2160  00001D                     ??_fillRectangle:
  2161  00001D                     ??___lltoft:
  2162  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2163                           	opt stack 0
  2164  00001D                     DS3231_Turn_On_Alarm@control_E:
  2165                           	opt stack 0
  2166  00001D                     ___lldiv@counter:
  2167                           	opt stack 0
  2168  00001D                     ___awdiv@quotient:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x1C
  2172  00001D                     	ds	1
  2173  00001E                     ?___llmod:
  2174                           	opt stack 0
  2175  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2176                           	opt stack 0
  2177  00001E                     DS3231_Turn_On_Alarm@control_F:
  2178                           	opt stack 0
  2179  00001E                     __tdiv_to_l_@cntr:
  2180                           	opt stack 0
  2181  00001E                     drawCircle@y0:
  2182                           	opt stack 0
  2183  00001E                     ___llmod@dividend:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0x1D
  2187  00001E                     	ds	1
  2188  00001F                     ?_get_RPM:
  2189                           	opt stack 0
  2190  00001F                     ?___ftmul:
  2191                           	opt stack 0
  2192  00001F                     DS3231_Turn_Off_Alarm@Device:
  2193                           	opt stack 0
  2194  00001F                     DS3231_Turn_On_Alarm@Device:
  2195                           	opt stack 0
  2196  00001F                     __tdiv_to_l_@exp1:
  2197                           	opt stack 0
  2198  00001F                     ___ftmul@f1:
  2199                           	opt stack 0
  2200                           
  2201                           ; 3 bytes @ 0x1E
  2202  00001F                     	ds	1
  2203  000020                     drawFastVLine@hi:
  2204                           	opt stack 0
  2205  000020                     drawCircle@r:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x1F
  2209  000020                     	ds	1
  2210  000021                     drawFastVLine@lo:
  2211                           	opt stack 0
  2212  000021                     fillRectangle@hi:
  2213                           	opt stack 0
  2214  000021                     ___lltoft@exp:
  2215                           	opt stack 0
  2216  000021                     get_RPM@RPS:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x20
  2220  000021                     	ds	1
  2221  000022                     drawFastVLine@x:
  2222                           	opt stack 0
  2223  000022                     fillRectangle@lo:
  2224                           	opt stack 0
  2225  000022                     drawCircle@color:
  2226                           	opt stack 0
  2227  000022                     ___ftmul@f2:
  2228                           	opt stack 0
  2229  000022                     ___llmod@divisor:
  2230                           	opt stack 0
  2231                           
  2232                           ; 4 bytes @ 0x21
  2233  000022                     	ds	1
  2234  000023                     fillRect@y:
  2235                           	opt stack 0
  2236  000023                     fillRectangle@x:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x22
  2240  000023                     	ds	1
  2241  000024                     ??_drawCircle:
  2242  000024                     fillRect@w:
  2243                           	opt stack 0
  2244  000024                     fillScreen@color:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x23
  2248  000024                     	ds	1
  2249  000025                     ??___ftmul:
  2250  000025                     fillRect@h:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x24
  2254  000025                     	ds	1
  2255  000026                     ___llmod@counter:
  2256                           	opt stack 0
  2257  000026                     fillRect@color:
  2258                           	opt stack 0
  2259  000026                     drawCircle@ddF_x:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x25
  2263  000026                     	ds	2
  2264  000028                     ??_fillRect:
  2265  000028                     ___ftmul@exp:
  2266                           	opt stack 0
  2267  000028                     drawCircle@ddF_y:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x27
  2271  000028                     	ds	1
  2272  000029                     ___ftmul@f3_as_product:
  2273                           	opt stack 0
  2274                           
  2275                           ; 3 bytes @ 0x28
  2276  000029                     	ds	1
  2277  00002A                     drawCircle@f:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x29
  2281  00002A                     	ds	1
  2282  00002B                     fillRect@x:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x2A
  2286  00002B                     	ds	1
  2287  00002C                     ___ftmul@cntr:
  2288                           	opt stack 0
  2289  00002C                     fillRect@i:
  2290                           	opt stack 0
  2291  00002C                     drawCircle@x:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x2B
  2295  00002C                     	ds	1
  2296  00002D                     ___ftmul@sign:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x2C
  2300  00002D                     	ds	1
  2301  00002E                     ?___ftdiv:
  2302                           	opt stack 0
  2303  00002E                     ?___fttol:
  2304                           	opt stack 0
  2305  00002E                     drawChar@y:
  2306                           	opt stack 0
  2307  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2308                           	opt stack 0
  2309  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2310                           	opt stack 0
  2311  00002E                     drawCircle@y:
  2312                           	opt stack 0
  2313  00002E                     ___ftdiv@f1:
  2314                           	opt stack 0
  2315  00002E                     ___fttol@f1:
  2316                           	opt stack 0
  2317                           
  2318                           ; 3 bytes @ 0x2D
  2319  00002E                     	ds	1
  2320  00002F                     drawChar@c:
  2321                           	opt stack 0
  2322  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2323                           	opt stack 0
  2324  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2325                           	opt stack 0
  2326                           
  2327                           ; 1 bytes @ 0x2E
  2328  00002F                     	ds	1
  2329  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2330                           	opt stack 0
  2331  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2332                           	opt stack 0
  2333  000030                     drawChar@color:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x2F
  2337  000030                     	ds	1
  2338  000031                     ___ftdiv@f2:
  2339                           	opt stack 0
  2340                           
  2341                           ; 3 bytes @ 0x30
  2342  000031                     	ds	1
  2343  000032                     ??___fttol:
  2344  000032                     drawChar@bg:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x31
  2348  000032                     	ds	2
  2349  000034                     ??___ftdiv:
  2350  000034                     drawChar@size:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x33
  2354  000034                     	ds	1
  2355  000035                     drawChar@line:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x34
  2359  000035                     	ds	1
  2360  000036                     drawChar@x:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x35
  2364  000036                     	ds	1
  2365  000037                     drawChar@j:
  2366                           	opt stack 0
  2367  000037                     ___ftdiv@cntr:
  2368                           	opt stack 0
  2369  000037                     ___fttol@sign1:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x36
  2373  000037                     	ds	1
  2374  000038                     drawChar@i:
  2375                           	opt stack 0
  2376  000038                     ___ftdiv@f3:
  2377                           	opt stack 0
  2378  000038                     ___fttol@lval:
  2379                           	opt stack 0
  2380                           
  2381                           ; 4 bytes @ 0x37
  2382  000038                     	ds	1
  2383  000039                     drawtext@y:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x38
  2387  000039                     	ds	1
  2388  00003A                     drawtext@_text:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x39
  2392  00003A                     	ds	1
  2393  00003B                     ___ftdiv@exp:
  2394                           	opt stack 0
  2395                           
  2396                           ; 1 bytes @ 0x3A
  2397  00003B                     	ds	1
  2398  00003C                     ___ftdiv@sign:
  2399                           	opt stack 0
  2400  00003C                     ___fttol@exp1:
  2401                           	opt stack 0
  2402  00003C                     drawtext@color:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x3B
  2406  00003C                     	ds	1
  2407  00003D                     ??_do_update_pwm:
  2408  00003D                     ?___awmod:
  2409                           	opt stack 0
  2410  00003D                     ?_read_volt:
  2411                           	opt stack 0
  2412  00003D                     ___awmod@dividend:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x3C
  2416  00003D                     	ds	1
  2417  00003E                     drawtext@bg:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x3D
  2421  00003E                     	ds	1
  2422  00003F                     ___awmod@divisor:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x3E
  2426  00003F                     	ds	1
  2427  000040                     drawtext@size:
  2428                           	opt stack 0
  2429  000040                     do_update_pwm@dc_f:
  2430                           	opt stack 0
  2431  000040                     read_volt@volt:
  2432                           	opt stack 0
  2433                           
  2434                           ; 3 bytes @ 0x3F
  2435  000040                     	ds	1
  2436  000041                     ??_drawtext:
  2437  000041                     ___awmod@counter:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x40
  2441  000041                     	ds	1
  2442  000042                     ___awmod@sign:
  2443                           	opt stack 0
  2444                           
  2445                           ; 1 bytes @ 0x41
  2446  000042                     	ds	1
  2447  000043                     ?_dec_2_bcd:
  2448                           	opt stack 0
  2449  000043                     ?_fround:
  2450                           	opt stack 0
  2451  000043                     ?_scale:
  2452                           	opt stack 0
  2453  000043                     drawtext@x:
  2454                           	opt stack 0
  2455  000043                     do_update_pwm@duty_cycle:
  2456                           	opt stack 0
  2457  000043                     read_volt@nStep:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x42
  2461  000043                     	ds	1
  2462  000044                     drawtext@textsize:
  2463                           	opt stack 0
  2464  000044                     do_update_pwm@dc_I:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x43
  2468  000044                     	ds	1
  2469  000045                     ??_dec_2_bcd:
  2470                           
  2471                           ; 0 bytes @ 0x44
  2472  000045                     	ds	1
  2473  000046                     drawtext@i:
  2474                           	opt stack 0
  2475  000046                     _fround$3055:
  2476                           	opt stack 0
  2477  000046                     _scale$3056:
  2478                           	opt stack 0
  2479                           
  2480                           ; 3 bytes @ 0x45
  2481  000046                     	ds	1
  2482  000047                     dec_2_bcd@bcd:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x46
  2486  000047                     	ds	1
  2487  000048                     drawtext@cursor_y:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x47
  2491  000048                     	ds	1
  2492  000049                     drawtext@cursor_x:
  2493                           	opt stack 0
  2494  000049                     dec_2_bcd@dec:
  2495                           	opt stack 0
  2496  000049                     scale@scl:
  2497                           	opt stack 0
  2498  000049                     _fround$3054:
  2499                           	opt stack 0
  2500                           
  2501                           ; 3 bytes @ 0x48
  2502  000049                     	ds	1
  2503  00004A                     ??_Update_Screen:
  2504  00004A                     DS3231_Write_Time@Device:
  2505                           	opt stack 0
  2506  00004A                     DS3231_Write_Alarm_Time@Device:
  2507                           	opt stack 0
  2508  00004A                     Update_Setup_Fan_Screen@dc_char1:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x49
  2512  00004A                     	ds	1
  2513  00004B                     DS3231_Write_Time@Address:
  2514                           	opt stack 0
  2515  00004B                     DS3231_Write_Alarm_Time@Address:
  2516                           	opt stack 0
  2517  00004B                     Update_Setup_Fan_Screen@dc_char2:
  2518                           	opt stack 0
  2519                           
  2520                           ; 1 bytes @ 0x4A
  2521  00004B                     	ds	1
  2522  00004C                     Update_Setup_Fan_Screen@dc_char3:
  2523                           	opt stack 0
  2524  00004C                     fround@prec:
  2525                           	opt stack 0
  2526  00004C                     Update_Screen@neg_tempF:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x4B
  2530  00004C                     	ds	1
  2531  00004D                     ?___ftadd:
  2532                           	opt stack 0
  2533  00004D                     ___ftadd@f1:
  2534                           	opt stack 0
  2535                           
  2536                           ; 3 bytes @ 0x4C
  2537  00004D                     	ds	3
  2538  000050                     ___ftadd@f2:
  2539                           	opt stack 0
  2540                           
  2541                           ; 3 bytes @ 0x4F
  2542  000050                     	ds	3
  2543  000053                     ??___ftadd:
  2544                           
  2545                           ; 0 bytes @ 0x52
  2546  000053                     	ds	3
  2547  000056                     ___ftadd@sign:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x55
  2551  000056                     	ds	1
  2552  000057                     ___ftadd@exp2:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x56
  2556  000057                     	ds	1
  2557  000058                     ___ftadd@exp1:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x57
  2561  000058                     	ds	1
  2562  000059                     ?___ftsub:
  2563                           	opt stack 0
  2564  000059                     ___ftsub@f1:
  2565                           	opt stack 0
  2566                           
  2567                           ; 3 bytes @ 0x58
  2568  000059                     	ds	3
  2569  00005C                     ___ftsub@f2:
  2570                           	opt stack 0
  2571                           
  2572                           ; 3 bytes @ 0x5B
  2573  00005C                     	ds	3
  2574  00005F                     
  2575                           ; 0 bytes @ 0x5E
  2576  00005F                     	ds	1
  2577  000060                     tblptru	equ	0xFF8
  2578                           tblptrh	equ	0xFF7
  2579                           tblptrl	equ	0xFF6
  2580                           tablat	equ	0xFF5
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           postdec1	equ	0xFE5
  2584                           fsr1l	equ	0xFE1
  2585                           
  2586                           ; 0 bytes @ 0x5F
  2587 ;;
  2588 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2589 ;;
  2590 ;; *************** function _main *****************
  2591 ;; Defined at:
  2592 ;;		line 120 in file "Main.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;		None               void
  2599 ;; Registers used:
  2600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;Total ram usage:        1 bytes
  2611 ;; Hardware stack levels required when called:   12
  2612 ;; This function calls:
  2613 ;;		_DS1621_Read_Temp
  2614 ;;		_DS3231_Read_Alarm_Time
  2615 ;;		_DS3231_Read_Time
  2616 ;;		_DS3231_Turn_Off_Alarm
  2617 ;;		_Do_Beep_Bad
  2618 ;;		_Do_Beep_Good
  2619 ;;		_Do_Init
  2620 ;;		_Do_Setup_Alarm_Time
  2621 ;;		_Do_Setup_Time
  2622 ;;		_Initialize_Screen
  2623 ;;		_Monitor_Fan
  2624 ;;		_Setup_Temp_Fan
  2625 ;;		_Toggle_Fan_Monitor
  2626 ;;		_Update_Screen
  2627 ;;		___awdiv
  2628 ;;		___wmul
  2629 ;;		_check_for_button_input
  2630 ;;		_get_RPM
  2631 ;;		_printf
  2632 ;;		_read_volt
  2633 ;;		_test_alarm
  2634 ;; This function is called by:
  2635 ;;		Startup code after reset
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text0
  2640  001C18                     __ptext0:
  2641                           	opt stack 0
  2642  001C18                     _main:
  2643                           	opt stack 19
  2644                           
  2645                           ;Main.c: 122: Do_Init();
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;incstack = 0
  2649  001C18  EC1A  F023         	call	_Do_Init	;wreg free
  2650                           
  2651                           ;Main.c: 123: Initialize_Screen();
  2652  001C1C  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  2653                           
  2654                           ;Main.c: 124: DS3231_Turn_Off_Alarm();
  2655  001C20  ECCA  F023         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2656                           
  2657                           ;Main.c: 125: DS3231_Read_Alarm_Time();
  2658  001C24  EC1C  F024         	call	_DS3231_Read_Alarm_Time	;wreg free
  2659                           
  2660                           ;Main.c: 126: ALARMEN = 0;
  2661  001C28  0E00               	movlw	0
  2662  001C2A  0100               	movlb	0	; () banked
  2663  001C2C  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  2664  001C2E  0E00               	movlw	0
  2665  001C30  6F87               	movwf	_ALARMEN& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;Main.c: 127: tempSecond = 0xff;
  2669  001C32  0100               	movlb	0	; () banked
  2670  001C34  69B6               	setf	_tempSecond& (0+255),b
  2671  001C36  D000               	goto	l10852
  2672  001C38                     l10852:
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;Main.c: 129: {
  2676                           ;Main.c: 130: DS3231_Read_Time();
  2677  001C38  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  2678                           
  2679                           ;Main.c: 131: if(tempSecond != second)
  2680  001C3C  506D               	movf	_second,w,c
  2681  001C3E  0100               	movlb	0	; () banked
  2682  001C40  19B6               	xorwf	_tempSecond& (0+255),w,b
  2683  001C42  B4D8               	btfsc	status,2,c
  2684  001C44  D0A0               	goto	l10880
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;Main.c: 132: {
  2688                           ;Main.c: 133: tempSecond = second;
  2689  001C46  C06D  F0B6         	movff	_second,_tempSecond
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;Main.c: 134: rpm = get_RPM();
  2693  001C4A  ECAE  F024         	call	_get_RPM	;wreg free
  2694  001C4E  C01F  F097         	movff	?_get_RPM,_rpm
  2695  001C52  C020  F098         	movff	?_get_RPM+1,_rpm+1
  2696                           
  2697                           ;Main.c: 135: volt = read_volt();
  2698  001C56  EC25  F022         	call	_read_volt	;wreg free
  2699  001C5A  C03D  F084         	movff	?_read_volt,_volt
  2700  001C5E  C03E  F085         	movff	?_read_volt+1,_volt+1
  2701  001C62  C03F  F086         	movff	?_read_volt+2,_volt+2
  2702                           
  2703                           ;Main.c: 136: DS1621_tempC = DS1621_Read_Temp();
  2704  001C66  EC48  F025         	call	_DS1621_Read_Temp	;wreg free
  2705  001C6A  C014  F089         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2706  001C6E  C015  F08A         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2707                           
  2708                           ;Main.c: 137: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2709  001C72  C089  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2710  001C76  C08A  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2711  001C7A  0E00               	movlw	0
  2712  001C7C  6E14               	movwf	___wmul@multiplicand+1,c
  2713  001C7E  0E09               	movlw	9
  2714  001C80  6E13               	movwf	___wmul@multiplicand,c
  2715  001C82  EC24  F026         	call	___wmul	;wreg free
  2716  001C86  C011  F017         	movff	?___wmul,___awdiv@dividend
  2717  001C8A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2718  001C8E  0E00               	movlw	0
  2719  001C90  6E1A               	movwf	___awdiv@divisor+1,c
  2720  001C92  0E05               	movlw	5
  2721  001C94  6E19               	movwf	___awdiv@divisor,c
  2722  001C96  ECD0  F01E         	call	___awdiv	;wreg free
  2723  001C9A  0E20               	movlw	32
  2724  001C9C  2417               	addwf	?___awdiv,w,c
  2725  001C9E  0100               	movlb	0	; () banked
  2726  001CA0  6F8B               	movwf	_DS1621_tempF& (0+255),b
  2727  001CA2  0E00               	movlw	0
  2728  001CA4  2018               	addwfc	?___awdiv+1,w,c
  2729  001CA6  0100               	movlb	0	; () banked
  2730  001CA8  6F8C               	movwf	(_DS1621_tempF+1)& (0+255),b
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;Main.c: 139: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2734  001CAA  0EB4               	movlw	low STR_1
  2735  001CAC  0100               	movlb	0	; () banked
  2736  001CAE  6FDD               	movwf	printf@f& (0+255),b
  2737  001CB0  0EFE               	movlw	high STR_1
  2738  001CB2  0100               	movlb	0	; () banked
  2739  001CB4  6FDE               	movwf	(printf@f+1)& (0+255),b
  2740  001CB6  C06A  F0DF         	movff	_hour,?_printf+2
  2741  001CBA  0100               	movlb	0	; () banked
  2742  001CBC  6BE0               	clrf	(?_printf+3)& (0+255),b
  2743  001CBE  C06B  F0E1         	movff	_minute,?_printf+4
  2744  001CC2  0100               	movlb	0	; () banked
  2745  001CC4  6BE2               	clrf	(?_printf+5)& (0+255),b
  2746  001CC6  C06D  F0E3         	movff	_second,?_printf+6
  2747  001CCA  0100               	movlb	0	; () banked
  2748  001CCC  6BE4               	clrf	(?_printf+7)& (0+255),b
  2749  001CCE  C06C  F0E5         	movff	_month,?_printf+8
  2750  001CD2  0100               	movlb	0	; () banked
  2751  001CD4  6BE6               	clrf	(?_printf+9)& (0+255),b
  2752  001CD6  C067  F0E7         	movff	_day,?_printf+10
  2753  001CDA  0100               	movlb	0	; () banked
  2754  001CDC  6BE8               	clrf	(?_printf+11)& (0+255),b
  2755  001CDE  C0B4  F0E9         	movff	_year,?_printf+12
  2756  001CE2  0100               	movlb	0	; () banked
  2757  001CE4  6BEA               	clrf	(?_printf+13)& (0+255),b
  2758  001CE6  EC0E  F000         	call	_printf	;wreg free
  2759                           
  2760                           ;Main.c: 140: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2761  001CEA  0E14               	movlw	low STR_2
  2762  001CEC  0100               	movlb	0	; () banked
  2763  001CEE  6FDD               	movwf	printf@f& (0+255),b
  2764  001CF0  0EFF               	movlw	high STR_2
  2765  001CF2  0100               	movlb	0	; () banked
  2766  001CF4  6FDE               	movwf	(printf@f+1)& (0+255),b
  2767  001CF6  C089  F0DF         	movff	_DS1621_tempC,?_printf+2
  2768  001CFA  C08A  F0E0         	movff	_DS1621_tempC+1,?_printf+3
  2769  001CFE  C08B  F0E1         	movff	_DS1621_tempF,?_printf+4
  2770  001D02  C08C  F0E2         	movff	_DS1621_tempF+1,?_printf+5
  2771  001D06  EC0E  F000         	call	_printf	;wreg free
  2772                           
  2773                           ;Main.c: 141: printf ("alarm = %d match = %d ", PORTBbits.RB5, MATCHED);
  2774  001D0A  0ED2               	movlw	low STR_3
  2775  001D0C  0100               	movlb	0	; () banked
  2776  001D0E  6FDD               	movwf	printf@f& (0+255),b
  2777  001D10  0EFE               	movlw	high STR_3
  2778  001D12  0100               	movlb	0	; () banked
  2779  001D14  6FDE               	movwf	(printf@f+1)& (0+255),b
  2780  001D16  AA81               	btfss	3969,5,c	;volatile
  2781  001D18  D004               	goto	u9170
  2782  001D1A  0100               	movlb	0	; () banked
  2783  001D1C  6BF5               	clrf	??_main& (0+255),b
  2784  001D1E  2BF5               	incf	??_main& (0+255),f,b
  2785  001D20  D002               	goto	u9178
  2786  001D22                     u9170:
  2787  001D22  0100               	movlb	0	; () banked
  2788  001D24  6BF5               	clrf	??_main& (0+255),b
  2789  001D26                     u9178:
  2790  001D26  0100               	movlb	0	; () banked
  2791  001D28  51F5               	movf	??_main& (0+255),w,b
  2792  001D2A  0100               	movlb	0	; () banked
  2793  001D2C  6FDF               	movwf	(?_printf+2)& (0+255),b
  2794  001D2E  6BE0               	clrf	(?_printf+3)& (0+255),b
  2795  001D30  C08D  F0E1         	movff	_MATCHED,?_printf+4
  2796  001D34  C08E  F0E2         	movff	_MATCHED+1,?_printf+5
  2797  001D38  EC0E  F000         	call	_printf	;wreg free
  2798                           
  2799                           ;Main.c: 142: printf ("RPM = %d  dc = %d ", rpm, duty_cycle);
  2800  001D3C  0E3D               	movlw	low STR_4
  2801  001D3E  0100               	movlb	0	; () banked
  2802  001D40  6FDD               	movwf	printf@f& (0+255),b
  2803  001D42  0EFF               	movlw	high STR_4
  2804  001D44  0100               	movlb	0	; () banked
  2805  001D46  6FDE               	movwf	(printf@f+1)& (0+255),b
  2806  001D48  C097  F0DF         	movff	_rpm,?_printf+2
  2807  001D4C  C098  F0E0         	movff	_rpm+1,?_printf+3
  2808  001D50  C068  F0E1         	movff	_duty_cycle,?_printf+4
  2809  001D54  0100               	movlb	0	; () banked
  2810  001D56  6BE2               	clrf	(?_printf+5)& (0+255),b
  2811  001D58  EC0E  F000         	call	_printf	;wreg free
  2812                           
  2813                           ;Main.c: 143: printf ("Volt = %f\r\n", volt);
  2814  001D5C  0EA2               	movlw	low STR_5
  2815  001D5E  0100               	movlb	0	; () banked
  2816  001D60  6FDD               	movwf	printf@f& (0+255),b
  2817  001D62  0EFF               	movlw	high STR_5
  2818  001D64  0100               	movlb	0	; () banked
  2819  001D66  6FDE               	movwf	(printf@f+1)& (0+255),b
  2820  001D68  C084  F0DF         	movff	_volt,?_printf+2
  2821  001D6C  C085  F0E0         	movff	_volt+1,?_printf+3
  2822  001D70  C086  F0E1         	movff	_volt+2,?_printf+4
  2823  001D74  EC0E  F000         	call	_printf	;wreg free
  2824                           
  2825                           ;Main.c: 144: Monitor_Fan();
  2826  001D78  EC66  F025         	call	_Monitor_Fan	;wreg free
  2827                           
  2828                           ;Main.c: 145: test_alarm();
  2829  001D7C  ECDC  F018         	call	_test_alarm	;wreg free
  2830                           
  2831                           ;Main.c: 146: Update_Screen();
  2832  001D80  EC30  F006         	call	_Update_Screen	;wreg free
  2833  001D84  D000               	goto	l10880
  2834  001D86                     l10880:
  2835                           
  2836                           ;Main.c: 147: }
  2837                           ;Main.c: 149: if (check_for_button_input() == 1)
  2838  001D86  ECB0  F01F         	call	_check_for_button_input	;wreg free
  2839  001D8A  06E8               	decf	wreg,f,c
  2840  001D8C  A4D8               	btfss	status,2,c
  2841  001D8E  D02C               	goto	l10906
  2842                           
  2843                           ;Main.c: 150: {
  2844                           ;Main.c: 151: nec_ok = 0;
  2845  001D90  0E00               	movlw	0
  2846  001D92  0100               	movlb	0	; () banked
  2847  001D94  6F96               	movwf	(_nec_ok+1)& (0+255),b
  2848  001D96  0E00               	movlw	0
  2849  001D98  6F95               	movwf	_nec_ok& (0+255),b
  2850                           
  2851                           ;Main.c: 152: switch (found)
  2852  001D9A  D017               	goto	l10904
  2853  001D9C                     l10884:
  2854                           
  2855                           ;Main.c: 155: Do_Beep_Good();
  2856  001D9C  EC51  F027         	call	_Do_Beep_Good	;wreg free
  2857                           
  2858                           ;Main.c: 156: Do_Setup_Time();
  2859  001DA0  EC8A  F01B         	call	_Do_Setup_Time	;wreg free
  2860                           
  2861                           ;Main.c: 157: break;
  2862  001DA4  D021               	goto	l10906
  2863  001DA6                     l10888:
  2864                           
  2865                           ;Main.c: 160: Do_Beep_Good();
  2866  001DA6  EC51  F027         	call	_Do_Beep_Good	;wreg free
  2867                           
  2868                           ;Main.c: 161: Do_Setup_Alarm_Time();
  2869  001DAA  EC21  F01D         	call	_Do_Setup_Alarm_Time	;wreg free
  2870                           
  2871                           ;Main.c: 162: break;
  2872  001DAE  D01C               	goto	l10906
  2873  001DB0                     l10892:
  2874                           
  2875                           ;Main.c: 165: Do_Beep_Good();
  2876  001DB0  EC51  F027         	call	_Do_Beep_Good	;wreg free
  2877                           
  2878                           ;Main.c: 166: Setup_Temp_Fan();
  2879  001DB4  EC66  F01F         	call	_Setup_Temp_Fan	;wreg free
  2880                           
  2881                           ;Main.c: 167: break;
  2882  001DB8  D017               	goto	l10906
  2883  001DBA                     l10896:
  2884                           
  2885                           ;Main.c: 170: Do_Beep_Good();
  2886  001DBA  EC51  F027         	call	_Do_Beep_Good	;wreg free
  2887                           
  2888                           ;Main.c: 171: Toggle_Fan_Monitor();
  2889  001DBE  EC74  F027         	call	_Toggle_Fan_Monitor	;wreg free
  2890                           
  2891                           ;Main.c: 172: break;
  2892  001DC2  D012               	goto	l10906
  2893  001DC4                     l10900:
  2894                           
  2895                           ;Main.c: 175: Do_Beep_Bad();
  2896  001DC4  EC5D  F027         	call	_Do_Beep_Bad	;wreg free
  2897                           
  2898                           ;Main.c: 177: }
  2899                           
  2900                           ;Main.c: 176: break;
  2901  001DC8  D00F               	goto	l10906
  2902  001DCA                     l10904:
  2903  001DCA  5069               	movf	_found,w,c
  2904                           
  2905                           ; Switch size 1, requested type "space"
  2906                           ; Number of cases is 4, Range of values is 0 to 5
  2907                           ; switch strategies available:
  2908                           ; Name         Instructions Cycles
  2909                           ; simple_byte           13     7 (average)
  2910                           ;	Chosen strategy is simple_byte
  2911  001DCC  0A00               	xorlw	0	; case 0
  2912  001DCE  B4D8               	btfsc	status,2,c
  2913  001DD0  D7E5               	goto	l10884
  2914  001DD2  0A01               	xorlw	1	; case 1
  2915  001DD4  B4D8               	btfsc	status,2,c
  2916  001DD6  D7E7               	goto	l10888
  2917  001DD8  0A03               	xorlw	3	; case 2
  2918  001DDA  B4D8               	btfsc	status,2,c
  2919  001DDC  D7E9               	goto	l10892
  2920  001DDE  0A07               	xorlw	7	; case 5
  2921  001DE0  B4D8               	btfsc	status,2,c
  2922  001DE2  D7EB               	goto	l10896
  2923  001DE4  D7EF               	goto	l10900
  2924  001DE6  D000               	goto	l10906
  2925  001DE8                     l10906:
  2926                           
  2927                           ;Main.c: 178: }
  2928                           ;Main.c: 179: if (INT2_flag == 1)
  2929  001DE8  0100               	movlb	0	; () banked
  2930  001DEA  059D               	decf	_INT2_flag& (0+255),w,b
  2931  001DEC  A4D8               	btfss	status,2,c
  2932  001DEE  D724               	goto	l10852
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;Main.c: 180: {
  2936                           ;Main.c: 181: INT2_flag = 0;
  2937  001DF0  0E00               	movlw	0
  2938  001DF2  0100               	movlb	0	; () banked
  2939  001DF4  6F9D               	movwf	_INT2_flag& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;Main.c: 182: if (ALARMEN == 0) ALARMEN = 1;
  2943  001DF6  0100               	movlb	0	; () banked
  2944  001DF8  5187               	movf	_ALARMEN& (0+255),w,b
  2945  001DFA  0100               	movlb	0	; () banked
  2946  001DFC  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  2947  001DFE  A4D8               	btfss	status,2,c
  2948  001E00  D005               	goto	l10914
  2949                           
  2950                           ; BSR set to: 0
  2951  001E02  0E00               	movlw	0
  2952  001E04  0100               	movlb	0	; () banked
  2953  001E06  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  2954  001E08  0E01               	movlw	1
  2955  001E0A  D004               	goto	L1
  2956  001E0C                     l10914:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;Main.c: 183: else ALARMEN = 0;
  2960  001E0C  0E00               	movlw	0
  2961  001E0E  0100               	movlb	0	; () banked
  2962  001E10  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  2963  001E12  0E00               	movlw	0
  2964  001E14                     L1:
  2965  001E14  6F87               	movwf	_ALARMEN& (0+255),b
  2966                           
  2967                           ; BSR set to: 0
  2968                           
  2969                           ; BSR set to: 0
  2970                           
  2971                           ; BSR set to: 0
  2972  001E16  D710               	goto	l10852
  2973                           
  2974                           ; BSR set to: 0
  2975                           
  2976                           ; BSR set to: 0
  2977  001E18  EF0C  F000         	goto	start
  2978  001E1C                     __end_of_main:
  2979                           	opt stack 0
  2980                           tblptru	equ	0xFF8
  2981                           tblptrh	equ	0xFF7
  2982                           tblptrl	equ	0xFF6
  2983                           tablat	equ	0xFF5
  2984                           postinc0	equ	0xFEE
  2985                           wreg	equ	0xFE8
  2986                           postdec1	equ	0xFE5
  2987                           fsr1l	equ	0xFE1
  2988                           status	equ	0xFD8
  2989                           
  2990 ;; *************** function _test_alarm *****************
  2991 ;; Defined at:
  2992 ;;		line 189 in file "Main.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;		None
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;		None
  2997 ;; Return value:  Size  Location     Type
  2998 ;;		None               void
  2999 ;; Registers used:
  3000 ;;		wreg, status,2, status,0, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;Total ram usage:        0 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    8
  3013 ;; This function calls:
  3014 ;;		_Activate_Buzzer_4KHz
  3015 ;;		_DS3231_Turn_Off_Alarm
  3016 ;;		_DS3231_Turn_On_Alarm
  3017 ;;		_Deactivate_Buzzer
  3018 ;;		_Set_RGB_Color
  3019 ;;		___ftge
  3020 ;; This function is called by:
  3021 ;;		_main
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text1
  3026  0031B8                     __ptext1:
  3027                           	opt stack 0
  3028  0031B8                     _test_alarm:
  3029                           	opt stack 22
  3030                           
  3031                           ;Main.c: 194: if(alarm_mode ==0)
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;incstack = 0
  3035  0031B8  0100               	movlb	0	; () banked
  3036  0031BA  518F               	movf	_alarm_mode& (0+255),w,b
  3037  0031BC  0100               	movlb	0	; () banked
  3038  0031BE  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3039  0031C0  A4D8               	btfss	status,2,c
  3040  0031C2  D011               	goto	l10448
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;Main.c: 195: {
  3044                           ;Main.c: 196: if(ALARMEN ==1)
  3045  0031C4  0100               	movlb	0	; () banked
  3046  0031C6  0587               	decf	_ALARMEN& (0+255),w,b
  3047  0031C8  0100               	movlb	0	; () banked
  3048  0031CA  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3049  0031CC  A4D8               	btfss	status,2,c
  3050  0031CE  D008               	goto	l10446
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;Main.c: 197: {
  3054                           ;Main.c: 198: DS3231_Turn_On_Alarm();
  3055  0031D0  ECA1  F023         	call	_DS3231_Turn_On_Alarm	;wreg free
  3056                           
  3057                           ;Main.c: 199: alarm_mode = 1;
  3058  0031D4  0E00               	movlw	0
  3059  0031D6  0100               	movlb	0	; () banked
  3060  0031D8  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  3061  0031DA  0E01               	movlw	1
  3062  0031DC  6F8F               	movwf	_alarm_mode& (0+255),b
  3063                           
  3064                           ;Main.c: 200: }else
  3065  0031DE  D003               	goto	l10448
  3066  0031E0                     l10446:
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;Main.c: 201: {
  3070                           ;Main.c: 202: DS3231_Turn_Off_Alarm();
  3071  0031E0  ECCA  F023         	call	_DS3231_Turn_Off_Alarm	;wreg free
  3072  0031E4  D000               	goto	l10448
  3073  0031E6                     l10448:
  3074                           
  3075                           ;Main.c: 203: }
  3076                           ;Main.c: 204: }
  3077                           ;Main.c: 206: if(MATCHED ==1)
  3078  0031E6  0100               	movlb	0	; () banked
  3079  0031E8  058D               	decf	_MATCHED& (0+255),w,b
  3080  0031EA  0100               	movlb	0	; () banked
  3081  0031EC  118E               	iorwf	(_MATCHED+1)& (0+255),w,b
  3082  0031EE  A4D8               	btfss	status,2,c
  3083  0031F0  D023               	goto	l10460
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;Main.c: 207: {
  3087                           ;Main.c: 210: if(volt > 3)
  3088  0031F2  0E00               	movlw	0
  3089  0031F4  6E11               	movwf	___ftge@ff1,c
  3090  0031F6  0E40               	movlw	64
  3091  0031F8  6E12               	movwf	___ftge@ff1+1,c
  3092  0031FA  0E40               	movlw	64
  3093  0031FC  6E13               	movwf	___ftge@ff1+2,c
  3094  0031FE  C084  F014         	movff	_volt,___ftge@ff2
  3095  003202  C085  F015         	movff	_volt+1,___ftge@ff2+1
  3096  003206  C086  F016         	movff	_volt+2,___ftge@ff2+2
  3097  00320A  EC1B  F01F         	call	___ftge	;wreg free
  3098  00320E  B0D8               	btfsc	status,0,c
  3099  003210  D013               	goto	l10460
  3100                           
  3101                           ;Main.c: 211: {
  3102                           ;Main.c: 212: MATCHED = 0;
  3103  003212  0E00               	movlw	0
  3104  003214  0100               	movlb	0	; () banked
  3105  003216  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  3106  003218  0E00               	movlw	0
  3107  00321A  6F8D               	movwf	_MATCHED& (0+255),b
  3108                           
  3109                           ;Main.c: 213: color =0;
  3110  00321C  0E00               	movlw	0
  3111  00321E  0100               	movlb	0	; () banked
  3112  003220  6F92               	movwf	(_color+1)& (0+255),b
  3113  003222  0E00               	movlw	0
  3114  003224  6F91               	movwf	_color& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;Main.c: 214: Set_RGB_Color(color);
  3118  003226  0100               	movlb	0	; () banked
  3119  003228  5191               	movf	_color& (0+255),w,b
  3120  00322A  EC69  F027         	call	_Set_RGB_Color
  3121                           
  3122                           ;Main.c: 215: Deactivate_Buzzer();
  3123  00322E  EC4E  F028         	call	_Deactivate_Buzzer	;wreg free
  3124                           
  3125                           ;Main.c: 216: DS3231_Turn_Off_Alarm();
  3126  003232  ECCA  F023         	call	_DS3231_Turn_Off_Alarm	;wreg free
  3127  003236  D000               	goto	l10460
  3128  003238                     l10460:
  3129                           
  3130                           ;Main.c: 217: }
  3131                           ;Main.c: 218: }
  3132                           ;Main.c: 220: if(alarm_mode ==1)
  3133  003238  0100               	movlb	0	; () banked
  3134  00323A  058F               	decf	_alarm_mode& (0+255),w,b
  3135  00323C  0100               	movlb	0	; () banked
  3136  00323E  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3137  003240  A4D8               	btfss	status,2,c
  3138  003242  D02F               	goto	l554
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;Main.c: 221: {
  3142                           ;Main.c: 222: if(ALARMEN ==1)
  3143  003244  0100               	movlb	0	; () banked
  3144  003246  0587               	decf	_ALARMEN& (0+255),w,b
  3145  003248  0100               	movlb	0	; () banked
  3146  00324A  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3147  00324C  A4D8               	btfss	status,2,c
  3148  00324E  D011               	goto	l10474
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;Main.c: 223: {
  3152                           ;Main.c: 224: if(PORTBbits.RB5 == 0)
  3153  003250  BA81               	btfsc	3969,5,c	;volatile
  3154  003252  D027               	goto	l554
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;Main.c: 225: {
  3158                           ;Main.c: 226: Set_RGB_Color(color++);
  3159  003254  0100               	movlb	0	; () banked
  3160  003256  5191               	movf	_color& (0+255),w,b
  3161  003258  EC69  F027         	call	_Set_RGB_Color
  3162  00325C  0100               	movlb	0	; () banked
  3163  00325E  4B91               	infsnz	_color& (0+255),f,b
  3164  003260  2B92               	incf	(_color+1)& (0+255),f,b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;Main.c: 227: Activate_Buzzer_4KHz();
  3168  003262  ECB2  F027         	call	_Activate_Buzzer_4KHz	;wreg free
  3169                           
  3170                           ;Main.c: 228: MATCHED = 1;
  3171  003266  0E00               	movlw	0
  3172  003268  0100               	movlb	0	; () banked
  3173  00326A  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  3174  00326C  0E01               	movlw	1
  3175  00326E  D017               	goto	L2
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;Main.c: 230: }
  3179                           ;Main.c: 231: }
  3180  003270  D018               	goto	l554
  3181  003272                     l10474:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;Main.c: 232: else
  3185                           ;Main.c: 233: {
  3186                           ;Main.c: 234: DS3231_Turn_Off_Alarm();
  3187  003272  ECCA  F023         	call	_DS3231_Turn_Off_Alarm	;wreg free
  3188                           
  3189                           ;Main.c: 235: alarm_mode = 0;
  3190  003276  0E00               	movlw	0
  3191  003278  0100               	movlb	0	; () banked
  3192  00327A  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  3193  00327C  0E00               	movlw	0
  3194  00327E  6F8F               	movwf	_alarm_mode& (0+255),b
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;Main.c: 236: color =0;
  3198  003280  0E00               	movlw	0
  3199  003282  0100               	movlb	0	; () banked
  3200  003284  6F92               	movwf	(_color+1)& (0+255),b
  3201  003286  0E00               	movlw	0
  3202  003288  6F91               	movwf	_color& (0+255),b
  3203                           
  3204                           ;Main.c: 237: Set_RGB_Color(color);
  3205  00328A  0100               	movlb	0	; () banked
  3206  00328C  5191               	movf	_color& (0+255),w,b
  3207  00328E  EC69  F027         	call	_Set_RGB_Color
  3208                           
  3209                           ;Main.c: 238: Deactivate_Buzzer();
  3210  003292  EC4E  F028         	call	_Deactivate_Buzzer	;wreg free
  3211                           
  3212                           ;Main.c: 239: MATCHED =0;
  3213  003296  0E00               	movlw	0
  3214  003298  0100               	movlb	0	; () banked
  3215  00329A  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  3216  00329C  0E00               	movlw	0
  3217  00329E                     L2:
  3218  00329E  6F8D               	movwf	_MATCHED& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221  0032A0  D000               	goto	l554
  3222  0032A2                     l554:
  3223                           
  3224                           ; BSR set to: 0
  3225  0032A2  0012               	return		;funcret
  3226  0032A4                     __end_of_test_alarm:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           postinc0	equ	0xFEE
  3233                           wreg	equ	0xFE8
  3234                           postdec1	equ	0xFE5
  3235                           fsr1l	equ	0xFE1
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _Set_RGB_Color *****************
  3239 ;; Defined at:
  3240 ;;		line 150 in file "utils.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  color           1    wreg     unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  color           1   16[COMRAM] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;		None               void
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;Total ram usage:        1 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    2
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_test_alarm
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text2
  3269  004ED2                     __ptext2:
  3270                           	opt stack 0
  3271  004ED2                     _Set_RGB_Color:
  3272                           	opt stack 27
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;incstack = 0
  3276                           ;Set_RGB_Color@color stored from wreg
  3277  004ED2  6E11               	movwf	Set_RGB_Color@color,c
  3278                           
  3279                           ;utils.c: 153: if(color ==0x08) color =0;
  3280  004ED4  0E08               	movlw	8
  3281  004ED6  1811               	xorwf	Set_RGB_Color@color,w,c
  3282  004ED8  A4D8               	btfss	status,2,c
  3283  004EDA  D003               	goto	l7464
  3284  004EDC  0E00               	movlw	0
  3285  004EDE  6E11               	movwf	Set_RGB_Color@color,c
  3286  004EE0  D000               	goto	l7464
  3287  004EE2                     l7464:
  3288                           
  3289                           ;utils.c: 154: PORTE = color;
  3290  004EE2  C011  FF84         	movff	Set_RGB_Color@color,3972	;volatile
  3291  004EE6  0012               	return		;funcret
  3292  004EE8                     __end_of_Set_RGB_Color:
  3293                           	opt stack 0
  3294                           tblptru	equ	0xFF8
  3295                           tblptrh	equ	0xFF7
  3296                           tblptrl	equ	0xFF6
  3297                           tablat	equ	0xFF5
  3298                           postinc0	equ	0xFEE
  3299                           wreg	equ	0xFE8
  3300                           postdec1	equ	0xFE5
  3301                           fsr1l	equ	0xFE1
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function _DS3231_Turn_On_Alarm *****************
  3305 ;; Defined at:
  3306 ;;		line 234 in file "I2C_Support.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  Device          1   30[COMRAM] unsigned char 
  3311 ;;  control_F       1   29[COMRAM] unsigned char 
  3312 ;;  control_E       1   28[COMRAM] unsigned char 
  3313 ;;  Address_F       1   27[COMRAM] unsigned char 
  3314 ;;  Address_E       1   26[COMRAM] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;		None               void
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        5 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    7
  3331 ;; This function calls:
  3332 ;;		_DS3231_Init
  3333 ;;		_I2C_Write_Address_Read_One_Byte
  3334 ;;		_I2C_Write_Address_Write_One_Byte
  3335 ;; This function is called by:
  3336 ;;		_test_alarm
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text3
  3341  004742                     __ptext3:
  3342                           	opt stack 0
  3343  004742                     _DS3231_Turn_On_Alarm:
  3344                           	opt stack 22
  3345                           
  3346                           ;I2C_Support.c: 236: char Device = 0x68;
  3347                           
  3348                           ;incstack = 0
  3349  004742  0E68               	movlw	104
  3350  004744  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  3351                           
  3352                           ;I2C_Support.c: 237: char Address_E = 0x0E;
  3353  004746  0E0E               	movlw	14
  3354  004748  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  3355                           
  3356                           ;I2C_Support.c: 238: char Address_F = 0x0F;
  3357  00474A  0E0F               	movlw	15
  3358  00474C  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  3359                           
  3360                           ;I2C_Support.c: 239: char control_E;
  3361                           ;I2C_Support.c: 240: char control_F;
  3362                           ;I2C_Support.c: 242: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3363  00474E  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3364  004752  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3365  004754  EC82  F025         	call	_I2C_Write_Address_Read_One_Byte
  3366  004758  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  3367                           
  3368                           ;I2C_Support.c: 243: control_E = control_E | 0x01;
  3369  00475A  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  3370  00475C  0901               	iorlw	1
  3371  00475E  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  3372                           
  3373                           ;I2C_Support.c: 244: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3374  004760  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3375  004764  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3376  004768  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3377  00476A  EC81  F026         	call	_I2C_Write_Address_Write_One_Byte
  3378                           
  3379                           ;I2C_Support.c: 246: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  3380  00476E  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  3381  004772  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3382  004774  EC82  F025         	call	_I2C_Write_Address_Read_One_Byte
  3383  004778  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  3384                           
  3385                           ;I2C_Support.c: 247: control_F = control_F & 0xFE;
  3386  00477A  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  3387  00477C  0BFE               	andlw	254
  3388  00477E  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  3389                           
  3390                           ;I2C_Support.c: 248: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  3391  004780  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  3392  004784  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  3393  004788  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3394  00478A  EC81  F026         	call	_I2C_Write_Address_Write_One_Byte
  3395                           
  3396                           ;I2C_Support.c: 249: DS3231_Init();
  3397  00478E  ECC1  F01C         	call	_DS3231_Init	;wreg free
  3398  004792  0012               	return		;funcret
  3399  004794                     __end_of_DS3231_Turn_On_Alarm:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  3412 ;; Defined at:
  3413 ;;		line 217 in file "I2C_Support.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  Device          1   30[COMRAM] unsigned char 
  3418 ;;  control_F       1   29[COMRAM] unsigned char 
  3419 ;;  control_E       1   28[COMRAM] unsigned char 
  3420 ;;  Address_F       1   27[COMRAM] unsigned char 
  3421 ;;  Address_E       1   26[COMRAM] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;		None               void
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;Total ram usage:        5 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    7
  3438 ;; This function calls:
  3439 ;;		_DS3231_Init
  3440 ;;		_I2C_Write_Address_Read_One_Byte
  3441 ;;		_I2C_Write_Address_Write_One_Byte
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;;		_test_alarm
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text4
  3449  004794                     __ptext4:
  3450                           	opt stack 0
  3451  004794                     _DS3231_Turn_Off_Alarm:
  3452                           	opt stack 22
  3453                           
  3454                           ;I2C_Support.c: 219: char Device = 0x68;
  3455                           
  3456                           ;incstack = 0
  3457  004794  0E68               	movlw	104
  3458  004796  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  3459                           
  3460                           ;I2C_Support.c: 220: char Address_E = 0x0E;
  3461  004798  0E0E               	movlw	14
  3462  00479A  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  3463                           
  3464                           ;I2C_Support.c: 221: char Address_F = 0x0F;
  3465  00479C  0E0F               	movlw	15
  3466  00479E  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  3467                           
  3468                           ;I2C_Support.c: 222: char control_E;
  3469                           ;I2C_Support.c: 223: char control_F;
  3470                           ;I2C_Support.c: 225: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3471  0047A0  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3472  0047A4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3473  0047A6  EC82  F025         	call	_I2C_Write_Address_Read_One_Byte
  3474  0047AA  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  3475                           
  3476                           ;I2C_Support.c: 226: control_E = control_E & 0xFE;
  3477  0047AC  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  3478  0047AE  0BFE               	andlw	254
  3479  0047B0  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  3480                           
  3481                           ;I2C_Support.c: 227: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3482  0047B2  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3483  0047B6  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3484  0047BA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3485  0047BC  EC81  F026         	call	_I2C_Write_Address_Write_One_Byte
  3486                           
  3487                           ;I2C_Support.c: 228: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  3488  0047C0  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  3489  0047C4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3490  0047C6  EC82  F025         	call	_I2C_Write_Address_Read_One_Byte
  3491  0047CA  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  3492                           
  3493                           ;I2C_Support.c: 229: control_F = control_F & 0xFE;
  3494  0047CC  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  3495  0047CE  0BFE               	andlw	254
  3496  0047D0  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  3497                           
  3498                           ;I2C_Support.c: 230: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  3499  0047D2  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  3500  0047D6  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  3501  0047DA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3502  0047DC  EC81  F026         	call	_I2C_Write_Address_Write_One_Byte
  3503                           
  3504                           ;I2C_Support.c: 231: DS3231_Init();
  3505  0047E0  ECC1  F01C         	call	_DS3231_Init	;wreg free
  3506  0047E4  0012               	return		;funcret
  3507  0047E6                     __end_of_DS3231_Turn_Off_Alarm:
  3508                           	opt stack 0
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           postdec1	equ	0xFE5
  3516                           fsr1l	equ	0xFE1
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function _DS3231_Init *****************
  3520 ;; Defined at:
  3521 ;;		line 156 in file "I2C_Support.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  Device          1   25[COMRAM] unsigned char 
  3526 ;;  control_E       1   24[COMRAM] unsigned char 
  3527 ;;  Address_E       1   23[COMRAM] unsigned char 
  3528 ;;  Address_7       1   22[COMRAM] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;		None               void
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;Total ram usage:        4 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    6
  3545 ;; This function calls:
  3546 ;;		_I2C_ReStart
  3547 ;;		_I2C_Read
  3548 ;;		_I2C_Start
  3549 ;;		_I2C_Stop
  3550 ;;		_I2C_Write
  3551 ;;		_I2C_Write_Address_Read_One_Byte
  3552 ;;		_I2C_Write_Address_Write_One_Byte
  3553 ;; This function is called by:
  3554 ;;		_DS3231_Turn_Off_Alarm
  3555 ;;		_DS3231_Turn_On_Alarm
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text5
  3560  003982                     __ptext5:
  3561                           	opt stack 0
  3562  003982                     _DS3231_Init:
  3563                           	opt stack 22
  3564                           
  3565                           ;I2C_Support.c: 158: char Device = 0x68;
  3566                           
  3567                           ;incstack = 0
  3568  003982  0E68               	movlw	104
  3569  003984  6E1A               	movwf	DS3231_Init@Device,c
  3570                           
  3571                           ;I2C_Support.c: 159: char Address_7 = 0x07;
  3572  003986  0E07               	movlw	7
  3573  003988  6E17               	movwf	DS3231_Init@Address_7,c
  3574                           
  3575                           ;I2C_Support.c: 160: char Address_E = 0x0E;
  3576  00398A  0E0E               	movlw	14
  3577  00398C  6E18               	movwf	DS3231_Init@Address_E,c
  3578                           
  3579                           ;I2C_Support.c: 161: char control_E;
  3580                           ;I2C_Support.c: 163: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3581  00398E  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3582  003992  501A               	movf	DS3231_Init@Device,w,c
  3583  003994  EC82  F025         	call	_I2C_Write_Address_Read_One_Byte
  3584  003998  6E19               	movwf	DS3231_Init@control_E,c
  3585                           
  3586                           ;I2C_Support.c: 164: control_E = control_E & 0x01;
  3587  00399A  5019               	movf	DS3231_Init@control_E,w,c
  3588  00399C  0B01               	andlw	1
  3589  00399E  6E19               	movwf	DS3231_Init@control_E,c
  3590                           
  3591                           ;I2C_Support.c: 165: control_E = control_E | 0x25;
  3592  0039A0  5019               	movf	DS3231_Init@control_E,w,c
  3593  0039A2  0925               	iorlw	37
  3594  0039A4  6E19               	movwf	DS3231_Init@control_E,c
  3595                           
  3596                           ;I2C_Support.c: 166: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3597  0039A6  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3598  0039AA  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3599  0039AE  501A               	movf	DS3231_Init@Device,w,c
  3600  0039B0  EC81  F026         	call	_I2C_Write_Address_Write_One_Byte
  3601                           
  3602                           ;I2C_Support.c: 167: I2C_Start();
  3603  0039B4  ECDF  F027         	call	_I2C_Start	;wreg free
  3604                           
  3605                           ;I2C_Support.c: 168: I2C_Write((Device << 1) | 0);
  3606  0039B8  501A               	movf	DS3231_Init@Device,w,c
  3607  0039BA  241A               	addwf	DS3231_Init@Device,w,c
  3608  0039BC  EC0B  F025         	call	_I2C_Write
  3609                           
  3610                           ;I2C_Support.c: 169: I2C_Write(Address_7);
  3611  0039C0  5017               	movf	DS3231_Init@Address_7,w,c
  3612  0039C2  EC0B  F025         	call	_I2C_Write
  3613                           
  3614                           ;I2C_Support.c: 170: I2C_ReStart();
  3615  0039C6  EC7F  F027         	call	_I2C_ReStart	;wreg free
  3616                           
  3617                           ;I2C_Support.c: 171: I2C_Write((Device << 1) | 1);
  3618  0039CA  80D8               	bsf	status,0,c
  3619  0039CC  341A               	rlcf	DS3231_Init@Device,w,c
  3620  0039CE  EC0B  F025         	call	_I2C_Write
  3621                           
  3622                           ;I2C_Support.c: 172: alarm_second = I2C_Read(1);
  3623  0039D2  0E01               	movlw	1
  3624  0039D4  EC68  F024         	call	_I2C_Read
  3625  0039D8  6E66               	movwf	_alarm_second,c
  3626                           
  3627                           ;I2C_Support.c: 173: alarm_minute = I2C_Read(1);
  3628  0039DA  0E01               	movlw	1
  3629  0039DC  EC68  F024         	call	_I2C_Read
  3630  0039E0  6E65               	movwf	_alarm_minute,c
  3631                           
  3632                           ;I2C_Support.c: 174: alarm_hour = I2C_Read(1);
  3633  0039E2  0E01               	movlw	1
  3634  0039E4  EC68  F024         	call	_I2C_Read
  3635  0039E8  6E64               	movwf	_alarm_hour,c
  3636                           
  3637                           ;I2C_Support.c: 175: alarm_date = I2C_Read(0);
  3638  0039EA  0E00               	movlw	0
  3639  0039EC  EC68  F024         	call	_I2C_Read
  3640  0039F0  0100               	movlb	0	; () banked
  3641  0039F2  6FA7               	movwf	_alarm_date& (0+255),b
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;I2C_Support.c: 177: alarm_second = alarm_second & 0x7f;
  3645  0039F4  5066               	movf	_alarm_second,w,c
  3646  0039F6  0B7F               	andlw	127
  3647  0039F8  6E66               	movwf	_alarm_second,c
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;I2C_Support.c: 178: alarm_minute = alarm_minute & 0x7f;
  3651  0039FA  5065               	movf	_alarm_minute,w,c
  3652  0039FC  0B7F               	andlw	127
  3653  0039FE  6E65               	movwf	_alarm_minute,c
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;I2C_Support.c: 179: alarm_hour = alarm_hour & 0x7f;
  3657  003A00  5064               	movf	_alarm_hour,w,c
  3658  003A02  0B7F               	andlw	127
  3659  003A04  6E64               	movwf	_alarm_hour,c
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;I2C_Support.c: 180: alarm_date = alarm_date | 0x80;
  3663  003A06  0100               	movlb	0	; () banked
  3664  003A08  51A7               	movf	_alarm_date& (0+255),w,b
  3665  003A0A  0980               	iorlw	128
  3666  003A0C  0100               	movlb	0	; () banked
  3667  003A0E  6FA7               	movwf	_alarm_date& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;I2C_Support.c: 182: I2C_Start();
  3671  003A10  ECDF  F027         	call	_I2C_Start	;wreg free
  3672                           
  3673                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
  3674  003A14  501A               	movf	DS3231_Init@Device,w,c
  3675  003A16  241A               	addwf	DS3231_Init@Device,w,c
  3676  003A18  EC0B  F025         	call	_I2C_Write
  3677                           
  3678                           ;I2C_Support.c: 184: I2C_Write(Address_7);
  3679  003A1C  5017               	movf	DS3231_Init@Address_7,w,c
  3680  003A1E  EC0B  F025         	call	_I2C_Write
  3681                           
  3682                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
  3683  003A22  5066               	movf	_alarm_second,w,c
  3684  003A24  EC0B  F025         	call	_I2C_Write
  3685                           
  3686                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
  3687  003A28  5065               	movf	_alarm_minute,w,c
  3688  003A2A  EC0B  F025         	call	_I2C_Write
  3689                           
  3690                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
  3691  003A2E  5064               	movf	_alarm_hour,w,c
  3692  003A30  EC0B  F025         	call	_I2C_Write
  3693                           
  3694                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
  3695  003A34  0100               	movlb	0	; () banked
  3696  003A36  51A7               	movf	_alarm_date& (0+255),w,b
  3697  003A38  EC0B  F025         	call	_I2C_Write
  3698                           
  3699                           ;I2C_Support.c: 190: I2C_Stop();
  3700  003A3C  ECD6  F027         	call	_I2C_Stop	;wreg free
  3701  003A40  0012               	return		;funcret
  3702  003A42                     __end_of_DS3231_Init:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           postinc0	equ	0xFEE
  3709                           wreg	equ	0xFE8
  3710                           postdec1	equ	0xFE5
  3711                           fsr1l	equ	0xFE1
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  3715 ;; Defined at:
  3716 ;;		line 135 in file "I2C_Soft.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  Device          1    wreg     unsigned char 
  3719 ;;  Address         1   18[COMRAM] unsigned char 
  3720 ;;  Data_Out        1   19[COMRAM] unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  Device          1   20[COMRAM] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;		None               void
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;Total ram usage:        3 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    4
  3739 ;; This function calls:
  3740 ;;		_I2C_Start
  3741 ;;		_I2C_Stop
  3742 ;;		_I2C_Write
  3743 ;; This function is called by:
  3744 ;;		_DS3231_Init
  3745 ;;		_DS3231_Turn_Off_Alarm
  3746 ;;		_DS3231_Turn_On_Alarm
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text6
  3751  004D02                     __ptext6:
  3752                           	opt stack 0
  3753  004D02                     _I2C_Write_Address_Write_One_Byte:
  3754                           	opt stack 24
  3755                           
  3756                           ;incstack = 0
  3757                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  3758  004D02  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  3759                           
  3760                           ;I2C_Soft.c: 137: I2C_Start();
  3761  004D04  ECDF  F027         	call	_I2C_Start	;wreg free
  3762                           
  3763                           ;I2C_Soft.c: 138: I2C_Write((Device << 1) | 0);
  3764  004D08  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  3765  004D0A  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  3766  004D0C  EC0B  F025         	call	_I2C_Write
  3767                           
  3768                           ;I2C_Soft.c: 139: I2C_Write(Address);
  3769  004D10  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  3770  004D12  EC0B  F025         	call	_I2C_Write
  3771                           
  3772                           ;I2C_Soft.c: 140: I2C_Write(Data_Out);
  3773  004D16  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  3774  004D18  EC0B  F025         	call	_I2C_Write
  3775                           
  3776                           ;I2C_Soft.c: 141: I2C_Stop();
  3777  004D1C  ECD6  F027         	call	_I2C_Stop	;wreg free
  3778  004D20  0012               	return		;funcret
  3779  004D22                     __end_of_I2C_Write_Address_Write_One_Byte:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           postinc0	equ	0xFEE
  3786                           wreg	equ	0xFE8
  3787                           postdec1	equ	0xFE5
  3788                           fsr1l	equ	0xFE1
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  3792 ;; Defined at:
  3793 ;;		line 122 in file "I2C_Soft.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  Device          1    wreg     unsigned char 
  3796 ;;  Address         1   19[COMRAM] unsigned char 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  Device          1   21[COMRAM] unsigned char 
  3799 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      unsigned char 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        3 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    5
  3816 ;; This function calls:
  3817 ;;		_I2C_ReStart
  3818 ;;		_I2C_Read
  3819 ;;		_I2C_Start
  3820 ;;		_I2C_Stop
  3821 ;;		_I2C_Write
  3822 ;; This function is called by:
  3823 ;;		_DS3231_Init
  3824 ;;		_DS3231_Turn_Off_Alarm
  3825 ;;		_DS3231_Turn_On_Alarm
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text7
  3830  004B04                     __ptext7:
  3831                           	opt stack 0
  3832  004B04                     _I2C_Write_Address_Read_One_Byte:
  3833                           	opt stack 23
  3834                           
  3835                           ;incstack = 0
  3836                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  3837  004B04  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  3838                           
  3839                           ;I2C_Soft.c: 124: char Data_Ret;
  3840                           ;I2C_Soft.c: 125: I2C_Start();
  3841  004B06  ECDF  F027         	call	_I2C_Start	;wreg free
  3842                           
  3843                           ;I2C_Soft.c: 126: I2C_Write((Device << 1) | 0);
  3844  004B0A  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  3845  004B0C  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  3846  004B0E  EC0B  F025         	call	_I2C_Write
  3847                           
  3848                           ;I2C_Soft.c: 127: I2C_Write(Address);
  3849  004B12  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  3850  004B14  EC0B  F025         	call	_I2C_Write
  3851                           
  3852                           ;I2C_Soft.c: 128: I2C_ReStart();
  3853  004B18  EC7F  F027         	call	_I2C_ReStart	;wreg free
  3854                           
  3855                           ;I2C_Soft.c: 129: I2C_Write((Device << 1) | 1);
  3856  004B1C  80D8               	bsf	status,0,c
  3857  004B1E  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  3858  004B20  EC0B  F025         	call	_I2C_Write
  3859                           
  3860                           ;I2C_Soft.c: 130: Data_Ret = I2C_Read(0);
  3861  004B24  0E00               	movlw	0
  3862  004B26  EC68  F024         	call	_I2C_Read
  3863  004B2A  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  3864                           
  3865                           ;I2C_Soft.c: 131: I2C_Stop();
  3866  004B2C  ECD6  F027         	call	_I2C_Stop	;wreg free
  3867                           
  3868                           ;I2C_Soft.c: 132: return Data_Ret;
  3869  004B30  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  3870  004B32  D000               	goto	l127
  3871  004B34                     l127:
  3872  004B34  0012               	return		;funcret
  3873  004B36                     __end_of_I2C_Write_Address_Read_One_Byte:
  3874                           	opt stack 0
  3875                           tblptru	equ	0xFF8
  3876                           tblptrh	equ	0xFF7
  3877                           tblptrl	equ	0xFF6
  3878                           tablat	equ	0xFF5
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           postdec1	equ	0xFE5
  3882                           fsr1l	equ	0xFE1
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _Activate_Buzzer_4KHz *****************
  3886 ;; Defined at:
  3887 ;;		line 122 in file "utils.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, status,2
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    2
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_test_alarm
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text8
  3916  004F64                     __ptext8:
  3917                           	opt stack 0
  3918  004F64                     _Activate_Buzzer_4KHz:
  3919                           	opt stack 27
  3920                           
  3921                           ;utils.c: 125: PR2 = 0b01111100 ;
  3922                           
  3923                           ;incstack = 0
  3924  004F64  0E7C               	movlw	124
  3925  004F66  6ECB               	movwf	4043,c	;volatile
  3926                           
  3927                           ;utils.c: 126: T2CON = 0b00000101 ;
  3928  004F68  0E05               	movlw	5
  3929  004F6A  6ECA               	movwf	4042,c	;volatile
  3930                           
  3931                           ;utils.c: 127: CCPR2L = 0b00111110 ;
  3932  004F6C  0E3E               	movlw	62
  3933  004F6E  6EBB               	movwf	4027,c	;volatile
  3934                           
  3935                           ;utils.c: 128: CCP2CON = 0b00011100 ;
  3936  004F70  0E1C               	movlw	28
  3937  004F72  6EBA               	movwf	4026,c	;volatile
  3938  004F74  0012               	return		;funcret
  3939  004F76                     __end_of_Activate_Buzzer_4KHz:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           postdec1	equ	0xFE5
  3948                           fsr1l	equ	0xFE1
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function _read_volt *****************
  3952 ;; Defined at:
  3953 ;;		line 157 in file "utils.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  volt            3   63[COMRAM] float 
  3958 ;;  nStep           2   66[COMRAM] int 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  3   60[COMRAM] float 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3968 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;Total ram usage:        8 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    4
  3975 ;; This function calls:
  3976 ;;		___awtoft
  3977 ;;		___ftdiv
  3978 ;;		___wmul
  3979 ;;		_get_full_ADC
  3980 ;; This function is called by:
  3981 ;;		_main
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text9
  3986  00444A                     __ptext9:
  3987                           	opt stack 0
  3988  00444A                     _read_volt:
  3989                           	opt stack 26
  3990                           
  3991                           ;utils.c: 159: int nStep = get_full_ADC();
  3992                           
  3993                           ;incstack = 0
  3994  00444A  EC38  F026         	call	_get_full_ADC	;wreg free
  3995  00444E  C011  F043         	movff	?_get_full_ADC,read_volt@nStep
  3996  004452  C012  F044         	movff	?_get_full_ADC+1,read_volt@nStep+1
  3997                           
  3998                           ;utils.c: 160: float volt = nStep * 5 /1024.0;
  3999  004456  C043  F011         	movff	read_volt@nStep,___wmul@multiplier
  4000  00445A  C044  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  4001  00445E  0E00               	movlw	0
  4002  004460  6E14               	movwf	___wmul@multiplicand+1,c
  4003  004462  0E05               	movlw	5
  4004  004464  6E13               	movwf	___wmul@multiplicand,c
  4005  004466  EC24  F026         	call	___wmul	;wreg free
  4006  00446A  C011  F019         	movff	?___wmul,___awtoft@c
  4007  00446E  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  4008  004472  EC2A  F025         	call	___awtoft	;wreg free
  4009  004476  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  4010  00447A  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  4011  00447E  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  4012  004482  0E00               	movlw	0
  4013  004484  6E31               	movwf	___ftdiv@f2,c
  4014  004486  0E80               	movlw	128
  4015  004488  6E32               	movwf	___ftdiv@f2+1,c
  4016  00448A  0E44               	movlw	68
  4017  00448C  6E33               	movwf	___ftdiv@f2+2,c
  4018  00448E  EC3A  F01A         	call	___ftdiv	;wreg free
  4019  004492  C02E  F040         	movff	?___ftdiv,read_volt@volt
  4020  004496  C02F  F041         	movff	?___ftdiv+1,read_volt@volt+1
  4021  00449A  C030  F042         	movff	?___ftdiv+2,read_volt@volt+2
  4022                           
  4023                           ;utils.c: 161: return volt;
  4024  00449E  C040  F03D         	movff	read_volt@volt,?_read_volt
  4025  0044A2  C041  F03E         	movff	read_volt@volt+1,?_read_volt+1
  4026  0044A6  C042  F03F         	movff	read_volt@volt+2,?_read_volt+2
  4027  0044AA  D000               	goto	l1385
  4028  0044AC                     l1385:
  4029  0044AC  0012               	return		;funcret
  4030  0044AE                     __end_of_read_volt:
  4031                           	opt stack 0
  4032                           tblptru	equ	0xFF8
  4033                           tblptrh	equ	0xFF7
  4034                           tblptrl	equ	0xFF6
  4035                           tablat	equ	0xFF5
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           postdec1	equ	0xFE5
  4039                           fsr1l	equ	0xFE1
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _get_full_ADC *****************
  4043 ;; Defined at:
  4044 ;;		line 165 in file "utils.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  result          2   20[COMRAM] unsigned int 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  2   16[COMRAM] unsigned int 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2, status,0
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4058 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;Total ram usage:        6 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    2
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_read_volt
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text10
  4073  004C70                     __ptext10:
  4074                           	opt stack 0
  4075  004C70                     _get_full_ADC:
  4076                           	opt stack 27
  4077                           
  4078                           ;utils.c: 168: unsigned int result;
  4079                           ;utils.c: 169: ADCON0bits.GO=1;
  4080                           
  4081                           ;incstack = 0
  4082  004C70  82C2               	bsf	4034,1,c	;volatile
  4083                           
  4084                           ;utils.c: 170: while(ADCON0bits.DONE==1);
  4085  004C72  D000               	goto	l1388
  4086  004C74                     l1388:
  4087  004C74  B2C2               	btfsc	4034,1,c	;volatile
  4088  004C76  D7FE               	goto	l1388
  4089                           
  4090                           ;utils.c: 171: result = (ADRESH * 0x100) + ADRESL;
  4091  004C78  50C4               	movf	4036,w,c	;volatile
  4092  004C7A  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  4093  004C7C  6A13               	clrf	??_get_full_ADC& (0+255),c
  4094  004C7E  50C3               	movf	4035,w,c	;volatile
  4095  004C80  2413               	addwf	??_get_full_ADC,w,c
  4096  004C82  6E15               	movwf	get_full_ADC@result,c
  4097  004C84  0E00               	movlw	0
  4098  004C86  2014               	addwfc	??_get_full_ADC+1,w,c
  4099  004C88  6E16               	movwf	get_full_ADC@result+1,c
  4100                           
  4101                           ;utils.c: 173: return result;
  4102  004C8A  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  4103  004C8E  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4104  004C92  D000               	goto	l1391
  4105  004C94                     l1391:
  4106  004C94  0012               	return		;funcret
  4107  004C96                     __end_of_get_full_ADC:
  4108                           	opt stack 0
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           postinc0	equ	0xFEE
  4114                           wreg	equ	0xFE8
  4115                           postdec1	equ	0xFE5
  4116                           fsr1l	equ	0xFE1
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function ___awtoft *****************
  4120 ;; Defined at:
  4121 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  c               2   24[COMRAM] int 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  sign            1   27[COMRAM] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  3   24[COMRAM] float 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4135 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;Total ram usage:        4 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		___ftpack
  4144 ;; This function is called by:
  4145 ;;		_read_volt
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text11
  4150  004A54                     __ptext11:
  4151                           	opt stack 0
  4152  004A54                     ___awtoft:
  4153                           	opt stack 26
  4154                           
  4155                           ;incstack = 0
  4156  004A54  0E00               	movlw	0
  4157  004A56  6E1C               	movwf	___awtoft@sign,c
  4158  004A58  AE1A               	btfss	___awtoft@c+1,7,c
  4159  004A5A  D007               	goto	l10408
  4160  004A5C  6C19               	negf	___awtoft@c,c
  4161  004A5E  1E1A               	comf	___awtoft@c+1,f,c
  4162  004A60  B0D8               	btfsc	status,0,c
  4163  004A62  2A1A               	incf	___awtoft@c+1,f,c
  4164  004A64  0E01               	movlw	1
  4165  004A66  6E1C               	movwf	___awtoft@sign,c
  4166  004A68  D000               	goto	l10408
  4167  004A6A                     l10408:
  4168  004A6A  C019  F011         	movff	___awtoft@c,___ftpack@arg
  4169  004A6E  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  4170  004A72  6A13               	clrf	___ftpack@arg+2,c
  4171  004A74  0E8E               	movlw	142
  4172  004A76  6E14               	movwf	___ftpack@exp,c
  4173  004A78  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  4174  004A7C  EC5E  F01C         	call	___ftpack	;wreg free
  4175  004A80  C011  F019         	movff	?___ftpack,?___awtoft
  4176  004A84  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  4177  004A88  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  4178  004A8C  D000               	goto	l1790
  4179  004A8E                     l1790:
  4180  004A8E  0012               	return		;funcret
  4181  004A90                     __end_of___awtoft:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function _get_RPM *****************
  4194 ;; Defined at:
  4195 ;;		line 58 in file "Fan_Support.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  RPS             2   32[COMRAM] int 
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  2   30[COMRAM] int 
  4202 ;; Registers used:
  4203 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;Total ram usage:        4 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    3
  4216 ;; This function calls:
  4217 ;;		___awdiv
  4218 ;;		___wmul
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text12
  4225  00495C                     __ptext12:
  4226                           	opt stack 0
  4227  00495C                     _get_RPM:
  4228                           	opt stack 27
  4229                           
  4230                           ;Fan_Support.c: 61: int RPS = TMR3L / 2;
  4231                           
  4232                           ;incstack = 0
  4233  00495C  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  4234  004960  6A18               	clrf	___awdiv@dividend+1,c
  4235  004962  0E00               	movlw	0
  4236  004964  6E1A               	movwf	___awdiv@divisor+1,c
  4237  004966  0E02               	movlw	2
  4238  004968  6E19               	movwf	___awdiv@divisor,c
  4239  00496A  ECD0  F01E         	call	___awdiv	;wreg free
  4240  00496E  C017  F021         	movff	?___awdiv,get_RPM@RPS
  4241  004972  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  4242                           
  4243                           ;Fan_Support.c: 63: TMR3L = 0;
  4244  004976  0E00               	movlw	0
  4245  004978  6EB2               	movwf	4018,c	;volatile
  4246                           
  4247                           ;Fan_Support.c: 65: return (RPS * 60);
  4248  00497A  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  4249  00497E  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  4250  004982  0E00               	movlw	0
  4251  004984  6E14               	movwf	___wmul@multiplicand+1,c
  4252  004986  0E3C               	movlw	60
  4253  004988  6E13               	movwf	___wmul@multiplicand,c
  4254  00498A  EC24  F026         	call	___wmul	;wreg free
  4255  00498E  C011  F01F         	movff	?___wmul,?_get_RPM
  4256  004992  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  4257  004996  D000               	goto	l39
  4258  004998                     l39:
  4259  004998  0012               	return		;funcret
  4260  00499A                     __end_of_get_RPM:
  4261                           	opt stack 0
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           postinc0	equ	0xFEE
  4267                           wreg	equ	0xFE8
  4268                           postdec1	equ	0xFE5
  4269                           fsr1l	equ	0xFE1
  4270                           status	equ	0xFD8
  4271                           
  4272 ;; *************** function _Update_Screen *****************
  4273 ;; Defined at:
  4274 ;;		line 76 in file "Main_Screen.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  neg_tempF       2   75[COMRAM] int 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2  372[None  ] int 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;Total ram usage:        4 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    9
  4295 ;; This function calls:
  4296 ;;		___awdiv
  4297 ;;		___awmod
  4298 ;;		___ftmul
  4299 ;;		___fttol
  4300 ;;		_drawtext
  4301 ;;		_strcpy
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text13
  4308  000C60                     __ptext13:
  4309                           	opt stack 0
  4310  000C60                     _Update_Screen:
  4311                           	opt stack 21
  4312                           
  4313                           ;Main_Screen.c: 78: if ((DS1621_tempC & 0x80) == 0x80)
  4314                           
  4315                           ;incstack = 0
  4316  000C60  0100               	movlb	0	; () banked
  4317  000C62  AF89               	btfss	_DS1621_tempC& (0+255),7,b
  4318  000C64  D01E               	goto	l10492
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;Main_Screen.c: 79: {
  4322                           ;Main_Screen.c: 80: tempC[0] = '-';
  4323  000C66  0E2D               	movlw	45
  4324  000C68  0100               	movlb	0	; () banked
  4325  000C6A  6FD3               	movwf	_tempC& (0+255),b
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;Main_Screen.c: 81: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  4329  000C6C  0E7F               	movlw	127
  4330  000C6E  0100               	movlb	0	; () banked
  4331  000C70  1589               	andwf	_DS1621_tempC& (0+255),w,b
  4332  000C72  6E17               	movwf	___awdiv@dividend,c
  4333  000C74  6A18               	clrf	___awdiv@dividend+1,c
  4334  000C76  0E00               	movlw	0
  4335  000C78  6E1A               	movwf	___awdiv@divisor+1,c
  4336  000C7A  0E0A               	movlw	10
  4337  000C7C  6E19               	movwf	___awdiv@divisor,c
  4338  000C7E  ECD0  F01E         	call	___awdiv	;wreg free
  4339  000C82  5017               	movf	?___awdiv,w,c
  4340  000C84  0F30               	addlw	48
  4341  000C86  0100               	movlb	0	; () banked
  4342  000C88  6FD4               	movwf	(_tempC+1)& (0+255),b
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;Main_Screen.c: 82: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  4346  000C8A  0E7F               	movlw	127
  4347  000C8C  0100               	movlb	0	; () banked
  4348  000C8E  1589               	andwf	_DS1621_tempC& (0+255),w,b
  4349  000C90  6E3D               	movwf	___awmod@dividend,c
  4350  000C92  6A3E               	clrf	___awmod@dividend+1,c
  4351  000C94  0E00               	movlw	0
  4352  000C96  6E40               	movwf	___awmod@divisor+1,c
  4353  000C98  0E0A               	movlw	10
  4354  000C9A  6E3F               	movwf	___awmod@divisor,c
  4355  000C9C  EC08  F021         	call	___awmod	;wreg free
  4356  000CA0  D01B               	goto	L3
  4357  000CA2                     l10492:
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;Main_Screen.c: 84: else
  4361                           ;Main_Screen.c: 85: {
  4362                           ;Main_Screen.c: 86: tempC[0] = '+';
  4363  000CA2  0E2B               	movlw	43
  4364  000CA4  0100               	movlb	0	; () banked
  4365  000CA6  6FD3               	movwf	_tempC& (0+255),b
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;Main_Screen.c: 87: tempC[1] = DS1621_tempC/10 + '0';
  4369  000CA8  C089  F017         	movff	_DS1621_tempC,___awdiv@dividend
  4370  000CAC  C08A  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  4371  000CB0  0E00               	movlw	0
  4372  000CB2  6E1A               	movwf	___awdiv@divisor+1,c
  4373  000CB4  0E0A               	movlw	10
  4374  000CB6  6E19               	movwf	___awdiv@divisor,c
  4375  000CB8  ECD0  F01E         	call	___awdiv	;wreg free
  4376  000CBC  5017               	movf	?___awdiv,w,c
  4377  000CBE  0F30               	addlw	48
  4378  000CC0  0100               	movlb	0	; () banked
  4379  000CC2  6FD4               	movwf	(_tempC+1)& (0+255),b
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;Main_Screen.c: 88: tempC[2] = DS1621_tempC%10 + '0';
  4383  000CC4  C089  F03D         	movff	_DS1621_tempC,___awmod@dividend
  4384  000CC8  C08A  F03E         	movff	_DS1621_tempC+1,___awmod@dividend+1
  4385  000CCC  0E00               	movlw	0
  4386  000CCE  6E40               	movwf	___awmod@divisor+1,c
  4387  000CD0  0E0A               	movlw	10
  4388  000CD2  6E3F               	movwf	___awmod@divisor,c
  4389  000CD4  EC08  F021         	call	___awmod	;wreg free
  4390  000CD8                     L3:
  4391  000CD8  503D               	movf	?___awmod,w,c
  4392  000CDA  0F30               	addlw	48
  4393  000CDC  0100               	movlb	0	; () banked
  4394  000CDE  6FD5               	movwf	(_tempC+2)& (0+255),b
  4395  000CE0  D000               	goto	l10498
  4396  000CE2                     l10498:
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;Main_Screen.c: 89: }
  4400                           ;Main_Screen.c: 91: if (DS1621_tempF < 0)
  4401  000CE2  0100               	movlb	0	; () banked
  4402  000CE4  AF8C               	btfss	(_DS1621_tempF+1)& (0+255),7,b
  4403  000CE6  D028               	goto	l10508
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;Main_Screen.c: 92: {
  4407                           ;Main_Screen.c: 93: tempF[0] = '-';
  4408  000CE8  0E2D               	movlw	45
  4409  000CEA  0100               	movlb	0	; () banked
  4410  000CEC  6FD7               	movwf	_tempF& (0+255),b
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;Main_Screen.c: 94: int neg_tempF = -DS1621_tempF;
  4414  000CEE  C08B  F04A         	movff	_DS1621_tempF,??_Update_Screen
  4415  000CF2  C08C  F04B         	movff	_DS1621_tempF+1,??_Update_Screen+1
  4416  000CF6  1E4A               	comf	??_Update_Screen,f,c
  4417  000CF8  1E4B               	comf	??_Update_Screen+1,f,c
  4418  000CFA  4A4A               	infsnz	??_Update_Screen,f,c
  4419  000CFC  2A4B               	incf	??_Update_Screen+1,f,c
  4420  000CFE  C04A  F04C         	movff	??_Update_Screen,Update_Screen@neg_tempF
  4421  000D02  C04B  F04D         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;Main_Screen.c: 95: tempF[1] = neg_tempF/10 + '0';
  4425  000D06  C04C  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  4426  000D0A  C04D  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  4427  000D0E  0E00               	movlw	0
  4428  000D10  6E1A               	movwf	___awdiv@divisor+1,c
  4429  000D12  0E0A               	movlw	10
  4430  000D14  6E19               	movwf	___awdiv@divisor,c
  4431  000D16  ECD0  F01E         	call	___awdiv	;wreg free
  4432  000D1A  5017               	movf	?___awdiv,w,c
  4433  000D1C  0F30               	addlw	48
  4434  000D1E  0100               	movlb	0	; () banked
  4435  000D20  6FD8               	movwf	(_tempF+1)& (0+255),b
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;Main_Screen.c: 96: tempF[2] = neg_tempF%10 + '0';
  4439  000D22  C04C  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  4440  000D26  C04D  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  4441  000D2A  0E00               	movlw	0
  4442  000D2C  6E40               	movwf	___awmod@divisor+1,c
  4443  000D2E  0E0A               	movlw	10
  4444  000D30  6E3F               	movwf	___awmod@divisor,c
  4445  000D32  EC08  F021         	call	___awmod	;wreg free
  4446  000D36  D01B               	goto	L4
  4447  000D38                     l10508:
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;Main_Screen.c: 98: else
  4451                           ;Main_Screen.c: 99: {
  4452                           ;Main_Screen.c: 100: tempF[0] = '+';
  4453  000D38  0E2B               	movlw	43
  4454  000D3A  0100               	movlb	0	; () banked
  4455  000D3C  6FD7               	movwf	_tempF& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;Main_Screen.c: 101: tempF[1] = DS1621_tempF/10 + '0';
  4459  000D3E  C08B  F017         	movff	_DS1621_tempF,___awdiv@dividend
  4460  000D42  C08C  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  4461  000D46  0E00               	movlw	0
  4462  000D48  6E1A               	movwf	___awdiv@divisor+1,c
  4463  000D4A  0E0A               	movlw	10
  4464  000D4C  6E19               	movwf	___awdiv@divisor,c
  4465  000D4E  ECD0  F01E         	call	___awdiv	;wreg free
  4466  000D52  5017               	movf	?___awdiv,w,c
  4467  000D54  0F30               	addlw	48
  4468  000D56  0100               	movlb	0	; () banked
  4469  000D58  6FD8               	movwf	(_tempF+1)& (0+255),b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Main_Screen.c: 102: tempF[2] = DS1621_tempF%10 + '0';
  4473  000D5A  C08B  F03D         	movff	_DS1621_tempF,___awmod@dividend
  4474  000D5E  C08C  F03E         	movff	_DS1621_tempF+1,___awmod@dividend+1
  4475  000D62  0E00               	movlw	0
  4476  000D64  6E40               	movwf	___awmod@divisor+1,c
  4477  000D66  0E0A               	movlw	10
  4478  000D68  6E3F               	movwf	___awmod@divisor,c
  4479  000D6A  EC08  F021         	call	___awmod	;wreg free
  4480  000D6E                     L4:
  4481  000D6E  503D               	movf	?___awmod,w,c
  4482  000D70  0F30               	addlw	48
  4483  000D72  0100               	movlb	0	; () banked
  4484  000D74  6FD9               	movwf	(_tempF+2)& (0+255),b
  4485  000D76  D000               	goto	l10514
  4486  000D78                     l10514:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;Main_Screen.c: 103: }
  4490                           ;Main_Screen.c: 104: time[0] = (hour>>4) + '0';
  4491  000D78  386A               	swapf	_hour,w,c
  4492  000D7A  0B0F               	andlw	15
  4493  000D7C  0F30               	addlw	48
  4494  000D7E  0101               	movlb	1	; () banked
  4495  000D80  6F61               	movwf	_time& (0+255),b
  4496                           
  4497                           ; BSR set to: 1
  4498                           ;Main_Screen.c: 105: time[1] = (hour & 0x0f)+ '0';
  4499  000D82  506A               	movf	_hour,w,c
  4500  000D84  0B0F               	andlw	15
  4501  000D86  0F30               	addlw	48
  4502  000D88  0101               	movlb	1	; () banked
  4503  000D8A  6F62               	movwf	(_time+1)& (0+255),b
  4504                           
  4505                           ; BSR set to: 1
  4506                           ;Main_Screen.c: 108: time[3] = (minute>>4) + '0';
  4507  000D8C  386B               	swapf	_minute,w,c
  4508  000D8E  0B0F               	andlw	15
  4509  000D90  0F30               	addlw	48
  4510  000D92  0101               	movlb	1	; () banked
  4511  000D94  6F64               	movwf	(_time+3)& (0+255),b
  4512                           
  4513                           ; BSR set to: 1
  4514                           ;Main_Screen.c: 109: time[4] = (minute & 0x0f) + '0';
  4515  000D96  506B               	movf	_minute,w,c
  4516  000D98  0B0F               	andlw	15
  4517  000D9A  0F30               	addlw	48
  4518  000D9C  0101               	movlb	1	; () banked
  4519  000D9E  6F65               	movwf	(_time+4)& (0+255),b
  4520                           
  4521                           ; BSR set to: 1
  4522                           ;Main_Screen.c: 111: time[6] = (second>>4) + '0';
  4523  000DA0  386D               	swapf	_second,w,c
  4524  000DA2  0B0F               	andlw	15
  4525  000DA4  0F30               	addlw	48
  4526  000DA6  0101               	movlb	1	; () banked
  4527  000DA8  6F67               	movwf	(_time+6)& (0+255),b
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;Main_Screen.c: 112: time[7] = (second & 0x0f) + '0';
  4531  000DAA  506D               	movf	_second,w,c
  4532  000DAC  0B0F               	andlw	15
  4533  000DAE  0F30               	addlw	48
  4534  000DB0  0101               	movlb	1	; () banked
  4535  000DB2  6F68               	movwf	(_time+7)& (0+255),b
  4536                           
  4537                           ; BSR set to: 1
  4538                           ;Main_Screen.c: 114: date[0] = (month>>4) + '0';
  4539  000DB4  386C               	swapf	_month,w,c
  4540  000DB6  0B0F               	andlw	15
  4541  000DB8  0F30               	addlw	48
  4542  000DBA  0101               	movlb	1	; () banked
  4543  000DBC  6F3D               	movwf	_date& (0+255),b
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;Main_Screen.c: 115: date[1] = (month & 0x0f) + '0';
  4547  000DBE  506C               	movf	_month,w,c
  4548  000DC0  0B0F               	andlw	15
  4549  000DC2  0F30               	addlw	48
  4550  000DC4  0101               	movlb	1	; () banked
  4551  000DC6  6F3E               	movwf	(_date+1)& (0+255),b
  4552                           
  4553                           ; BSR set to: 1
  4554                           ;Main_Screen.c: 116: date[3] = (day>>4) + '0';
  4555  000DC8  3867               	swapf	_day,w,c
  4556  000DCA  0B0F               	andlw	15
  4557  000DCC  0F30               	addlw	48
  4558  000DCE  0101               	movlb	1	; () banked
  4559  000DD0  6F40               	movwf	(_date+3)& (0+255),b
  4560                           
  4561                           ; BSR set to: 1
  4562                           ;Main_Screen.c: 117: date[4] = (day & 0x0F) + '0';
  4563  000DD2  5067               	movf	_day,w,c
  4564  000DD4  0B0F               	andlw	15
  4565  000DD6  0F30               	addlw	48
  4566  000DD8  0101               	movlb	1	; () banked
  4567  000DDA  6F41               	movwf	(_date+4)& (0+255),b
  4568                           
  4569                           ; BSR set to: 1
  4570                           ;Main_Screen.c: 118: date[6] = (year>>4) + '0';
  4571  000DDC  0100               	movlb	0	; () banked
  4572  000DDE  39B4               	swapf	_year& (0+255),w,b
  4573  000DE0  0B0F               	andlw	15
  4574  000DE2  0F30               	addlw	48
  4575  000DE4  0101               	movlb	1	; () banked
  4576  000DE6  6F43               	movwf	(_date+6)& (0+255),b
  4577                           
  4578                           ; BSR set to: 1
  4579                           ;Main_Screen.c: 119: date[7] = (year & 0x0F) + '0';
  4580  000DE8  0100               	movlb	0	; () banked
  4581  000DEA  51B4               	movf	_year& (0+255),w,b
  4582  000DEC  0B0F               	andlw	15
  4583  000DEE  0F30               	addlw	48
  4584  000DF0  0101               	movlb	1	; () banked
  4585  000DF2  6F44               	movwf	(_date+7)& (0+255),b
  4586                           
  4587                           ; BSR set to: 1
  4588                           ;Main_Screen.c: 120: alarm_time[0] = (alarm_hour>>4) + '0';
  4589  000DF4  3864               	swapf	_alarm_hour,w,c
  4590  000DF6  0B0F               	andlw	15
  4591  000DF8  0F30               	addlw	48
  4592  000DFA  0101               	movlb	1	; () banked
  4593  000DFC  6F34               	movwf	_alarm_time& (0+255),b
  4594                           
  4595                           ; BSR set to: 1
  4596                           ;Main_Screen.c: 121: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  4597  000DFE  5064               	movf	_alarm_hour,w,c
  4598  000E00  0B0F               	andlw	15
  4599  000E02  0F30               	addlw	48
  4600  000E04  0101               	movlb	1	; () banked
  4601  000E06  6F35               	movwf	(_alarm_time+1)& (0+255),b
  4602                           
  4603                           ; BSR set to: 1
  4604                           ;Main_Screen.c: 122: alarm_time[3] = (alarm_minute>>4) + '0';
  4605  000E08  3865               	swapf	_alarm_minute,w,c
  4606  000E0A  0B0F               	andlw	15
  4607  000E0C  0F30               	addlw	48
  4608  000E0E  0101               	movlb	1	; () banked
  4609  000E10  6F37               	movwf	(_alarm_time+3)& (0+255),b
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;Main_Screen.c: 123: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  4613  000E12  5065               	movf	_alarm_minute,w,c
  4614  000E14  0B0F               	andlw	15
  4615  000E16  0F30               	addlw	48
  4616  000E18  0101               	movlb	1	; () banked
  4617  000E1A  6F38               	movwf	(_alarm_time+4)& (0+255),b
  4618                           
  4619                           ; BSR set to: 1
  4620                           ;Main_Screen.c: 124: alarm_time[6] = (alarm_second>>4) + '0';
  4621  000E1C  3866               	swapf	_alarm_second,w,c
  4622  000E1E  0B0F               	andlw	15
  4623  000E20  0F30               	addlw	48
  4624  000E22  0101               	movlb	1	; () banked
  4625  000E24  6F3A               	movwf	(_alarm_time+6)& (0+255),b
  4626                           
  4627                           ; BSR set to: 1
  4628                           ;Main_Screen.c: 125: alarm_time[7] = (alarm_second & 0x0f)+ '0';
  4629  000E26  5066               	movf	_alarm_second,w,c
  4630  000E28  0B0F               	andlw	15
  4631  000E2A  0F30               	addlw	48
  4632  000E2C  0101               	movlb	1	; () banked
  4633  000E2E  6F3B               	movwf	(_alarm_time+7)& (0+255),b
  4634                           
  4635                           ; BSR set to: 1
  4636                           ;Main_Screen.c: 127: if (ALARMEN == 1)
  4637  000E30  0100               	movlb	0	; () banked
  4638  000E32  0587               	decf	_ALARMEN& (0+255),w,b
  4639  000E34  0100               	movlb	0	; () banked
  4640  000E36  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4641  000E38  A4D8               	btfss	status,2,c
  4642  000E3A  D00B               	goto	l10554
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;Main_Screen.c: 128: {
  4646                           ;Main_Screen.c: 129: strcpy(Alarm_SW_Txt, "ON ");
  4647  000E3C  0EC7               	movlw	low _Alarm_SW_Txt
  4648  000E3E  6E11               	movwf	strcpy@to,c
  4649  000E40  0E00               	movlw	high _Alarm_SW_Txt
  4650  000E42  6E12               	movwf	strcpy@to+1,c
  4651  000E44  0EE9               	movlw	low STR_20
  4652  000E46  6E13               	movwf	strcpy@from,c
  4653  000E48  0EFF               	movlw	high STR_20
  4654  000E4A  6E14               	movwf	strcpy@from+1,c
  4655  000E4C  ECB4  F025         	call	_strcpy	;wreg free
  4656                           
  4657                           ;Main_Screen.c: 130: }
  4658  000E50  D00B               	goto	l10556
  4659  000E52                     l10554:
  4660                           
  4661                           ;Main_Screen.c: 131: else
  4662                           ;Main_Screen.c: 132: {
  4663                           ;Main_Screen.c: 133: strcpy(Alarm_SW_Txt, "OFF");
  4664  000E52  0EC7               	movlw	low _Alarm_SW_Txt
  4665  000E54  6E11               	movwf	strcpy@to,c
  4666  000E56  0E00               	movlw	high _Alarm_SW_Txt
  4667  000E58  6E12               	movwf	strcpy@to+1,c
  4668  000E5A  0EED               	movlw	low STR_21
  4669  000E5C  6E13               	movwf	strcpy@from,c
  4670  000E5E  0EFF               	movlw	high STR_21
  4671  000E60  6E14               	movwf	strcpy@from+1,c
  4672  000E62  ECB4  F025         	call	_strcpy	;wreg free
  4673  000E66  D000               	goto	l10556
  4674  000E68                     l10556:
  4675                           
  4676                           ;Main_Screen.c: 134: }
  4677                           ;Main_Screen.c: 136: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  4678  000E68  C0B5  F017         	movff	_fan_set_temp,___awdiv@dividend
  4679  000E6C  6A18               	clrf	___awdiv@dividend+1,c
  4680  000E6E  0E00               	movlw	0
  4681  000E70  6E1A               	movwf	___awdiv@divisor+1,c
  4682  000E72  0E64               	movlw	100
  4683  000E74  6E19               	movwf	___awdiv@divisor,c
  4684  000E76  ECD0  F01E         	call	___awdiv	;wreg free
  4685  000E7A  5017               	movf	?___awdiv,w,c
  4686  000E7C  0F30               	addlw	48
  4687  000E7E  0100               	movlb	0	; () banked
  4688  000E80  6FB8               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;Main_Screen.c: 137: Fan_Set_Temp_Txt[1] = ((fan_set_temp/10)%10)+ '0';
  4692  000E82  0E00               	movlw	0
  4693  000E84  6E1A               	movwf	___awdiv@divisor+1,c
  4694  000E86  0E0A               	movlw	10
  4695  000E88  6E19               	movwf	___awdiv@divisor,c
  4696  000E8A  C0B5  F017         	movff	_fan_set_temp,___awdiv@dividend
  4697  000E8E  6A18               	clrf	___awdiv@dividend+1,c
  4698  000E90  ECD0  F01E         	call	___awdiv	;wreg free
  4699  000E94  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4700  000E98  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4701  000E9C  0E00               	movlw	0
  4702  000E9E  6E40               	movwf	___awmod@divisor+1,c
  4703  000EA0  0E0A               	movlw	10
  4704  000EA2  6E3F               	movwf	___awmod@divisor,c
  4705  000EA4  EC08  F021         	call	___awmod	;wreg free
  4706  000EA8  503D               	movf	?___awmod,w,c
  4707  000EAA  0F30               	addlw	48
  4708  000EAC  0100               	movlb	0	; () banked
  4709  000EAE  6FB9               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;Main_Screen.c: 138: Fan_Set_Temp_Txt[2] = (fan_set_temp%10)+ '0';
  4713  000EB0  C0B5  F03D         	movff	_fan_set_temp,___awmod@dividend
  4714  000EB4  6A3E               	clrf	___awmod@dividend+1,c
  4715  000EB6  0E00               	movlw	0
  4716  000EB8  6E40               	movwf	___awmod@divisor+1,c
  4717  000EBA  0E0A               	movlw	10
  4718  000EBC  6E3F               	movwf	___awmod@divisor,c
  4719  000EBE  EC08  F021         	call	___awmod	;wreg free
  4720  000EC2  503D               	movf	?___awmod,w,c
  4721  000EC4  0F30               	addlw	48
  4722  000EC6  0100               	movlb	0	; () banked
  4723  000EC8  6FBA               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;Main_Screen.c: 140: if (FAN == 1)
  4727  000ECA  0100               	movlb	0	; () banked
  4728  000ECC  059B               	decf	_FAN& (0+255),w,b
  4729  000ECE  A4D8               	btfss	status,2,c
  4730  000ED0  D00B               	goto	l10566
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;Main_Screen.c: 141: {
  4734                           ;Main_Screen.c: 142: strcpy(Fan_SW_Txt, "ON ");
  4735  000ED2  0ECF               	movlw	low _Fan_SW_Txt
  4736  000ED4  6E11               	movwf	strcpy@to,c
  4737  000ED6  0E00               	movlw	high _Fan_SW_Txt
  4738  000ED8  6E12               	movwf	strcpy@to+1,c
  4739  000EDA  0EE9               	movlw	low STR_20
  4740  000EDC  6E13               	movwf	strcpy@from,c
  4741  000EDE  0EFF               	movlw	high STR_20
  4742  000EE0  6E14               	movwf	strcpy@from+1,c
  4743  000EE2  ECB4  F025         	call	_strcpy	;wreg free
  4744                           
  4745                           ;Main_Screen.c: 143: }
  4746  000EE6  D00B               	goto	l10568
  4747  000EE8                     l10566:
  4748                           
  4749                           ;Main_Screen.c: 144: else
  4750                           ;Main_Screen.c: 145: {
  4751                           ;Main_Screen.c: 146: strcpy(Fan_SW_Txt, "OFF");
  4752  000EE8  0ECF               	movlw	low _Fan_SW_Txt
  4753  000EEA  6E11               	movwf	strcpy@to,c
  4754  000EEC  0E00               	movlw	high _Fan_SW_Txt
  4755  000EEE  6E12               	movwf	strcpy@to+1,c
  4756  000EF0  0EED               	movlw	low STR_21
  4757  000EF2  6E13               	movwf	strcpy@from,c
  4758  000EF4  0EFF               	movlw	high STR_21
  4759  000EF6  6E14               	movwf	strcpy@from+1,c
  4760  000EF8  ECB4  F025         	call	_strcpy	;wreg free
  4761  000EFC  D000               	goto	l10568
  4762  000EFE                     l10568:
  4763                           
  4764                           ;Main_Screen.c: 147: }
  4765                           ;Main_Screen.c: 149: if (PORTBbits.RB5 == 0) RTC_ALARM_Txt[0] = '1';
  4766  000EFE  BA81               	btfsc	3969,5,c	;volatile
  4767  000F00  D002               	goto	l10572
  4768  000F02  0E31               	movlw	49
  4769  000F04  D001               	goto	L5
  4770  000F06                     l10572:
  4771                           
  4772                           ;Main_Screen.c: 150: else RTC_ALARM_Txt[0] = '0';
  4773  000F06  0E30               	movlw	48
  4774  000F08                     L5:
  4775  000F08  0100               	movlb	0	; () banked
  4776  000F0A  6FDB               	movwf	_RTC_ALARM_Txt& (0+255),b
  4777  000F0C  D000               	goto	l10574
  4778  000F0E                     l10574:
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;Main_Screen.c: 153: DC_Txt[0] = duty_cycle/100 + '0';
  4782  000F0E  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  4783  000F12  6A18               	clrf	___awdiv@dividend+1,c
  4784  000F14  0E00               	movlw	0
  4785  000F16  6E1A               	movwf	___awdiv@divisor+1,c
  4786  000F18  0E64               	movlw	100
  4787  000F1A  6E19               	movwf	___awdiv@divisor,c
  4788  000F1C  ECD0  F01E         	call	___awdiv	;wreg free
  4789  000F20  5017               	movf	?___awdiv,w,c
  4790  000F22  0F30               	addlw	48
  4791  000F24  0100               	movlb	0	; () banked
  4792  000F26  6FCB               	movwf	_DC_Txt& (0+255),b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;Main_Screen.c: 155: DC_Txt[1] = (duty_cycle/10) % 10 + '0';
  4796  000F28  0E00               	movlw	0
  4797  000F2A  6E1A               	movwf	___awdiv@divisor+1,c
  4798  000F2C  0E0A               	movlw	10
  4799  000F2E  6E19               	movwf	___awdiv@divisor,c
  4800  000F30  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  4801  000F34  6A18               	clrf	___awdiv@dividend+1,c
  4802  000F36  ECD0  F01E         	call	___awdiv	;wreg free
  4803  000F3A  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4804  000F3E  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4805  000F42  0E00               	movlw	0
  4806  000F44  6E40               	movwf	___awmod@divisor+1,c
  4807  000F46  0E0A               	movlw	10
  4808  000F48  6E3F               	movwf	___awmod@divisor,c
  4809  000F4A  EC08  F021         	call	___awmod	;wreg free
  4810  000F4E  503D               	movf	?___awmod,w,c
  4811  000F50  0F30               	addlw	48
  4812  000F52  0100               	movlb	0	; () banked
  4813  000F54  6FCC               	movwf	(_DC_Txt+1)& (0+255),b
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;Main_Screen.c: 156: DC_Txt[2] = duty_cycle % 10 + '0';
  4817  000F56  C068  F03D         	movff	_duty_cycle,___awmod@dividend
  4818  000F5A  6A3E               	clrf	___awmod@dividend+1,c
  4819  000F5C  0E00               	movlw	0
  4820  000F5E  6E40               	movwf	___awmod@divisor+1,c
  4821  000F60  0E0A               	movlw	10
  4822  000F62  6E3F               	movwf	___awmod@divisor,c
  4823  000F64  EC08  F021         	call	___awmod	;wreg free
  4824  000F68  503D               	movf	?___awmod,w,c
  4825  000F6A  0F30               	addlw	48
  4826  000F6C  0100               	movlb	0	; () banked
  4827  000F6E  6FCD               	movwf	(_DC_Txt+2)& (0+255),b
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;Main_Screen.c: 158: Volt_Txt[0] = ((int) volt ) + '0';
  4831  000F70  C084  F02E         	movff	_volt,___fttol@f1
  4832  000F74  C085  F02F         	movff	_volt+1,___fttol@f1+1
  4833  000F78  C086  F030         	movff	_volt+2,___fttol@f1+2
  4834  000F7C  ECC7  F019         	call	___fttol	;wreg free
  4835  000F80  502E               	movf	?___fttol,w,c
  4836  000F82  0F30               	addlw	48
  4837  000F84  0101               	movlb	1	; () banked
  4838  000F86  6F6A               	movwf	_Volt_Txt& (0+255),b
  4839                           
  4840                           ; BSR set to: 1
  4841                           ;Main_Screen.c: 159: Volt_Txt[2] = ((int) (volt*10) %10)+ '0';
  4842  000F88  0E00               	movlw	0
  4843  000F8A  6E22               	movwf	___ftmul@f2,c
  4844  000F8C  0E20               	movlw	32
  4845  000F8E  6E23               	movwf	___ftmul@f2+1,c
  4846  000F90  0E41               	movlw	65
  4847  000F92  6E24               	movwf	___ftmul@f2+2,c
  4848  000F94  C084  F01F         	movff	_volt,___ftmul@f1
  4849  000F98  C085  F020         	movff	_volt+1,___ftmul@f1+1
  4850  000F9C  C086  F021         	movff	_volt+2,___ftmul@f1+2
  4851  000FA0  ECE7  F017         	call	___ftmul	;wreg free
  4852  000FA4  C01F  F02E         	movff	?___ftmul,___fttol@f1
  4853  000FA8  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  4854  000FAC  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  4855  000FB0  ECC7  F019         	call	___fttol	;wreg free
  4856  000FB4  C02E  F03D         	movff	?___fttol,___awmod@dividend
  4857  000FB8  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  4858  000FBC  0E00               	movlw	0
  4859  000FBE  6E40               	movwf	___awmod@divisor+1,c
  4860  000FC0  0E0A               	movlw	10
  4861  000FC2  6E3F               	movwf	___awmod@divisor,c
  4862  000FC4  EC08  F021         	call	___awmod	;wreg free
  4863  000FC8  503D               	movf	?___awmod,w,c
  4864  000FCA  0F30               	addlw	48
  4865  000FCC  0101               	movlb	1	; () banked
  4866  000FCE  6F6C               	movwf	(_Volt_Txt+2)& (0+255),b
  4867                           
  4868                           ; BSR set to: 1
  4869                           ;Main_Screen.c: 160: Volt_Txt[3] = ((int) (volt*100) %10) +'0';
  4870  000FD0  0E00               	movlw	0
  4871  000FD2  6E22               	movwf	___ftmul@f2,c
  4872  000FD4  0EC8               	movlw	200
  4873  000FD6  6E23               	movwf	___ftmul@f2+1,c
  4874  000FD8  0E42               	movlw	66
  4875  000FDA  6E24               	movwf	___ftmul@f2+2,c
  4876  000FDC  C084  F01F         	movff	_volt,___ftmul@f1
  4877  000FE0  C085  F020         	movff	_volt+1,___ftmul@f1+1
  4878  000FE4  C086  F021         	movff	_volt+2,___ftmul@f1+2
  4879  000FE8  ECE7  F017         	call	___ftmul	;wreg free
  4880  000FEC  C01F  F02E         	movff	?___ftmul,___fttol@f1
  4881  000FF0  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  4882  000FF4  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  4883  000FF8  ECC7  F019         	call	___fttol	;wreg free
  4884  000FFC  C02E  F03D         	movff	?___fttol,___awmod@dividend
  4885  001000  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  4886  001004  0E00               	movlw	0
  4887  001006  6E40               	movwf	___awmod@divisor+1,c
  4888  001008  0E0A               	movlw	10
  4889  00100A  6E3F               	movwf	___awmod@divisor,c
  4890  00100C  EC08  F021         	call	___awmod	;wreg free
  4891  001010  503D               	movf	?___awmod,w,c
  4892  001012  0F30               	addlw	48
  4893  001014  0101               	movlb	1	; () banked
  4894  001016  6F6D               	movwf	(_Volt_Txt+3)& (0+255),b
  4895                           
  4896                           ; BSR set to: 1
  4897                           ;Main_Screen.c: 162: RPM_Txt[0] = rpm/1000 + '0';
  4898  001018  C097  F017         	movff	_rpm,___awdiv@dividend
  4899  00101C  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  4900  001020  0E03               	movlw	3
  4901  001022  6E1A               	movwf	___awdiv@divisor+1,c
  4902  001024  0EE8               	movlw	232
  4903  001026  6E19               	movwf	___awdiv@divisor,c
  4904  001028  ECD0  F01E         	call	___awdiv	;wreg free
  4905  00102C  5017               	movf	?___awdiv,w,c
  4906  00102E  0F30               	addlw	48
  4907  001030  0100               	movlb	0	; () banked
  4908  001032  6FBD               	movwf	_RPM_Txt& (0+255),b
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;Main_Screen.c: 164: RPM_Txt[1] = ((rpm / 100) % 10) + '0';
  4912  001034  0E00               	movlw	0
  4913  001036  6E1A               	movwf	___awdiv@divisor+1,c
  4914  001038  0E64               	movlw	100
  4915  00103A  6E19               	movwf	___awdiv@divisor,c
  4916  00103C  C097  F017         	movff	_rpm,___awdiv@dividend
  4917  001040  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  4918  001044  ECD0  F01E         	call	___awdiv	;wreg free
  4919  001048  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4920  00104C  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4921  001050  0E00               	movlw	0
  4922  001052  6E40               	movwf	___awmod@divisor+1,c
  4923  001054  0E0A               	movlw	10
  4924  001056  6E3F               	movwf	___awmod@divisor,c
  4925  001058  EC08  F021         	call	___awmod	;wreg free
  4926  00105C  503D               	movf	?___awmod,w,c
  4927  00105E  0F30               	addlw	48
  4928  001060  0100               	movlb	0	; () banked
  4929  001062  6FBE               	movwf	(_RPM_Txt+1)& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;Main_Screen.c: 165: RPM_Txt[2] = ((rpm / 10) % 10) + '0';
  4933  001064  0E00               	movlw	0
  4934  001066  6E1A               	movwf	___awdiv@divisor+1,c
  4935  001068  0E0A               	movlw	10
  4936  00106A  6E19               	movwf	___awdiv@divisor,c
  4937  00106C  C097  F017         	movff	_rpm,___awdiv@dividend
  4938  001070  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  4939  001074  ECD0  F01E         	call	___awdiv	;wreg free
  4940  001078  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4941  00107C  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4942  001080  0E00               	movlw	0
  4943  001082  6E40               	movwf	___awmod@divisor+1,c
  4944  001084  0E0A               	movlw	10
  4945  001086  6E3F               	movwf	___awmod@divisor,c
  4946  001088  EC08  F021         	call	___awmod	;wreg free
  4947  00108C  503D               	movf	?___awmod,w,c
  4948  00108E  0F30               	addlw	48
  4949  001090  0100               	movlb	0	; () banked
  4950  001092  6FBF               	movwf	(_RPM_Txt+2)& (0+255),b
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;Main_Screen.c: 166: RPM_Txt[3] = (rpm % 10 ) + '0';
  4954  001094  C097  F03D         	movff	_rpm,___awmod@dividend
  4955  001098  C098  F03E         	movff	_rpm+1,___awmod@dividend+1
  4956  00109C  0E00               	movlw	0
  4957  00109E  6E40               	movwf	___awmod@divisor+1,c
  4958  0010A0  0E0A               	movlw	10
  4959  0010A2  6E3F               	movwf	___awmod@divisor,c
  4960  0010A4  EC08  F021         	call	___awmod	;wreg free
  4961  0010A8  503D               	movf	?___awmod,w,c
  4962  0010AA  0F30               	addlw	48
  4963  0010AC  0100               	movlb	0	; () banked
  4964  0010AE  6FC0               	movwf	(_RPM_Txt+3)& (0+255),b
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;Main_Screen.c: 168: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4968  0010B0  0E17               	movlw	23
  4969  0010B2  6E39               	movwf	drawtext@y,c
  4970  0010B4  0ED3               	movlw	low _tempC
  4971  0010B6  6E3A               	movwf	drawtext@_text,c
  4972  0010B8  0E00               	movlw	high _tempC
  4973  0010BA  6E3B               	movwf	drawtext@_text+1,c
  4974  0010BC  0EFF               	movlw	255
  4975  0010BE  6E3D               	movwf	drawtext@color+1,c
  4976  0010C0  0EE0               	movlw	224
  4977  0010C2  6E3C               	movwf	drawtext@color,c
  4978  0010C4  0E00               	movlw	0
  4979  0010C6  6E3F               	movwf	drawtext@bg+1,c
  4980  0010C8  0E00               	movlw	0
  4981  0010CA  6E3E               	movwf	drawtext@bg,c
  4982  0010CC  0E02               	movlw	2
  4983  0010CE  6E40               	movwf	drawtext@size,c
  4984  0010D0  0E01               	movlw	1
  4985  0010D2  ECAB  F01A         	call	_drawtext
  4986                           
  4987                           ;Main_Screen.c: 169: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4988  0010D6  0E17               	movlw	23
  4989  0010D8  6E39               	movwf	drawtext@y,c
  4990  0010DA  0ED7               	movlw	low _tempF
  4991  0010DC  6E3A               	movwf	drawtext@_text,c
  4992  0010DE  0E00               	movlw	high _tempF
  4993  0010E0  6E3B               	movwf	drawtext@_text+1,c
  4994  0010E2  0EFF               	movlw	255
  4995  0010E4  6E3D               	movwf	drawtext@color+1,c
  4996  0010E6  0EE0               	movlw	224
  4997  0010E8  6E3C               	movwf	drawtext@color,c
  4998  0010EA  0E00               	movlw	0
  4999  0010EC  6E3F               	movwf	drawtext@bg+1,c
  5000  0010EE  0E00               	movlw	0
  5001  0010F0  6E3E               	movwf	drawtext@bg,c
  5002  0010F2  0E02               	movlw	2
  5003  0010F4  6E40               	movwf	drawtext@size,c
  5004  0010F6  0E46               	movlw	70
  5005  0010F8  ECAB  F01A         	call	_drawtext
  5006                           
  5007                           ;Main_Screen.c: 170: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  5008  0010FC  0E34               	movlw	52
  5009  0010FE  6E39               	movwf	drawtext@y,c
  5010  001100  0E61               	movlw	low _time
  5011  001102  6E3A               	movwf	drawtext@_text,c
  5012  001104  0E01               	movlw	high _time
  5013  001106  6E3B               	movwf	drawtext@_text+1,c
  5014  001108  0E07               	movlw	7
  5015  00110A  6E3D               	movwf	drawtext@color+1,c
  5016  00110C  683C               	setf	drawtext@color,c
  5017  00110E  0E00               	movlw	0
  5018  001110  6E3F               	movwf	drawtext@bg+1,c
  5019  001112  0E00               	movlw	0
  5020  001114  6E3E               	movwf	drawtext@bg,c
  5021  001116  0E02               	movlw	2
  5022  001118  6E40               	movwf	drawtext@size,c
  5023  00111A  0E0F               	movlw	15
  5024  00111C  ECAB  F01A         	call	_drawtext
  5025                           
  5026                           ;Main_Screen.c: 171: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  5027  001120  0E52               	movlw	82
  5028  001122  6E39               	movwf	drawtext@y,c
  5029  001124  0E3D               	movlw	low _date
  5030  001126  6E3A               	movwf	drawtext@_text,c
  5031  001128  0E01               	movlw	high _date
  5032  00112A  6E3B               	movwf	drawtext@_text+1,c
  5033  00112C  0E07               	movlw	7
  5034  00112E  6E3D               	movwf	drawtext@color+1,c
  5035  001130  0EE0               	movlw	224
  5036  001132  6E3C               	movwf	drawtext@color,c
  5037  001134  0E00               	movlw	0
  5038  001136  6E3F               	movwf	drawtext@bg+1,c
  5039  001138  0E00               	movlw	0
  5040  00113A  6E3E               	movwf	drawtext@bg,c
  5041  00113C  0E02               	movlw	2
  5042  00113E  6E40               	movwf	drawtext@size,c
  5043  001140  0E0F               	movlw	15
  5044  001142  ECAB  F01A         	call	_drawtext
  5045                           
  5046                           ;Main_Screen.c: 172: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  5047  001146  0E6E               	movlw	110
  5048  001148  6E39               	movwf	drawtext@y,c
  5049  00114A  0E34               	movlw	low _alarm_time
  5050  00114C  6E3A               	movwf	drawtext@_text,c
  5051  00114E  0E01               	movlw	high _alarm_time
  5052  001150  6E3B               	movwf	drawtext@_text+1,c
  5053  001152  0E07               	movlw	7
  5054  001154  6E3D               	movwf	drawtext@color+1,c
  5055  001156  683C               	setf	drawtext@color,c
  5056  001158  0E00               	movlw	0
  5057  00115A  6E3F               	movwf	drawtext@bg+1,c
  5058  00115C  0E00               	movlw	0
  5059  00115E  6E3E               	movwf	drawtext@bg,c
  5060  001160  0E01               	movlw	1
  5061  001162  6E40               	movwf	drawtext@size,c
  5062  001164  0E0A               	movlw	10
  5063  001166  ECAB  F01A         	call	_drawtext
  5064                           
  5065                           ;Main_Screen.c: 173: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  5066  00116A  0E6E               	movlw	110
  5067  00116C  6E39               	movwf	drawtext@y,c
  5068  00116E  0EC7               	movlw	low _Alarm_SW_Txt
  5069  001170  6E3A               	movwf	drawtext@_text,c
  5070  001172  0E00               	movlw	high _Alarm_SW_Txt
  5071  001174  6E3B               	movwf	drawtext@_text+1,c
  5072  001176  0E07               	movlw	7
  5073  001178  6E3D               	movwf	drawtext@color+1,c
  5074  00117A  683C               	setf	drawtext@color,c
  5075  00117C  0E00               	movlw	0
  5076  00117E  6E3F               	movwf	drawtext@bg+1,c
  5077  001180  0E00               	movlw	0
  5078  001182  6E3E               	movwf	drawtext@bg,c
  5079  001184  0E01               	movlw	1
  5080  001186  6E40               	movwf	drawtext@size,c
  5081  001188  0E5F               	movlw	95
  5082  00118A  ECAB  F01A         	call	_drawtext
  5083                           
  5084                           ;Main_Screen.c: 174: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  5085  00118E  0E82               	movlw	130
  5086  001190  6E39               	movwf	drawtext@y,c
  5087  001192  0EB8               	movlw	low _Fan_Set_Temp_Txt
  5088  001194  6E3A               	movwf	drawtext@_text,c
  5089  001196  0E00               	movlw	high _Fan_Set_Temp_Txt
  5090  001198  6E3B               	movwf	drawtext@_text+1,c
  5091  00119A  0EF8               	movlw	248
  5092  00119C  6E3D               	movwf	drawtext@color+1,c
  5093  00119E  0E00               	movlw	0
  5094  0011A0  6E3C               	movwf	drawtext@color,c
  5095  0011A2  0E00               	movlw	0
  5096  0011A4  6E3F               	movwf	drawtext@bg+1,c
  5097  0011A6  0E00               	movlw	0
  5098  0011A8  6E3E               	movwf	drawtext@bg,c
  5099  0011AA  0E01               	movlw	1
  5100  0011AC  6E40               	movwf	drawtext@size,c
  5101  0011AE  0E23               	movlw	35
  5102  0011B0  ECAB  F01A         	call	_drawtext
  5103                           
  5104                           ;Main_Screen.c: 175: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  5105  0011B4  0E82               	movlw	130
  5106  0011B6  6E39               	movwf	drawtext@y,c
  5107  0011B8  0ECF               	movlw	low _Fan_SW_Txt
  5108  0011BA  6E3A               	movwf	drawtext@_text,c
  5109  0011BC  0E00               	movlw	high _Fan_SW_Txt
  5110  0011BE  6E3B               	movwf	drawtext@_text+1,c
  5111  0011C0  0EF8               	movlw	248
  5112  0011C2  6E3D               	movwf	drawtext@color+1,c
  5113  0011C4  0E00               	movlw	0
  5114  0011C6  6E3C               	movwf	drawtext@color,c
  5115  0011C8  0E00               	movlw	0
  5116  0011CA  6E3F               	movwf	drawtext@bg+1,c
  5117  0011CC  0E00               	movlw	0
  5118  0011CE  6E3E               	movwf	drawtext@bg,c
  5119  0011D0  0E01               	movlw	1
  5120  0011D2  6E40               	movwf	drawtext@size,c
  5121  0011D4  0E5F               	movlw	95
  5122  0011D6  ECAB  F01A         	call	_drawtext
  5123                           
  5124                           ;Main_Screen.c: 176: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  5125  0011DA  0E96               	movlw	150
  5126  0011DC  6E39               	movwf	drawtext@y,c
  5127  0011DE  0ECB               	movlw	low _DC_Txt
  5128  0011E0  6E3A               	movwf	drawtext@_text,c
  5129  0011E2  0E00               	movlw	high _DC_Txt
  5130  0011E4  6E3B               	movwf	drawtext@_text+1,c
  5131  0011E6  0E07               	movlw	7
  5132  0011E8  6E3D               	movwf	drawtext@color+1,c
  5133  0011EA  0EE0               	movlw	224
  5134  0011EC  6E3C               	movwf	drawtext@color,c
  5135  0011EE  0E00               	movlw	0
  5136  0011F0  6E3F               	movwf	drawtext@bg+1,c
  5137  0011F2  0E00               	movlw	0
  5138  0011F4  6E3E               	movwf	drawtext@bg,c
  5139  0011F6  0E01               	movlw	1
  5140  0011F8  6E40               	movwf	drawtext@size,c
  5141  0011FA  0E0A               	movlw	10
  5142  0011FC  ECAB  F01A         	call	_drawtext
  5143                           
  5144                           ;Main_Screen.c: 177: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  5145  001200  0E96               	movlw	150
  5146  001202  6E39               	movwf	drawtext@y,c
  5147  001204  0EDB               	movlw	low _RTC_ALARM_Txt
  5148  001206  6E3A               	movwf	drawtext@_text,c
  5149  001208  0E00               	movlw	high _RTC_ALARM_Txt
  5150  00120A  6E3B               	movwf	drawtext@_text+1,c
  5151  00120C  0E07               	movlw	7
  5152  00120E  6E3D               	movwf	drawtext@color+1,c
  5153  001210  0EE0               	movlw	224
  5154  001212  6E3C               	movwf	drawtext@color,c
  5155  001214  0E00               	movlw	0
  5156  001216  6E3F               	movwf	drawtext@bg+1,c
  5157  001218  0E00               	movlw	0
  5158  00121A  6E3E               	movwf	drawtext@bg,c
  5159  00121C  0E01               	movlw	1
  5160  00121E  6E40               	movwf	drawtext@size,c
  5161  001220  0E23               	movlw	35
  5162  001222  ECAB  F01A         	call	_drawtext
  5163                           
  5164                           ;Main_Screen.c: 178: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  5165  001226  0E96               	movlw	150
  5166  001228  6E39               	movwf	drawtext@y,c
  5167  00122A  0E6A               	movlw	low _Volt_Txt
  5168  00122C  6E3A               	movwf	drawtext@_text,c
  5169  00122E  0E01               	movlw	high _Volt_Txt
  5170  001230  6E3B               	movwf	drawtext@_text+1,c
  5171  001232  0E07               	movlw	7
  5172  001234  6E3D               	movwf	drawtext@color+1,c
  5173  001236  0EE0               	movlw	224
  5174  001238  6E3C               	movwf	drawtext@color,c
  5175  00123A  0E00               	movlw	0
  5176  00123C  6E3F               	movwf	drawtext@bg+1,c
  5177  00123E  0E00               	movlw	0
  5178  001240  6E3E               	movwf	drawtext@bg,c
  5179  001242  0E01               	movlw	1
  5180  001244  6E40               	movwf	drawtext@size,c
  5181  001246  0E32               	movlw	50
  5182  001248  ECAB  F01A         	call	_drawtext
  5183                           
  5184                           ;Main_Screen.c: 179: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  5185  00124C  0E96               	movlw	150
  5186  00124E  6E39               	movwf	drawtext@y,c
  5187  001250  0EBD               	movlw	low _RPM_Txt
  5188  001252  6E3A               	movwf	drawtext@_text,c
  5189  001254  0E00               	movlw	high _RPM_Txt
  5190  001256  6E3B               	movwf	drawtext@_text+1,c
  5191  001258  0E07               	movlw	7
  5192  00125A  6E3D               	movwf	drawtext@color+1,c
  5193  00125C  0EE0               	movlw	224
  5194  00125E  6E3C               	movwf	drawtext@color,c
  5195  001260  0E00               	movlw	0
  5196  001262  6E3F               	movwf	drawtext@bg+1,c
  5197  001264  0E00               	movlw	0
  5198  001266  6E3E               	movwf	drawtext@bg,c
  5199  001268  0E01               	movlw	1
  5200  00126A  6E40               	movwf	drawtext@size,c
  5201  00126C  0E5D               	movlw	93
  5202  00126E  ECAB  F01A         	call	_drawtext
  5203  001272  0012               	return		;funcret
  5204  001274                     __end_of_Update_Screen:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           postinc0	equ	0xFEE
  5211                           wreg	equ	0xFE8
  5212                           postdec1	equ	0xFE5
  5213                           fsr1l	equ	0xFE1
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _Toggle_Fan_Monitor *****************
  5217 ;; Defined at:
  5218 ;;		line 43 in file "Fan_Support.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;		None               void
  5225 ;; Registers used:
  5226 ;;		wreg, status,2
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;Total ram usage:        0 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    2
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_main
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text14
  5247  004EE8                     __ptext14:
  5248                           	opt stack 0
  5249  004EE8                     _Toggle_Fan_Monitor:
  5250                           	opt stack 28
  5251                           
  5252                           ;Fan_Support.c: 48: if(FAN ==0)
  5253                           
  5254                           ;incstack = 0
  5255  004EE8  0100               	movlb	0	; () banked
  5256  004EEA  519B               	movf	_FAN& (0+255),w,b
  5257  004EEC  A4D8               	btfss	status,2,c
  5258  004EEE  D002               	goto	l7810
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;Fan_Support.c: 49: {
  5262                           ;Fan_Support.c: 50: FAN =1;
  5263  004EF0  0E01               	movlw	1
  5264  004EF2  D001               	goto	L6
  5265  004EF4                     l7810:
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;Fan_Support.c: 52: {
  5269                           ;Fan_Support.c: 53: FAN =0;
  5270  004EF4  0E00               	movlw	0
  5271  004EF6                     L6:
  5272  004EF6  0100               	movlb	0	; () banked
  5273  004EF8  6F9B               	movwf	_FAN& (0+255),b
  5274  004EFA  D000               	goto	l36
  5275  004EFC                     l36:
  5276                           
  5277                           ; BSR set to: 0
  5278  004EFC  0012               	return		;funcret
  5279  004EFE                     __end_of_Toggle_Fan_Monitor:
  5280                           	opt stack 0
  5281                           tblptru	equ	0xFF8
  5282                           tblptrh	equ	0xFF7
  5283                           tblptrl	equ	0xFF6
  5284                           tablat	equ	0xFF5
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1l	equ	0xFE1
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _Setup_Temp_Fan *****************
  5292 ;; Defined at:
  5293 ;;		line 24 in file "Setup_Fan_Temp.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  2  382[None  ] int 
  5300 ;; Registers used:
  5301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;Total ram usage:        2 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:   11
  5314 ;; This function calls:
  5315 ;;		_Decrease_Fan_Temp
  5316 ;;		_Do_Beep_Bad
  5317 ;;		_Do_Beep_Good
  5318 ;;		_Do_Save_New_Fan_Temp
  5319 ;;		_Exit_Setup_Fan_Temp
  5320 ;;		_Increase_Fan_Temp
  5321 ;;		_Initialize_Setup_Fan_Screen
  5322 ;;		_Update_Setup_Fan_Screen
  5323 ;;		_check_for_button_input
  5324 ;; This function is called by:
  5325 ;;		_main
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text15
  5330  003ECC                     __ptext15:
  5331                           	opt stack 0
  5332  003ECC                     _Setup_Temp_Fan:
  5333                           	opt stack 19
  5334                           
  5335                           ;Setup_Fan_Temp.c: 27: In_Fan_Temp_Setup = 1;
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;incstack = 0
  5339  003ECC  0E01               	movlw	1
  5340  003ECE  0100               	movlb	0	; () banked
  5341  003ED0  6F9F               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;Setup_Fan_Temp.c: 28: setup_fan_set_temp = fan_set_temp;
  5345  003ED2  C0B5  F0AF         	movff	_fan_set_temp,_setup_fan_set_temp
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;Setup_Fan_Temp.c: 29: Initialize_Setup_Fan_Screen();
  5349  003ED6  EC81  F01D         	call	_Initialize_Setup_Fan_Screen	;wreg free
  5350                           
  5351                           ;Setup_Fan_Temp.c: 30: Update_Setup_Fan_Screen();
  5352  003EDA  EC85  F01E         	call	_Update_Setup_Fan_Screen	;wreg free
  5353                           
  5354                           ;Setup_Fan_Temp.c: 32: while (In_Fan_Temp_Setup == 1)
  5355  003EDE  D03B               	goto	l10774
  5356  003EE0                     l10744:
  5357                           
  5358                           ;Setup_Fan_Temp.c: 33: {
  5359                           ;Setup_Fan_Temp.c: 34: if (check_for_button_input() == 1)
  5360  003EE0  0E01               	movlw	1
  5361  003EE2  0100               	movlb	0	; () banked
  5362  003EE4  6FF3               	movwf	??_Setup_Temp_Fan& (0+255),b
  5363  003EE6  0E00               	movlw	0
  5364  003EE8  0100               	movlb	0	; () banked
  5365  003EEA  6FF4               	movwf	(??_Setup_Temp_Fan+1)& (0+255),b
  5366  003EEC  ECB0  F01F         	call	_check_for_button_input	;wreg free
  5367  003EF0  0100               	movlb	0	; () banked
  5368  003EF2  19F3               	xorwf	??_Setup_Temp_Fan& (0+255),w,b
  5369  003EF4  11F4               	iorwf	(??_Setup_Temp_Fan+1)& (0+255),w,b
  5370  003EF6  A4D8               	btfss	status,2,c
  5371  003EF8  D02E               	goto	l10774
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;Setup_Fan_Temp.c: 35: {
  5375                           ;Setup_Fan_Temp.c: 36: nec_ok = 0;
  5376  003EFA  0E00               	movlw	0
  5377  003EFC  0100               	movlb	0	; () banked
  5378  003EFE  6F96               	movwf	(_nec_ok+1)& (0+255),b
  5379  003F00  0E00               	movlw	0
  5380  003F02  6F95               	movwf	_nec_ok& (0+255),b
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;Setup_Fan_Temp.c: 37: if (found >= 5 && found <= 8)
  5384  003F04  0E04               	movlw	4
  5385  003F06  6469               	cpfsgt	_found,c
  5386  003F08  D023               	goto	l10772
  5387                           
  5388                           ; BSR set to: 0
  5389  003F0A  0E09               	movlw	9
  5390  003F0C  6069               	cpfslt	_found,c
  5391  003F0E  D020               	goto	l10772
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;Setup_Fan_Temp.c: 38: {
  5395                           ;Setup_Fan_Temp.c: 39: Do_Beep_Good();
  5396  003F10  EC51  F027         	call	_Do_Beep_Good	;wreg free
  5397                           
  5398                           ;Setup_Fan_Temp.c: 41: if (found == 5) Do_Save_New_Fan_Temp();
  5399  003F14  0E05               	movlw	5
  5400  003F16  1869               	xorwf	_found,w,c
  5401  003F18  A4D8               	btfss	status,2,c
  5402  003F1A  D003               	goto	l10758
  5403  003F1C  EC8A  F027         	call	_Do_Save_New_Fan_Temp	;wreg free
  5404  003F20  D000               	goto	l10758
  5405  003F22                     l10758:
  5406                           
  5407                           ;Setup_Fan_Temp.c: 42: if (found == 6) Decrease_Fan_Temp();
  5408  003F22  0E06               	movlw	6
  5409  003F24  1869               	xorwf	_found,w,c
  5410  003F26  A4D8               	btfss	status,2,c
  5411  003F28  D003               	goto	l10762
  5412  003F2A  EC2B  F027         	call	_Decrease_Fan_Temp	;wreg free
  5413  003F2E  D000               	goto	l10762
  5414  003F30                     l10762:
  5415                           
  5416                           ;Setup_Fan_Temp.c: 43: if (found == 7) Increase_Fan_Temp();
  5417  003F30  0E07               	movlw	7
  5418  003F32  1869               	xorwf	_found,w,c
  5419  003F34  A4D8               	btfss	status,2,c
  5420  003F36  D003               	goto	l10766
  5421  003F38  EC1E  F027         	call	_Increase_Fan_Temp	;wreg free
  5422  003F3C  D000               	goto	l10766
  5423  003F3E                     l10766:
  5424                           
  5425                           ;Setup_Fan_Temp.c: 44: if (found == 8) Exit_Setup_Fan_Temp();
  5426  003F3E  0E08               	movlw	8
  5427  003F40  1869               	xorwf	_found,w,c
  5428  003F42  A4D8               	btfss	status,2,c
  5429  003F44  D003               	goto	l10770
  5430  003F46  ECF1  F027         	call	_Exit_Setup_Fan_Temp	;wreg free
  5431  003F4A  D000               	goto	l10770
  5432  003F4C                     l10770:
  5433                           
  5434                           ;Setup_Fan_Temp.c: 46: found = 0xff;
  5435  003F4C  6869               	setf	_found,c
  5436                           
  5437                           ;Setup_Fan_Temp.c: 47: }
  5438  003F4E  D003               	goto	l10774
  5439  003F50                     l10772:
  5440                           
  5441                           ;Setup_Fan_Temp.c: 48: else
  5442                           ;Setup_Fan_Temp.c: 49: {
  5443                           ;Setup_Fan_Temp.c: 50: Do_Beep_Bad();
  5444  003F50  EC5D  F027         	call	_Do_Beep_Bad	;wreg free
  5445  003F54  D000               	goto	l10774
  5446  003F56                     l10774:
  5447  003F56  0100               	movlb	0	; () banked
  5448  003F58  059F               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  5449  003F5A  B4D8               	btfsc	status,2,c
  5450  003F5C  D7C1               	goto	l10744
  5451                           
  5452                           ; BSR set to: 0
  5453                           
  5454                           ; BSR set to: 0
  5455  003F5E  0012               	return		;funcret
  5456  003F60                     __end_of_Setup_Temp_Fan:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           postinc0	equ	0xFEE
  5463                           wreg	equ	0xFE8
  5464                           postdec1	equ	0xFE5
  5465                           fsr1l	equ	0xFE1
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  5469 ;; Defined at:
  5470 ;;		line 92 in file "Setup_Fan_Temp.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;		None
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;		None               void
  5477 ;; Registers used:
  5478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;Total ram usage:        0 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    9
  5491 ;; This function calls:
  5492 ;;		_drawtext
  5493 ;;		_fillScreen
  5494 ;;		_strcpy
  5495 ;; This function is called by:
  5496 ;;		_Setup_Temp_Fan
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text16
  5501  003B02                     __ptext16:
  5502                           	opt stack 0
  5503  003B02                     _Initialize_Setup_Fan_Screen:
  5504                           	opt stack 20
  5505                           
  5506                           ;Setup_Fan_Temp.c: 94: fillScreen(0x0000);
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;incstack = 0
  5510  003B02  0E00               	movlw	0
  5511  003B04  6E25               	movwf	fillScreen@color+1,c
  5512  003B06  0E00               	movlw	0
  5513  003B08  6E24               	movwf	fillScreen@color,c
  5514  003B0A  EC10  F027         	call	_fillScreen	;wreg free
  5515                           
  5516                           ;Setup_Fan_Temp.c: 96: strcpy(txt, "ECE3301L Sp21 Final\0");
  5517  003B0E  C062  F011         	movff	_txt,strcpy@to
  5518  003B12  C063  F012         	movff	_txt+1,strcpy@to+1
  5519  003B16  0EFF               	movlw	low STR_6
  5520  003B18  6E13               	movwf	strcpy@from,c
  5521  003B1A  0EFE               	movlw	high STR_6
  5522  003B1C  6E14               	movwf	strcpy@from+1,c
  5523  003B1E  ECB4  F025         	call	_strcpy	;wreg free
  5524                           
  5525                           ;Setup_Fan_Temp.c: 97: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5526  003B22  0E01               	movlw	1
  5527  003B24  6E39               	movwf	drawtext@y,c
  5528  003B26  C062  F03A         	movff	_txt,drawtext@_text
  5529  003B2A  C063  F03B         	movff	_txt+1,drawtext@_text+1
  5530  003B2E  0EFF               	movlw	255
  5531  003B30  6E3D               	movwf	drawtext@color+1,c
  5532  003B32  683C               	setf	drawtext@color,c
  5533  003B34  0E00               	movlw	0
  5534  003B36  6E3F               	movwf	drawtext@bg+1,c
  5535  003B38  0E00               	movlw	0
  5536  003B3A  6E3E               	movwf	drawtext@bg,c
  5537  003B3C  0E01               	movlw	1
  5538  003B3E  6E40               	movwf	drawtext@size,c
  5539  003B40  0E01               	movlw	1
  5540  003B42  ECAB  F01A         	call	_drawtext
  5541                           
  5542                           ;Setup_Fan_Temp.c: 99: strcpy(txt, " Fan Setup\0");
  5543  003B46  C062  F011         	movff	_txt,strcpy@to
  5544  003B4A  C063  F012         	movff	_txt+1,strcpy@to+1
  5545  003B4E  0E96               	movlw	low STR_29
  5546  003B50  6E13               	movwf	strcpy@from,c
  5547  003B52  0EFF               	movlw	high STR_29
  5548  003B54  6E14               	movwf	strcpy@from+1,c
  5549  003B56  ECB4  F025         	call	_strcpy	;wreg free
  5550                           
  5551                           ;Setup_Fan_Temp.c: 100: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  5552  003B5A  0E1A               	movlw	26
  5553  003B5C  6E39               	movwf	drawtext@y,c
  5554  003B5E  C062  F03A         	movff	_txt,drawtext@_text
  5555  003B62  C063  F03B         	movff	_txt+1,drawtext@_text+1
  5556  003B66  0EFF               	movlw	255
  5557  003B68  6E3D               	movwf	drawtext@color+1,c
  5558  003B6A  0EE0               	movlw	224
  5559  003B6C  6E3C               	movwf	drawtext@color,c
  5560  003B6E  0E00               	movlw	0
  5561  003B70  6E3F               	movwf	drawtext@bg+1,c
  5562  003B72  0E00               	movlw	0
  5563  003B74  6E3E               	movwf	drawtext@bg,c
  5564  003B76  0E02               	movlw	2
  5565  003B78  6E40               	movwf	drawtext@size,c
  5566  003B7A  0E01               	movlw	1
  5567  003B7C  ECAB  F01A         	call	_drawtext
  5568                           
  5569                           ;Setup_Fan_Temp.c: 102: strcpy(txt, "  Set Fan Temp");
  5570  003B80  C062  F011         	movff	_txt,strcpy@to
  5571  003B84  C063  F012         	movff	_txt+1,strcpy@to+1
  5572  003B88  0E61               	movlw	low STR_30
  5573  003B8A  6E13               	movwf	strcpy@from,c
  5574  003B8C  0EFF               	movlw	high STR_30
  5575  003B8E  6E14               	movwf	strcpy@from+1,c
  5576  003B90  ECB4  F025         	call	_strcpy	;wreg free
  5577                           
  5578                           ;Setup_Fan_Temp.c: 103: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  5579  003B94  0E3C               	movlw	60
  5580  003B96  6E39               	movwf	drawtext@y,c
  5581  003B98  C062  F03A         	movff	_txt,drawtext@_text
  5582  003B9C  C063  F03B         	movff	_txt+1,drawtext@_text+1
  5583  003BA0  0E07               	movlw	7
  5584  003BA2  6E3D               	movwf	drawtext@color+1,c
  5585  003BA4  683C               	setf	drawtext@color,c
  5586  003BA6  0E00               	movlw	0
  5587  003BA8  6E3F               	movwf	drawtext@bg+1,c
  5588  003BAA  0E00               	movlw	0
  5589  003BAC  6E3E               	movwf	drawtext@bg,c
  5590  003BAE  0E01               	movlw	1
  5591  003BB0  6E40               	movwf	drawtext@size,c
  5592  003BB2  0E0F               	movlw	15
  5593  003BB4  ECAB  F01A         	call	_drawtext
  5594  003BB8  0012               	return		;funcret
  5595  003BBA                     __end_of_Initialize_Setup_Fan_Screen:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           postinc0	equ	0xFEE
  5602                           wreg	equ	0xFE8
  5603                           postdec1	equ	0xFE5
  5604                           fsr1l	equ	0xFE1
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _Increase_Fan_Temp *****************
  5608 ;; Defined at:
  5609 ;;		line 56 in file "Setup_Fan_Temp.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;		None
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;		None
  5614 ;; Return value:  Size  Location     Type
  5615 ;;		None               void
  5616 ;; Registers used:
  5617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;Total ram usage:        0 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:   10
  5630 ;; This function calls:
  5631 ;;		_Update_Setup_Fan_Screen
  5632 ;; This function is called by:
  5633 ;;		_Setup_Temp_Fan
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text17
  5638  004E3C                     __ptext17:
  5639                           	opt stack 0
  5640  004E3C                     _Increase_Fan_Temp:
  5641                           	opt stack 19
  5642                           
  5643                           ;Setup_Fan_Temp.c: 60: setup_fan_set_temp++;
  5644                           
  5645                           ;incstack = 0
  5646  004E3C  0100               	movlb	0	; () banked
  5647  004E3E  2BAF               	incf	_setup_fan_set_temp& (0+255),f,b
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;Setup_Fan_Temp.c: 61: if(setup_fan_set_temp >110) setup_fan_set_temp =110;
  5651  004E40  0E6E               	movlw	110
  5652  004E42  0100               	movlb	0	; () banked
  5653  004E44  65AF               	cpfsgt	_setup_fan_set_temp& (0+255),b
  5654  004E46  D004               	goto	l10246
  5655                           
  5656                           ; BSR set to: 0
  5657  004E48  0E6E               	movlw	110
  5658  004E4A  0100               	movlb	0	; () banked
  5659  004E4C  6FAF               	movwf	_setup_fan_set_temp& (0+255),b
  5660  004E4E  D000               	goto	l10246
  5661  004E50                     l10246:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;Setup_Fan_Temp.c: 62: Update_Setup_Fan_Screen();
  5665  004E50  EC85  F01E         	call	_Update_Setup_Fan_Screen	;wreg free
  5666  004E54  0012               	return		;funcret
  5667  004E56                     __end_of_Increase_Fan_Temp:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           postinc0	equ	0xFEE
  5674                           wreg	equ	0xFE8
  5675                           postdec1	equ	0xFE5
  5676                           fsr1l	equ	0xFE1
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _Exit_Setup_Fan_Temp *****************
  5680 ;; Defined at:
  5681 ;;		line 77 in file "Setup_Fan_Temp.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;		None               void
  5688 ;; Registers used:
  5689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;Total ram usage:        0 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:   10
  5702 ;; This function calls:
  5703 ;;		_DS3231_Read_Time
  5704 ;;		_Initialize_Screen
  5705 ;; This function is called by:
  5706 ;;		_Setup_Temp_Fan
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text18
  5711  004FE2                     __ptext18:
  5712                           	opt stack 0
  5713  004FE2                     _Exit_Setup_Fan_Temp:
  5714                           	opt stack 19
  5715                           
  5716                           ;Setup_Fan_Temp.c: 79: DS3231_Read_Time();
  5717                           
  5718                           ;incstack = 0
  5719  004FE2  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  5720                           
  5721                           ;Setup_Fan_Temp.c: 80: Initialize_Screen();
  5722  004FE6  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  5723                           
  5724                           ;Setup_Fan_Temp.c: 81: In_Fan_Temp_Setup = 0;
  5725  004FEA  0E00               	movlw	0
  5726  004FEC  0100               	movlb	0	; () banked
  5727  004FEE  6F9F               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5728                           
  5729                           ; BSR set to: 0
  5730  004FF0  0012               	return		;funcret
  5731  004FF2                     __end_of_Exit_Setup_Fan_Temp:
  5732                           	opt stack 0
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           fsr1l	equ	0xFE1
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function _Do_Save_New_Fan_Temp *****************
  5744 ;; Defined at:
  5745 ;;		line 84 in file "Setup_Fan_Temp.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;		None
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;		None
  5750 ;; Return value:  Size  Location     Type
  5751 ;;		None               void
  5752 ;; Registers used:
  5753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;Total ram usage:        0 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:   10
  5766 ;; This function calls:
  5767 ;;		_DS3231_Read_Time
  5768 ;;		_Initialize_Screen
  5769 ;; This function is called by:
  5770 ;;		_Setup_Temp_Fan
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text19
  5775  004F14                     __ptext19:
  5776                           	opt stack 0
  5777  004F14                     _Do_Save_New_Fan_Temp:
  5778                           	opt stack 19
  5779                           
  5780                           ;Setup_Fan_Temp.c: 86: fan_set_temp = setup_fan_set_temp;
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;incstack = 0
  5784  004F14  C0AF  F0B5         	movff	_setup_fan_set_temp,_fan_set_temp
  5785                           
  5786                           ;Setup_Fan_Temp.c: 87: DS3231_Read_Time();
  5787  004F18  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  5788                           
  5789                           ;Setup_Fan_Temp.c: 88: Initialize_Screen();
  5790  004F1C  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  5791                           
  5792                           ;Setup_Fan_Temp.c: 89: In_Fan_Temp_Setup = 0;
  5793  004F20  0E00               	movlw	0
  5794  004F22  0100               	movlb	0	; () banked
  5795  004F24  6F9F               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5796                           
  5797                           ; BSR set to: 0
  5798  004F26  0012               	return		;funcret
  5799  004F28                     __end_of_Do_Save_New_Fan_Temp:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           postinc0	equ	0xFEE
  5806                           wreg	equ	0xFE8
  5807                           postdec1	equ	0xFE5
  5808                           fsr1l	equ	0xFE1
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _Decrease_Fan_Temp *****************
  5812 ;; Defined at:
  5813 ;;		line 66 in file "Setup_Fan_Temp.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;		None               void
  5820 ;; Registers used:
  5821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;Total ram usage:        0 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:   10
  5834 ;; This function calls:
  5835 ;;		_Update_Setup_Fan_Screen
  5836 ;; This function is called by:
  5837 ;;		_Setup_Temp_Fan
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text20
  5842  004E56                     __ptext20:
  5843                           	opt stack 0
  5844  004E56                     _Decrease_Fan_Temp:
  5845                           	opt stack 19
  5846                           
  5847                           ;Setup_Fan_Temp.c: 70: setup_fan_set_temp--;
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;incstack = 0
  5851  004E56  0100               	movlb	0	; () banked
  5852  004E58  07AF               	decf	_setup_fan_set_temp& (0+255),f,b
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;Setup_Fan_Temp.c: 71: if(setup_fan_set_temp <50) setup_fan_set_temp =50;
  5856  004E5A  0E32               	movlw	50
  5857  004E5C  0100               	movlb	0	; () banked
  5858  004E5E  61AF               	cpfslt	_setup_fan_set_temp& (0+255),b
  5859  004E60  D004               	goto	l10238
  5860                           
  5861                           ; BSR set to: 0
  5862  004E62  0E32               	movlw	50
  5863  004E64  0100               	movlb	0	; () banked
  5864  004E66  6FAF               	movwf	_setup_fan_set_temp& (0+255),b
  5865  004E68  D000               	goto	l10238
  5866  004E6A                     l10238:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;Setup_Fan_Temp.c: 72: Update_Setup_Fan_Screen();
  5870  004E6A  EC85  F01E         	call	_Update_Setup_Fan_Screen	;wreg free
  5871  004E6E  0012               	return		;funcret
  5872  004E70                     __end_of_Decrease_Fan_Temp:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           postinc0	equ	0xFEE
  5879                           wreg	equ	0xFE8
  5880                           postdec1	equ	0xFE5
  5881                           fsr1l	equ	0xFE1
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _Update_Setup_Fan_Screen *****************
  5885 ;; Defined at:
  5886 ;;		line 106 in file "Setup_Fan_Temp.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  dc_char3        1   75[COMRAM] unsigned char 
  5891 ;;  dc_char2        1   74[COMRAM] unsigned char 
  5892 ;;  dc_char1        1   73[COMRAM] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;		None               void
  5895 ;; Registers used:
  5896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;Total ram usage:        3 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    9
  5909 ;; This function calls:
  5910 ;;		___awdiv
  5911 ;;		___awmod
  5912 ;;		_drawtext
  5913 ;; This function is called by:
  5914 ;;		_Setup_Temp_Fan
  5915 ;;		_Increase_Fan_Temp
  5916 ;;		_Decrease_Fan_Temp
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text21
  5921  003D0A                     __ptext21:
  5922                           	opt stack 0
  5923  003D0A                     _Update_Setup_Fan_Screen:
  5924                           	opt stack 20
  5925                           
  5926                           ;Setup_Fan_Temp.c: 108: char dc_char1 = setup_fan_set_temp/100;
  5927                           
  5928                           ;incstack = 0
  5929  003D0A  C0AF  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5930  003D0E  6A18               	clrf	___awdiv@dividend+1,c
  5931  003D10  0E00               	movlw	0
  5932  003D12  6E1A               	movwf	___awdiv@divisor+1,c
  5933  003D14  0E64               	movlw	100
  5934  003D16  6E19               	movwf	___awdiv@divisor,c
  5935  003D18  ECD0  F01E         	call	___awdiv	;wreg free
  5936  003D1C  5017               	movf	?___awdiv,w,c
  5937  003D1E  6E4A               	movwf	Update_Setup_Fan_Screen@dc_char1,c
  5938                           
  5939                           ;Setup_Fan_Temp.c: 109: char dc_char2 = ((setup_fan_set_temp/10)%10);
  5940  003D20  0E00               	movlw	0
  5941  003D22  6E1A               	movwf	___awdiv@divisor+1,c
  5942  003D24  0E0A               	movlw	10
  5943  003D26  6E19               	movwf	___awdiv@divisor,c
  5944  003D28  C0AF  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5945  003D2C  6A18               	clrf	___awdiv@dividend+1,c
  5946  003D2E  ECD0  F01E         	call	___awdiv	;wreg free
  5947  003D32  C017  F03D         	movff	?___awdiv,___awmod@dividend
  5948  003D36  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  5949  003D3A  0E00               	movlw	0
  5950  003D3C  6E40               	movwf	___awmod@divisor+1,c
  5951  003D3E  0E0A               	movlw	10
  5952  003D40  6E3F               	movwf	___awmod@divisor,c
  5953  003D42  EC08  F021         	call	___awmod	;wreg free
  5954  003D46  503D               	movf	?___awmod,w,c
  5955  003D48  6E4B               	movwf	Update_Setup_Fan_Screen@dc_char2,c
  5956                           
  5957                           ;Setup_Fan_Temp.c: 110: char dc_char3 = (setup_fan_set_temp%10);
  5958  003D4A  C0AF  F03D         	movff	_setup_fan_set_temp,___awmod@dividend
  5959  003D4E  6A3E               	clrf	___awmod@dividend+1,c
  5960  003D50  0E00               	movlw	0
  5961  003D52  6E40               	movwf	___awmod@divisor+1,c
  5962  003D54  0E0A               	movlw	10
  5963  003D56  6E3F               	movwf	___awmod@divisor,c
  5964  003D58  EC08  F021         	call	___awmod	;wreg free
  5965  003D5C  503D               	movf	?___awmod,w,c
  5966  003D5E  6E4C               	movwf	Update_Setup_Fan_Screen@dc_char3,c
  5967                           
  5968                           ;Setup_Fan_Temp.c: 111: setup_fan_set_text[0] = dc_char1 + '0';
  5969  003D60  504A               	movf	Update_Setup_Fan_Screen@dc_char1,w,c
  5970  003D62  0F30               	addlw	48
  5971  003D64  0100               	movlb	0	; () banked
  5972  003D66  6FC2               	movwf	_setup_fan_set_text& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;Setup_Fan_Temp.c: 112: setup_fan_set_text[1] = dc_char2 + '0';
  5976  003D68  504B               	movf	Update_Setup_Fan_Screen@dc_char2,w,c
  5977  003D6A  0F30               	addlw	48
  5978  003D6C  0100               	movlb	0	; () banked
  5979  003D6E  6FC3               	movwf	(_setup_fan_set_text+1)& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;Setup_Fan_Temp.c: 113: setup_fan_set_text[2] = dc_char3 + '0';
  5983  003D70  504C               	movf	Update_Setup_Fan_Screen@dc_char3,w,c
  5984  003D72  0F30               	addlw	48
  5985  003D74  0100               	movlb	0	; () banked
  5986  003D76  6FC4               	movwf	(_setup_fan_set_text+2)& (0+255),b
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;Setup_Fan_Temp.c: 114: drawtext(40, 74 ,setup_fan_set_text, 0xF800, 0x0000, 2);
  5990  003D78  0E4A               	movlw	74
  5991  003D7A  6E39               	movwf	drawtext@y,c
  5992  003D7C  0EC2               	movlw	low _setup_fan_set_text
  5993  003D7E  6E3A               	movwf	drawtext@_text,c
  5994  003D80  0E00               	movlw	high _setup_fan_set_text
  5995  003D82  6E3B               	movwf	drawtext@_text+1,c
  5996  003D84  0EF8               	movlw	248
  5997  003D86  6E3D               	movwf	drawtext@color+1,c
  5998  003D88  0E00               	movlw	0
  5999  003D8A  6E3C               	movwf	drawtext@color,c
  6000  003D8C  0E00               	movlw	0
  6001  003D8E  6E3F               	movwf	drawtext@bg+1,c
  6002  003D90  0E00               	movlw	0
  6003  003D92  6E3E               	movwf	drawtext@bg,c
  6004  003D94  0E02               	movlw	2
  6005  003D96  6E40               	movwf	drawtext@size,c
  6006  003D98  0E28               	movlw	40
  6007  003D9A  ECAB  F01A         	call	_drawtext
  6008  003D9E  0012               	return		;funcret
  6009  003DA0                     __end_of_Update_Setup_Fan_Screen:
  6010                           	opt stack 0
  6011                           tblptru	equ	0xFF8
  6012                           tblptrh	equ	0xFF7
  6013                           tblptrl	equ	0xFF6
  6014                           tablat	equ	0xFF5
  6015                           postinc0	equ	0xFEE
  6016                           wreg	equ	0xFE8
  6017                           postdec1	equ	0xFE5
  6018                           fsr1l	equ	0xFE1
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function _Monitor_Fan *****************
  6022 ;; Defined at:
  6023 ;;		line 27 in file "Fan_Support.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;		None
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;		None
  6028 ;; Return value:  Size  Location     Type
  6029 ;;		None               void
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;Total ram usage:        0 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    5
  6044 ;; This function calls:
  6045 ;;		_do_update_pwm
  6046 ;;		_get_duty_cycle
  6047 ;; This function is called by:
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text22
  6053  004ACC                     __ptext22:
  6054                           	opt stack 0
  6055  004ACC                     _Monitor_Fan:
  6056                           	opt stack 25
  6057                           
  6058                           ;Fan_Support.c: 29: duty_cycle = get_duty_cycle(DS1621_tempF, fan_set_temp);
  6059                           
  6060                           ;incstack = 0
  6061  004ACC  C08B  F011         	movff	_DS1621_tempF,get_duty_cycle@temp
  6062  004AD0  C08C  F012         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  6063  004AD4  C0B5  F013         	movff	_fan_set_temp,get_duty_cycle@set_temp
  6064  004AD8  6A14               	clrf	get_duty_cycle@set_temp+1,c
  6065  004ADA  EC9B  F025         	call	_get_duty_cycle	;wreg free
  6066  004ADE  5011               	movf	?_get_duty_cycle,w,c
  6067  004AE0  6E68               	movwf	_duty_cycle,c
  6068                           
  6069                           ;Fan_Support.c: 30: do_update_pwm(duty_cycle);
  6070  004AE2  5068               	movf	_duty_cycle,w,c
  6071  004AE4  ECDD  F01D         	call	_do_update_pwm
  6072                           
  6073                           ;Fan_Support.c: 33: if (FAN == 1)
  6074  004AE8  0100               	movlb	0	; () banked
  6075  004AEA  059B               	decf	_FAN& (0+255),w,b
  6076  004AEC  A4D8               	btfss	status,2,c
  6077  004AEE  D002               	goto	l28
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;Fan_Support.c: 34: {
  6081                           ;Fan_Support.c: 35: PORTAbits.RA5 = 1;
  6082  004AF0  8A80               	bsf	3968,5,c	;volatile
  6083                           
  6084                           ;Fan_Support.c: 36: }
  6085  004AF2  D002               	goto	l10418
  6086  004AF4                     l28:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;Fan_Support.c: 37: else PORTAbits.RA5 = 0;
  6090  004AF4  9A80               	bcf	3968,5,c	;volatile
  6091  004AF6  D000               	goto	l10418
  6092  004AF8                     l10418:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;Fan_Support.c: 39: if(duty_cycle ==0)
  6096  004AF8  5068               	movf	_duty_cycle,w,c
  6097  004AFA  A4D8               	btfss	status,2,c
  6098  004AFC  D002               	goto	l31
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;Fan_Support.c: 40: PORTAbits.RA5 =0;
  6102  004AFE  9A80               	bcf	3968,5,c	;volatile
  6103  004B00  D000               	goto	l31
  6104  004B02                     l31:
  6105                           
  6106                           ; BSR set to: 0
  6107  004B02  0012               	return		;funcret
  6108  004B04                     __end_of_Monitor_Fan:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           postinc0	equ	0xFEE
  6115                           wreg	equ	0xFE8
  6116                           postdec1	equ	0xFE5
  6117                           fsr1l	equ	0xFE1
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function _get_duty_cycle *****************
  6121 ;; Defined at:
  6122 ;;		line 11 in file "Fan_Support.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  temp            2   16[COMRAM] int 
  6125 ;;  set_temp        2   18[COMRAM] int 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;		None
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  2   16[COMRAM] int 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, status,0
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;Total ram usage:        5 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    2
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_Monitor_Fan
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           	psect	text23
  6152  004B36                     __ptext23:
  6153                           	opt stack 0
  6154  004B36                     _get_duty_cycle:
  6155                           	opt stack 27
  6156                           
  6157                           ;Fan_Support.c: 16: if(temp > set_temp)
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;incstack = 0
  6161  004B36  5011               	movf	get_duty_cycle@temp,w,c
  6162  004B38  5C13               	subwf	get_duty_cycle@set_temp,w,c
  6163  004B3A  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6164  004B3C  0A80               	xorlw	128
  6165  004B3E  6E15               	movwf	??_get_duty_cycle& (0+255),c
  6166  004B40  5012               	movf	get_duty_cycle@temp+1,w,c
  6167  004B42  0A80               	xorlw	128
  6168  004B44  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  6169  004B46  B0D8               	btfsc	status,0,c
  6170  004B48  D002               	goto	l7338
  6171                           
  6172                           ;Fan_Support.c: 17: {
  6173                           ;Fan_Support.c: 18: duty_cycle = 0;
  6174  004B4A  0E00               	movlw	0
  6175  004B4C  D006               	goto	L7
  6176  004B4E                     l7338:
  6177                           
  6178                           ;Fan_Support.c: 20: else
  6179                           ;Fan_Support.c: 21: {
  6180                           ;Fan_Support.c: 22: duty_cycle = 2*(set_temp - temp);
  6181  004B4E  5011               	movf	get_duty_cycle@temp,w,c
  6182  004B50  0800               	sublw	0
  6183  004B52  2413               	addwf	get_duty_cycle@set_temp,w,c
  6184  004B54  6E15               	movwf	??_get_duty_cycle& (0+255),c
  6185  004B56  90D8               	bcf	status,0,c
  6186  004B58  3415               	rlcf	??_get_duty_cycle,w,c
  6187  004B5A                     L7:
  6188  004B5A  6E68               	movwf	_duty_cycle,c
  6189  004B5C  D000               	goto	l7340
  6190  004B5E                     l7340:
  6191                           
  6192                           ;Fan_Support.c: 23: }
  6193                           ;Fan_Support.c: 24: return duty_cycle;
  6194  004B5E  C068  F011         	movff	_duty_cycle,?_get_duty_cycle
  6195  004B62  6A12               	clrf	?_get_duty_cycle+1,c
  6196  004B64  D000               	goto	l25
  6197  004B66                     l25:
  6198  004B66  0012               	return		;funcret
  6199  004B68                     __end_of_get_duty_cycle:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           postinc0	equ	0xFEE
  6206                           wreg	equ	0xFE8
  6207                           postdec1	equ	0xFE5
  6208                           fsr1l	equ	0xFE1
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function _Do_Setup_Time *****************
  6212 ;; Defined at:
  6213 ;;		line 33 in file "Setup_Time.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  2  378[None  ] int 
  6220 ;; Registers used:
  6221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:   11
  6234 ;; This function calls:
  6235 ;;		_DS3231_Read_Time
  6236 ;;		_Decrease_Time
  6237 ;;		_Do_Beep_Bad
  6238 ;;		_Do_Beep_Good
  6239 ;;		_Do_Save_New_Time
  6240 ;;		_Exit_Time_Setup
  6241 ;;		_Go_Next_Field
  6242 ;;		_Go_Prev_Field
  6243 ;;		_Increase_Time
  6244 ;;		_Initialize_Setup_Time_Screen
  6245 ;;		_Update_Setup_Time_Screen
  6246 ;;		_bcd_2_dec
  6247 ;;		_check_for_button_input
  6248 ;; This function is called by:
  6249 ;;		_main
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text24
  6254  003714                     __ptext24:
  6255                           	opt stack 0
  6256  003714                     _Do_Setup_Time:
  6257                           	opt stack 19
  6258                           
  6259                           ;Setup_Time.c: 36: Select_Field = 0;
  6260                           
  6261                           ;incstack = 0
  6262  003714  0E00               	movlw	0
  6263  003716  0100               	movlb	0	; () banked
  6264  003718  6FA5               	movwf	_Select_Field& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;Setup_Time.c: 38: DS3231_Read_Time();
  6268  00371A  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  6269                           
  6270                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  6271  00371E  506D               	movf	_second,w,c
  6272  003720  ECFB  F025         	call	_bcd_2_dec
  6273  003724  0100               	movlb	0	; () banked
  6274  003726  6FB2               	movwf	_setup_second& (0+255),b
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  6278  003728  506B               	movf	_minute,w,c
  6279  00372A  ECFB  F025         	call	_bcd_2_dec
  6280  00372E  0100               	movlb	0	; () banked
  6281  003730  6FB1               	movwf	_setup_minute& (0+255),b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  6285  003732  506A               	movf	_hour,w,c
  6286  003734  ECFB  F025         	call	_bcd_2_dec
  6287  003738  0100               	movlb	0	; () banked
  6288  00373A  6FB0               	movwf	_setup_hour& (0+255),b
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  6292  00373C  5067               	movf	_day,w,c
  6293  00373E  ECFB  F025         	call	_bcd_2_dec
  6294  003742  6E6E               	movwf	_setup_day,c
  6295                           
  6296                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  6297  003744  506C               	movf	_month,w,c
  6298  003746  ECFB  F025         	call	_bcd_2_dec
  6299  00374A  6E6F               	movwf	_setup_month,c
  6300                           
  6301                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  6302  00374C  0100               	movlb	0	; () banked
  6303  00374E  51B4               	movf	_year& (0+255),w,b
  6304  003750  ECFB  F025         	call	_bcd_2_dec
  6305  003754  0100               	movlb	0	; () banked
  6306  003756  6FB3               	movwf	_setup_year& (0+255),b
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  6310  003758  ECDC  F016         	call	_Initialize_Setup_Time_Screen	;wreg free
  6311                           
  6312                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  6313  00375C  EC4A  F013         	call	_Update_Setup_Time_Screen	;wreg free
  6314                           
  6315                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  6316  003760  0E01               	movlw	1
  6317  003762  0100               	movlb	0	; () banked
  6318  003764  6FA0               	movwf	_In_Time_Setup& (0+255),b
  6319                           
  6320                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  6321  003766  D03C               	goto	l10676
  6322  003768                     l10640:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;Setup_Time.c: 51: {
  6326                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  6327  003768  ECB0  F01F         	call	_check_for_button_input	;wreg free
  6328  00376C  06E8               	decf	wreg,f,c
  6329  00376E  A4D8               	btfss	status,2,c
  6330  003770  D037               	goto	l10676
  6331                           
  6332                           ;Setup_Time.c: 53: {
  6333                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  6334  003772  0E02               	movlw	2
  6335  003774  6469               	cpfsgt	_found,c
  6336  003776  D031               	goto	l10674
  6337  003778  0E09               	movlw	9
  6338  00377A  6069               	cpfslt	_found,c
  6339  00377C  D02E               	goto	l10674
  6340                           
  6341                           ;Setup_Time.c: 56: {
  6342                           ;Setup_Time.c: 57: Do_Beep_Good();
  6343  00377E  EC51  F027         	call	_Do_Beep_Good	;wreg free
  6344                           
  6345                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  6346  003782  0E03               	movlw	3
  6347  003784  1869               	xorwf	_found,w,c
  6348  003786  A4D8               	btfss	status,2,c
  6349  003788  D003               	goto	l10652
  6350  00378A  EC91  F026         	call	_Go_Prev_Field	;wreg free
  6351  00378E  D000               	goto	l10652
  6352  003790                     l10652:
  6353                           
  6354                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  6355  003790  0E04               	movlw	4
  6356  003792  1869               	xorwf	_found,w,c
  6357  003794  A4D8               	btfss	status,2,c
  6358  003796  D003               	goto	l10656
  6359  003798  ECA1  F026         	call	_Go_Next_Field	;wreg free
  6360  00379C  D000               	goto	l10656
  6361  00379E                     l10656:
  6362                           
  6363                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  6364  00379E  0E05               	movlw	5
  6365  0037A0  1869               	xorwf	_found,w,c
  6366  0037A2  A4D8               	btfss	status,2,c
  6367  0037A4  D003               	goto	l10660
  6368  0037A6  EC94  F027         	call	_Do_Save_New_Time	;wreg free
  6369  0037AA  D000               	goto	l10660
  6370  0037AC                     l10660:
  6371                           
  6372                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  6373  0037AC  0E06               	movlw	6
  6374  0037AE  1869               	xorwf	_found,w,c
  6375  0037B0  A4D8               	btfss	status,2,c
  6376  0037B2  D003               	goto	l10664
  6377  0037B4  ECB7  F014         	call	_Decrease_Time	;wreg free
  6378  0037B8  D000               	goto	l10664
  6379  0037BA                     l10664:
  6380                           
  6381                           ;Setup_Time.c: 62: if (found == 7) Increase_Time();
  6382  0037BA  0E07               	movlw	7
  6383  0037BC  1869               	xorwf	_found,w,c
  6384  0037BE  A4D8               	btfss	status,2,c
  6385  0037C0  D003               	goto	l10668
  6386  0037C2  EC44  F015         	call	_Increase_Time	;wreg free
  6387  0037C6  D000               	goto	l10668
  6388  0037C8                     l10668:
  6389                           
  6390                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  6391  0037C8  0E08               	movlw	8
  6392  0037CA  1869               	xorwf	_found,w,c
  6393  0037CC  A4D8               	btfss	status,2,c
  6394  0037CE  D003               	goto	l10672
  6395  0037D0  ECF9  F027         	call	_Exit_Time_Setup	;wreg free
  6396  0037D4  D000               	goto	l10672
  6397  0037D6                     l10672:
  6398                           
  6399                           ;Setup_Time.c: 69: found = 0xff;
  6400  0037D6  6869               	setf	_found,c
  6401                           
  6402                           ;Setup_Time.c: 70: }
  6403  0037D8  D003               	goto	l10676
  6404  0037DA                     l10674:
  6405                           
  6406                           ;Setup_Time.c: 71: else
  6407                           ;Setup_Time.c: 72: {
  6408                           ;Setup_Time.c: 73: Do_Beep_Bad();
  6409  0037DA  EC5D  F027         	call	_Do_Beep_Bad	;wreg free
  6410  0037DE  D000               	goto	l10676
  6411  0037E0                     l10676:
  6412  0037E0  0100               	movlb	0	; () banked
  6413  0037E2  05A0               	decf	_In_Time_Setup& (0+255),w,b
  6414  0037E4  B4D8               	btfsc	status,2,c
  6415  0037E6  D7C0               	goto	l10640
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  0037E8  0012               	return		;funcret
  6421  0037EA                     __end_of_Do_Setup_Time:
  6422                           	opt stack 0
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           postinc0	equ	0xFEE
  6428                           wreg	equ	0xFE8
  6429                           postdec1	equ	0xFE5
  6430                           fsr1l	equ	0xFE1
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6434 ;; Defined at:
  6435 ;;		line 239 in file "Setup_Time.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;		None
  6440 ;; Return value:  Size  Location     Type
  6441 ;;		None               void
  6442 ;; Registers used:
  6443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;Total ram usage:        0 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    9
  6456 ;; This function calls:
  6457 ;;		_drawtext
  6458 ;;		_fillRect
  6459 ;;		_fillScreen
  6460 ;;		_strcpy
  6461 ;; This function is called by:
  6462 ;;		_Do_Setup_Time
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text25
  6467  002DB8                     __ptext25:
  6468                           	opt stack 0
  6469  002DB8                     _Initialize_Setup_Time_Screen:
  6470                           	opt stack 20
  6471                           
  6472                           ;Setup_Time.c: 241: fillScreen(0x0000);
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;incstack = 0
  6476  002DB8  0E00               	movlw	0
  6477  002DBA  6E25               	movwf	fillScreen@color+1,c
  6478  002DBC  0E00               	movlw	0
  6479  002DBE  6E24               	movwf	fillScreen@color,c
  6480  002DC0  EC10  F027         	call	_fillScreen	;wreg free
  6481                           
  6482                           ;Setup_Time.c: 243: strcpy(txt, "ECE3301L Sp21 Final\0");
  6483  002DC4  C062  F011         	movff	_txt,strcpy@to
  6484  002DC8  C063  F012         	movff	_txt+1,strcpy@to+1
  6485  002DCC  0EFF               	movlw	low STR_6
  6486  002DCE  6E13               	movwf	strcpy@from,c
  6487  002DD0  0EFE               	movlw	high STR_6
  6488  002DD2  6E14               	movwf	strcpy@from+1,c
  6489  002DD4  ECB4  F025         	call	_strcpy	;wreg free
  6490                           
  6491                           ;Setup_Time.c: 244: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6492  002DD8  0E01               	movlw	1
  6493  002DDA  6E39               	movwf	drawtext@y,c
  6494  002DDC  C062  F03A         	movff	_txt,drawtext@_text
  6495  002DE0  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6496  002DE4  0EFF               	movlw	255
  6497  002DE6  6E3D               	movwf	drawtext@color+1,c
  6498  002DE8  683C               	setf	drawtext@color,c
  6499  002DEA  0E00               	movlw	0
  6500  002DEC  6E3F               	movwf	drawtext@bg+1,c
  6501  002DEE  0E00               	movlw	0
  6502  002DF0  6E3E               	movwf	drawtext@bg,c
  6503  002DF2  0E01               	movlw	1
  6504  002DF4  6E40               	movwf	drawtext@size,c
  6505  002DF6  0E01               	movlw	1
  6506  002DF8  ECAB  F01A         	call	_drawtext
  6507                           
  6508                           ;Setup_Time.c: 247: strcpy(txt, "Time Setup\0");
  6509  002DFC  C062  F011         	movff	_txt,strcpy@to
  6510  002E00  C063  F012         	movff	_txt+1,strcpy@to+1
  6511  002E04  0E8A               	movlw	low STR_32
  6512  002E06  6E13               	movwf	strcpy@from,c
  6513  002E08  0EFF               	movlw	high STR_32
  6514  002E0A  6E14               	movwf	strcpy@from+1,c
  6515  002E0C  ECB4  F025         	call	_strcpy	;wreg free
  6516                           
  6517                           ;Setup_Time.c: 248: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6518  002E10  0E10               	movlw	16
  6519  002E12  6E39               	movwf	drawtext@y,c
  6520  002E14  C062  F03A         	movff	_txt,drawtext@_text
  6521  002E18  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6522  002E1C  0EF8               	movlw	248
  6523  002E1E  6E3D               	movwf	drawtext@color+1,c
  6524  002E20  0E1F               	movlw	31
  6525  002E22  6E3C               	movwf	drawtext@color,c
  6526  002E24  0E00               	movlw	0
  6527  002E26  6E3F               	movwf	drawtext@bg+1,c
  6528  002E28  0E00               	movlw	0
  6529  002E2A  6E3E               	movwf	drawtext@bg,c
  6530  002E2C  0E02               	movlw	2
  6531  002E2E  6E40               	movwf	drawtext@size,c
  6532  002E30  0E04               	movlw	4
  6533  002E32  ECAB  F01A         	call	_drawtext
  6534                           
  6535                           ;Setup_Time.c: 250: strcpy(txt, "Time");
  6536  002E36  C062  F011         	movff	_txt,strcpy@to
  6537  002E3A  C063  F012         	movff	_txt+1,strcpy@to+1
  6538  002E3E  0ECA               	movlw	low (STR_12+6)
  6539  002E40  6E13               	movwf	strcpy@from,c
  6540  002E42  0EFF               	movlw	high (STR_12+6)
  6541  002E44  6E14               	movwf	strcpy@from+1,c
  6542  002E46  ECB4  F025         	call	_strcpy	;wreg free
  6543                           
  6544                           ;Setup_Time.c: 251: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  6545  002E4A  0E28               	movlw	40
  6546  002E4C  6E39               	movwf	drawtext@y,c
  6547  002E4E  C062  F03A         	movff	_txt,drawtext@_text
  6548  002E52  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6549  002E56  0E00               	movlw	0
  6550  002E58  6E3D               	movwf	drawtext@color+1,c
  6551  002E5A  0E1F               	movlw	31
  6552  002E5C  6E3C               	movwf	drawtext@color,c
  6553  002E5E  0E00               	movlw	0
  6554  002E60  6E3F               	movwf	drawtext@bg+1,c
  6555  002E62  0E00               	movlw	0
  6556  002E64  6E3E               	movwf	drawtext@bg,c
  6557  002E66  0E01               	movlw	1
  6558  002E68  6E40               	movwf	drawtext@size,c
  6559  002E6A  0E32               	movlw	50
  6560  002E6C  ECAB  F01A         	call	_drawtext
  6561                           
  6562                           ;Setup_Time.c: 253: fillRect(15-1, 52+16, 25,2,0x07FF);
  6563  002E70  0E44               	movlw	68
  6564  002E72  6E23               	movwf	fillRect@y,c
  6565  002E74  0E19               	movlw	25
  6566  002E76  6E24               	movwf	fillRect@w,c
  6567  002E78  0E02               	movlw	2
  6568  002E7A  6E25               	movwf	fillRect@h,c
  6569  002E7C  0E07               	movlw	7
  6570  002E7E  6E27               	movwf	fillRect@color+1,c
  6571  002E80  6826               	setf	fillRect@color,c
  6572  002E82  0E0E               	movlw	14
  6573  002E84  EC43  F024         	call	_fillRect
  6574                           
  6575                           ;Setup_Time.c: 254: strcpy(txt, "Date");
  6576  002E88  C062  F011         	movff	_txt,strcpy@to
  6577  002E8C  C063  F012         	movff	_txt+1,strcpy@to+1
  6578  002E90  0EDF               	movlw	low STR_11
  6579  002E92  6E13               	movwf	strcpy@from,c
  6580  002E94  0EFF               	movlw	high STR_11
  6581  002E96  6E14               	movwf	strcpy@from+1,c
  6582  002E98  ECB4  F025         	call	_strcpy	;wreg free
  6583                           
  6584                           ;Setup_Time.c: 255: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  6585  002E9C  0E47               	movlw	71
  6586  002E9E  6E39               	movwf	drawtext@y,c
  6587  002EA0  C062  F03A         	movff	_txt,drawtext@_text
  6588  002EA4  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6589  002EA8  0EF8               	movlw	248
  6590  002EAA  6E3D               	movwf	drawtext@color+1,c
  6591  002EAC  0E00               	movlw	0
  6592  002EAE  6E3C               	movwf	drawtext@color,c
  6593  002EB0  0E00               	movlw	0
  6594  002EB2  6E3F               	movwf	drawtext@bg+1,c
  6595  002EB4  0E00               	movlw	0
  6596  002EB6  6E3E               	movwf	drawtext@bg,c
  6597  002EB8  0E01               	movlw	1
  6598  002EBA  6E40               	movwf	drawtext@size,c
  6599  002EBC  0E32               	movlw	50
  6600  002EBE  ECAB  F01A         	call	_drawtext
  6601  002EC2  0012               	return		;funcret
  6602  002EC4                     __end_of_Initialize_Setup_Time_Screen:
  6603                           	opt stack 0
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           postdec1	equ	0xFE5
  6611                           fsr1l	equ	0xFE1
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _Increase_Time *****************
  6615 ;; Defined at:
  6616 ;;		line 79 in file "Setup_Time.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;		None               void
  6623 ;; Registers used:
  6624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:   10
  6637 ;; This function calls:
  6638 ;;		_Update_Setup_Time_Screen
  6639 ;; This function is called by:
  6640 ;;		_Do_Setup_Time
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text26
  6645  002A88                     __ptext26:
  6646                           	opt stack 0
  6647  002A88                     _Increase_Time:
  6648                           	opt stack 19
  6649                           
  6650                           ;Setup_Time.c: 81: switch (Select_Field)
  6651                           
  6652                           ;incstack = 0
  6653  002A88  D06F               	goto	l10390
  6654  002A8A                     l10338:
  6655                           
  6656                           ;Setup_Time.c: 84: setup_hour++;
  6657  002A8A  0100               	movlb	0	; () banked
  6658  002A8C  2BB0               	incf	_setup_hour& (0+255),f,b
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;Setup_Time.c: 85: if (setup_hour == 24) setup_hour = 0;
  6662  002A8E  0E18               	movlw	24
  6663  002A90  0100               	movlb	0	; () banked
  6664  002A92  19B0               	xorwf	_setup_hour& (0+255),w,b
  6665  002A94  A4D8               	btfss	status,2,c
  6666  002A96  D07D               	goto	l10392
  6667                           
  6668                           ; BSR set to: 0
  6669  002A98  0E00               	movlw	0
  6670  002A9A  0100               	movlb	0	; () banked
  6671  002A9C  6FB0               	movwf	_setup_hour& (0+255),b
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;Setup_Time.c: 86: break;
  6675  002A9E  D079               	goto	l10392
  6676  002AA0                     l10344:
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;Setup_Time.c: 89: setup_minute++;
  6680  002AA0  0100               	movlb	0	; () banked
  6681  002AA2  2BB1               	incf	_setup_minute& (0+255),f,b
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;Setup_Time.c: 90: if (setup_minute == 60) setup_minute = 0;
  6685  002AA4  0E3C               	movlw	60
  6686  002AA6  0100               	movlb	0	; () banked
  6687  002AA8  19B1               	xorwf	_setup_minute& (0+255),w,b
  6688  002AAA  A4D8               	btfss	status,2,c
  6689  002AAC  D072               	goto	l10392
  6690                           
  6691                           ; BSR set to: 0
  6692  002AAE  0E00               	movlw	0
  6693  002AB0  0100               	movlb	0	; () banked
  6694  002AB2  6FB1               	movwf	_setup_minute& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;Setup_Time.c: 91: break;
  6698  002AB4  D06E               	goto	l10392
  6699  002AB6                     l10350:
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;Setup_Time.c: 95: setup_second++;
  6703  002AB6  0100               	movlb	0	; () banked
  6704  002AB8  2BB2               	incf	_setup_second& (0+255),f,b
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;Setup_Time.c: 96: if (setup_second == 60) setup_second = 0;
  6708  002ABA  0E3C               	movlw	60
  6709  002ABC  0100               	movlb	0	; () banked
  6710  002ABE  19B2               	xorwf	_setup_second& (0+255),w,b
  6711  002AC0  A4D8               	btfss	status,2,c
  6712  002AC2  D067               	goto	l10392
  6713                           
  6714                           ; BSR set to: 0
  6715  002AC4  0E00               	movlw	0
  6716  002AC6  0100               	movlb	0	; () banked
  6717  002AC8  6FB2               	movwf	_setup_second& (0+255),b
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;Setup_Time.c: 97: break;
  6721  002ACA  D063               	goto	l10392
  6722  002ACC                     l10356:
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;Setup_Time.c: 101: setup_month++;
  6726  002ACC  2A6F               	incf	_setup_month,f,c
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;Setup_Time.c: 102: if (setup_month == 12+1) setup_month = 1;
  6730  002ACE  0E0D               	movlw	13
  6731  002AD0  186F               	xorwf	_setup_month,w,c
  6732  002AD2  A4D8               	btfss	status,2,c
  6733  002AD4  D05E               	goto	l10392
  6734                           
  6735                           ; BSR set to: 0
  6736  002AD6  0E01               	movlw	1
  6737  002AD8  6E6F               	movwf	_setup_month,c
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;Setup_Time.c: 103: break;
  6741  002ADA  D05B               	goto	l10392
  6742  002ADC                     l10362:
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;Setup_Time.c: 106: setup_day++;
  6746  002ADC  2A6E               	incf	_setup_day,f,c
  6747                           
  6748                           ;Setup_Time.c: 108: switch(setup_month)
  6749  002ADE  D012               	goto	l10380
  6750                           
  6751                           ; BSR set to: 0
  6752                           
  6753                           ; BSR set to: 0
  6754                           
  6755                           ; BSR set to: 0
  6756                           
  6757                           ; BSR set to: 0
  6758                           
  6759                           ; BSR set to: 0
  6760                           
  6761                           ; BSR set to: 0
  6762                           
  6763                           ;Setup_Time.c: 109: {
  6764                           ;Setup_Time.c: 110: case 1:
  6765  002AE0  D000               	goto	l10364
  6766  002AE2                     l10364:
  6767                           
  6768                           ;Setup_Time.c: 111: case 3:
  6769                           ;Setup_Time.c: 112: case 5:
  6770                           ;Setup_Time.c: 113: case 7:
  6771                           ;Setup_Time.c: 114: case 8:
  6772                           ;Setup_Time.c: 115: case 10:
  6773                           ;Setup_Time.c: 116: case 12:
  6774                           ;Setup_Time.c: 117: if(setup_day ==31+1) setup_day = 1;
  6775  002AE2  0E20               	movlw	32
  6776  002AE4  D006               	goto	L10
  6777                           
  6778                           ;Setup_Time.c: 118: break;
  6779  002AE6  D055               	goto	l10392
  6780  002AE8                     l10368:
  6781                           
  6782                           ;Setup_Time.c: 120: if(setup_day ==28+1) setup_day=1;
  6783  002AE8  0E1D               	movlw	29
  6784  002AEA  D003               	goto	L10
  6785                           
  6786                           ;Setup_Time.c: 121: break;
  6787  002AEC  D052               	goto	l10392
  6788                           
  6789                           ;Setup_Time.c: 122: case 4:
  6790  002AEE  D000               	goto	l10372
  6791  002AF0                     l10372:
  6792                           
  6793                           ;Setup_Time.c: 123: case 6:
  6794                           ;Setup_Time.c: 124: case 9:
  6795                           ;Setup_Time.c: 125: case 11:
  6796                           ;Setup_Time.c: 126: if(setup_day ==30+1) setup_day = 1;
  6797  002AF0  0E1F               	movlw	31
  6798  002AF2                     L10:
  6799  002AF2  186E               	xorwf	_setup_day,w,c
  6800  002AF4  A4D8               	btfss	status,2,c
  6801  002AF6  D04D               	goto	l10392
  6802  002AF8  0E01               	movlw	1
  6803  002AFA  D002               	goto	L8
  6804                           
  6805                           ;Setup_Time.c: 127: break;
  6806  002AFC  D04A               	goto	l10392
  6807  002AFE                     l10376:
  6808                           
  6809                           ;Setup_Time.c: 130: setup_day =0;
  6810  002AFE  0E00               	movlw	0
  6811  002B00                     L8:
  6812  002B00  6E6E               	movwf	_setup_day,c
  6813                           
  6814                           ;Setup_Time.c: 132: }
  6815                           
  6816                           ;Setup_Time.c: 131: break;
  6817  002B02  D047               	goto	l10392
  6818  002B04                     l10380:
  6819  002B04  506F               	movf	_setup_month,w,c
  6820                           
  6821                           ; Switch size 1, requested type "space"
  6822                           ; Number of cases is 12, Range of values is 1 to 12
  6823                           ; switch strategies available:
  6824                           ; Name         Instructions Cycles
  6825                           ; simple_byte           37    19 (average)
  6826                           ;	Chosen strategy is simple_byte
  6827  002B06  0A01               	xorlw	1	; case 1
  6828  002B08  B4D8               	btfsc	status,2,c
  6829  002B0A  D7EB               	goto	l10364
  6830  002B0C  0A03               	xorlw	3	; case 2
  6831  002B0E  B4D8               	btfsc	status,2,c
  6832  002B10  D7EB               	goto	l10368
  6833  002B12  0A01               	xorlw	1	; case 3
  6834  002B14  B4D8               	btfsc	status,2,c
  6835  002B16  D7E5               	goto	l10364
  6836  002B18  0A07               	xorlw	7	; case 4
  6837  002B1A  B4D8               	btfsc	status,2,c
  6838  002B1C  D7E9               	goto	l10372
  6839  002B1E  0A01               	xorlw	1	; case 5
  6840  002B20  B4D8               	btfsc	status,2,c
  6841  002B22  D7DF               	goto	l10364
  6842  002B24  0A03               	xorlw	3	; case 6
  6843  002B26  B4D8               	btfsc	status,2,c
  6844  002B28  D7E3               	goto	l10372
  6845  002B2A  0A01               	xorlw	1	; case 7
  6846  002B2C  B4D8               	btfsc	status,2,c
  6847  002B2E  D7D9               	goto	l10364
  6848  002B30  0A0F               	xorlw	15	; case 8
  6849  002B32  B4D8               	btfsc	status,2,c
  6850  002B34  D7D6               	goto	l10364
  6851  002B36  0A01               	xorlw	1	; case 9
  6852  002B38  B4D8               	btfsc	status,2,c
  6853  002B3A  D7DA               	goto	l10372
  6854  002B3C  0A03               	xorlw	3	; case 10
  6855  002B3E  B4D8               	btfsc	status,2,c
  6856  002B40  D7D0               	goto	l10364
  6857  002B42  0A01               	xorlw	1	; case 11
  6858  002B44  B4D8               	btfsc	status,2,c
  6859  002B46  D7D4               	goto	l10372
  6860  002B48  0A07               	xorlw	7	; case 12
  6861  002B4A  B4D8               	btfsc	status,2,c
  6862  002B4C  D7CA               	goto	l10364
  6863  002B4E  D7D7               	goto	l10376
  6864                           
  6865                           ;Setup_Time.c: 133: break;
  6866  002B50  D020               	goto	l10392
  6867  002B52                     l10382:
  6868                           
  6869                           ;Setup_Time.c: 137: setup_year++;
  6870  002B52  0100               	movlb	0	; () banked
  6871  002B54  2BB3               	incf	_setup_year& (0+255),f,b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;Setup_Time.c: 138: if (setup_year == 100) setup_year = 0;
  6875  002B56  0E64               	movlw	100
  6876  002B58  0100               	movlb	0	; () banked
  6877  002B5A  19B3               	xorwf	_setup_year& (0+255),w,b
  6878  002B5C  A4D8               	btfss	status,2,c
  6879  002B5E  D019               	goto	l10392
  6880                           
  6881                           ; BSR set to: 0
  6882  002B60  0E00               	movlw	0
  6883  002B62  0100               	movlb	0	; () banked
  6884  002B64  6FB3               	movwf	_setup_year& (0+255),b
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;Setup_Time.c: 144: }
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;Setup_Time.c: 143: break;
  6891                           
  6892                           ;Setup_Time.c: 142: default:
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;Setup_Time.c: 139: break;
  6896  002B66  D015               	goto	l10392
  6897  002B68                     l10390:
  6898  002B68  0100               	movlb	0	; () banked
  6899  002B6A  51A5               	movf	_Select_Field& (0+255),w,b
  6900                           
  6901                           ; Switch size 1, requested type "space"
  6902                           ; Number of cases is 6, Range of values is 0 to 5
  6903                           ; switch strategies available:
  6904                           ; Name         Instructions Cycles
  6905                           ; simple_byte           19    10 (average)
  6906                           ;	Chosen strategy is simple_byte
  6907  002B6C  0A00               	xorlw	0	; case 0
  6908  002B6E  B4D8               	btfsc	status,2,c
  6909  002B70  D78C               	goto	l10338
  6910  002B72  0A01               	xorlw	1	; case 1
  6911  002B74  B4D8               	btfsc	status,2,c
  6912  002B76  D794               	goto	l10344
  6913  002B78  0A03               	xorlw	3	; case 2
  6914  002B7A  B4D8               	btfsc	status,2,c
  6915  002B7C  D79C               	goto	l10350
  6916  002B7E  0A01               	xorlw	1	; case 3
  6917  002B80  B4D8               	btfsc	status,2,c
  6918  002B82  D7A4               	goto	l10356
  6919  002B84  0A07               	xorlw	7	; case 4
  6920  002B86  B4D8               	btfsc	status,2,c
  6921  002B88  D7A9               	goto	l10362
  6922  002B8A  0A01               	xorlw	1	; case 5
  6923  002B8C  B4D8               	btfsc	status,2,c
  6924  002B8E  D7E1               	goto	l10382
  6925  002B90  D000               	goto	l10392
  6926  002B92                     l10392:
  6927                           
  6928                           ;Setup_Time.c: 145: Update_Setup_Time_Screen();
  6929  002B92  EC4A  F013         	call	_Update_Setup_Time_Screen	;wreg free
  6930  002B96  0012               	return		;funcret
  6931  002B98                     __end_of_Increase_Time:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           postinc0	equ	0xFEE
  6938                           wreg	equ	0xFE8
  6939                           postdec1	equ	0xFE5
  6940                           fsr1l	equ	0xFE1
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _Go_Prev_Field *****************
  6944 ;; Defined at:
  6945 ;;		line 218 in file "Setup_Time.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;		None               void
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    8
  6966 ;; This function calls:
  6967 ;;		_Update_Setup_Screen_Cursor_Backward
  6968 ;; This function is called by:
  6969 ;;		_Do_Setup_Time
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text27
  6974  004D22                     __ptext27:
  6975                           	opt stack 0
  6976  004D22                     _Go_Prev_Field:
  6977                           	opt stack 21
  6978                           
  6979                           ;Setup_Time.c: 220: if (Select_Field == 0) Select_Field = 5;
  6980                           
  6981                           ;incstack = 0
  6982  004D22  0100               	movlb	0	; () banked
  6983  004D24  51A5               	movf	_Select_Field& (0+255),w,b
  6984  004D26  A4D8               	btfss	status,2,c
  6985  004D28  D004               	goto	l7636
  6986                           
  6987                           ; BSR set to: 0
  6988  004D2A  0E05               	movlw	5
  6989  004D2C  0100               	movlb	0	; () banked
  6990  004D2E  6FA5               	movwf	_Select_Field& (0+255),b
  6991  004D30  D003               	goto	l7638
  6992  004D32                     l7636:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;Setup_Time.c: 221: else Select_Field--;
  6996  004D32  0100               	movlb	0	; () banked
  6997  004D34  07A5               	decf	_Select_Field& (0+255),f,b
  6998  004D36  D000               	goto	l7638
  6999  004D38                     l7638:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;Setup_Time.c: 222: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7003  004D38  0100               	movlb	0	; () banked
  7004  004D3A  51A5               	movf	_Select_Field& (0+255),w,b
  7005  004D3C  ECCD  F010         	call	_Update_Setup_Screen_Cursor_Backward
  7006  004D40  0012               	return		;funcret
  7007  004D42                     __end_of_Go_Prev_Field:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           postinc0	equ	0xFEE
  7014                           wreg	equ	0xFE8
  7015                           postdec1	equ	0xFE5
  7016                           fsr1l	equ	0xFE1
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _Go_Next_Field *****************
  7020 ;; Defined at:
  7021 ;;		line 209 in file "Setup_Time.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    8
  7042 ;; This function calls:
  7043 ;;		_Update_Setup_Screen_Cursor_Forward
  7044 ;; This function is called by:
  7045 ;;		_Do_Setup_Time
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text28
  7050  004D42                     __ptext28:
  7051                           	opt stack 0
  7052  004D42                     _Go_Next_Field:
  7053                           	opt stack 21
  7054                           
  7055                           ;Setup_Time.c: 212: Select_Field++;
  7056                           
  7057                           ;incstack = 0
  7058  004D42  0100               	movlb	0	; () banked
  7059  004D44  2BA5               	incf	_Select_Field& (0+255),f,b
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;Setup_Time.c: 213: if (Select_Field == 6) Select_Field = 0;
  7063  004D46  0E06               	movlw	6
  7064  004D48  0100               	movlb	0	; () banked
  7065  004D4A  19A5               	xorwf	_Select_Field& (0+255),w,b
  7066  004D4C  A4D8               	btfss	status,2,c
  7067  004D4E  D004               	goto	l7646
  7068                           
  7069                           ; BSR set to: 0
  7070  004D50  0E00               	movlw	0
  7071  004D52  0100               	movlb	0	; () banked
  7072  004D54  6FA5               	movwf	_Select_Field& (0+255),b
  7073  004D56  D000               	goto	l7646
  7074  004D58                     l7646:
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;Setup_Time.c: 214: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7078  004D58  0100               	movlb	0	; () banked
  7079  004D5A  51A5               	movf	_Select_Field& (0+255),w,b
  7080  004D5C  ECF0  F00F         	call	_Update_Setup_Screen_Cursor_Forward
  7081  004D60  0012               	return		;funcret
  7082  004D62                     __end_of_Go_Next_Field:
  7083                           	opt stack 0
  7084                           tblptru	equ	0xFF8
  7085                           tblptrh	equ	0xFF7
  7086                           tblptrl	equ	0xFF6
  7087                           tablat	equ	0xFF5
  7088                           postinc0	equ	0xFEE
  7089                           wreg	equ	0xFE8
  7090                           postdec1	equ	0xFE5
  7091                           fsr1l	equ	0xFE1
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _Exit_Time_Setup *****************
  7095 ;; Defined at:
  7096 ;;		line 233 in file "Setup_Time.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;		None               void
  7103 ;; Registers used:
  7104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        0 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:   10
  7117 ;; This function calls:
  7118 ;;		_DS3231_Read_Time
  7119 ;;		_Initialize_Screen
  7120 ;; This function is called by:
  7121 ;;		_Do_Setup_Time
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           	psect	text29
  7126  004FF2                     __ptext29:
  7127                           	opt stack 0
  7128  004FF2                     _Exit_Time_Setup:
  7129                           	opt stack 19
  7130                           
  7131                           ;Setup_Time.c: 235: DS3231_Read_Time();
  7132                           
  7133                           ;incstack = 0
  7134  004FF2  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  7135                           
  7136                           ;Setup_Time.c: 236: Initialize_Screen();
  7137  004FF6  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  7138                           
  7139                           ;Setup_Time.c: 237: In_Time_Setup = 0;
  7140  004FFA  0E00               	movlw	0
  7141  004FFC  0100               	movlb	0	; () banked
  7142  004FFE  6FA0               	movwf	_In_Time_Setup& (0+255),b
  7143                           
  7144                           ; BSR set to: 0
  7145  005000  0012               	return		;funcret
  7146  005002                     __end_of_Exit_Time_Setup:
  7147                           	opt stack 0
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           postinc0	equ	0xFEE
  7153                           wreg	equ	0xFE8
  7154                           postdec1	equ	0xFE5
  7155                           fsr1l	equ	0xFE1
  7156                           status	equ	0xFD8
  7157                           
  7158 ;; *************** function _Do_Save_New_Time *****************
  7159 ;; Defined at:
  7160 ;;		line 225 in file "Setup_Time.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;		None               void
  7167 ;; Registers used:
  7168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:   10
  7181 ;; This function calls:
  7182 ;;		_DS3231_Read_Time
  7183 ;;		_DS3231_Write_Time
  7184 ;;		_Initialize_Screen
  7185 ;; This function is called by:
  7186 ;;		_Do_Setup_Time
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           	psect	text30
  7191  004F28                     __ptext30:
  7192                           	opt stack 0
  7193  004F28                     _Do_Save_New_Time:
  7194                           	opt stack 19
  7195                           
  7196                           ;Setup_Time.c: 227: DS3231_Write_Time();
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;incstack = 0
  7200  004F28  EC38  F01E         	call	_DS3231_Write_Time	;wreg free
  7201                           
  7202                           ;Setup_Time.c: 228: DS3231_Read_Time();
  7203  004F2C  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  7204                           
  7205                           ;Setup_Time.c: 229: Initialize_Screen();
  7206  004F30  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  7207                           
  7208                           ;Setup_Time.c: 230: In_Time_Setup = 0;
  7209  004F34  0E00               	movlw	0
  7210  004F36  0100               	movlb	0	; () banked
  7211  004F38  6FA0               	movwf	_In_Time_Setup& (0+255),b
  7212                           
  7213                           ; BSR set to: 0
  7214  004F3A  0012               	return		;funcret
  7215  004F3C                     __end_of_Do_Save_New_Time:
  7216                           	opt stack 0
  7217                           tblptru	equ	0xFF8
  7218                           tblptrh	equ	0xFF7
  7219                           tblptrl	equ	0xFF6
  7220                           tablat	equ	0xFF5
  7221                           postinc0	equ	0xFEE
  7222                           wreg	equ	0xFE8
  7223                           postdec1	equ	0xFE5
  7224                           fsr1l	equ	0xFE1
  7225                           status	equ	0xFD8
  7226                           
  7227 ;; *************** function _DS3231_Write_Time *****************
  7228 ;; Defined at:
  7229 ;;		line 90 in file "I2C_Support.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  Address         1   74[COMRAM] unsigned char 
  7234 ;;  Device          1   73[COMRAM] unsigned char 
  7235 ;; Return value:  Size  Location     Type
  7236 ;;		None               void
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:        2 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    4
  7251 ;; This function calls:
  7252 ;;		_I2C_Start
  7253 ;;		_I2C_Stop
  7254 ;;		_I2C_Write
  7255 ;;		_dec_2_bcd
  7256 ;; This function is called by:
  7257 ;;		_Do_Save_New_Time
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text31
  7262  003C70                     __ptext31:
  7263                           	opt stack 0
  7264  003C70                     _DS3231_Write_Time:
  7265                           	opt stack 24
  7266                           
  7267                           ;I2C_Support.c: 92: char Device = 0x68;
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;incstack = 0
  7271  003C70  0E68               	movlw	104
  7272  003C72  6E4A               	movwf	DS3231_Write_Time@Device,c
  7273                           
  7274                           ;I2C_Support.c: 93: char Address = 0x00;
  7275  003C74  0E00               	movlw	0
  7276  003C76  6E4B               	movwf	DS3231_Write_Time@Address,c
  7277                           
  7278                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  7279  003C78  0100               	movlb	0	; () banked
  7280  003C7A  51B2               	movf	_setup_second& (0+255),w,b
  7281  003C7C  EC4A  F023         	call	_dec_2_bcd
  7282  003C80  5043               	movf	?_dec_2_bcd,w,c
  7283  003C82  6E6D               	movwf	_second,c
  7284                           
  7285                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  7286  003C84  0100               	movlb	0	; () banked
  7287  003C86  51B1               	movf	_setup_minute& (0+255),w,b
  7288  003C88  EC4A  F023         	call	_dec_2_bcd
  7289  003C8C  5043               	movf	?_dec_2_bcd,w,c
  7290  003C8E  6E6B               	movwf	_minute,c
  7291                           
  7292                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  7293  003C90  0100               	movlb	0	; () banked
  7294  003C92  51B0               	movf	_setup_hour& (0+255),w,b
  7295  003C94  EC4A  F023         	call	_dec_2_bcd
  7296  003C98  5043               	movf	?_dec_2_bcd,w,c
  7297  003C9A  6E6A               	movwf	_hour,c
  7298                           
  7299                           ;I2C_Support.c: 97: dow = 0x01;
  7300  003C9C  0E01               	movlw	1
  7301  003C9E  0100               	movlb	0	; () banked
  7302  003CA0  6FAA               	movwf	_dow& (0+255),b
  7303                           
  7304                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  7305  003CA2  506E               	movf	_setup_day,w,c
  7306  003CA4  EC4A  F023         	call	_dec_2_bcd
  7307  003CA8  5043               	movf	?_dec_2_bcd,w,c
  7308  003CAA  6E67               	movwf	_day,c
  7309                           
  7310                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  7311  003CAC  506F               	movf	_setup_month,w,c
  7312  003CAE  EC4A  F023         	call	_dec_2_bcd
  7313  003CB2  5043               	movf	?_dec_2_bcd,w,c
  7314  003CB4  6E6C               	movwf	_month,c
  7315                           
  7316                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  7317  003CB6  0100               	movlb	0	; () banked
  7318  003CB8  51B3               	movf	_setup_year& (0+255),w,b
  7319  003CBA  EC4A  F023         	call	_dec_2_bcd
  7320  003CBE  5043               	movf	?_dec_2_bcd,w,c
  7321  003CC0  0100               	movlb	0	; () banked
  7322  003CC2  6FB4               	movwf	_year& (0+255),b
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;I2C_Support.c: 101: I2C_Start();
  7326  003CC4  ECDF  F027         	call	_I2C_Start	;wreg free
  7327                           
  7328                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  7329  003CC8  504A               	movf	DS3231_Write_Time@Device,w,c
  7330  003CCA  244A               	addwf	DS3231_Write_Time@Device,w,c
  7331  003CCC  EC0B  F025         	call	_I2C_Write
  7332                           
  7333                           ;I2C_Support.c: 103: I2C_Write(Address);
  7334  003CD0  504B               	movf	DS3231_Write_Time@Address,w,c
  7335  003CD2  EC0B  F025         	call	_I2C_Write
  7336                           
  7337                           ;I2C_Support.c: 104: I2C_Write(second);
  7338  003CD6  506D               	movf	_second,w,c
  7339  003CD8  EC0B  F025         	call	_I2C_Write
  7340                           
  7341                           ;I2C_Support.c: 105: I2C_Write(minute);
  7342  003CDC  506B               	movf	_minute,w,c
  7343  003CDE  EC0B  F025         	call	_I2C_Write
  7344                           
  7345                           ;I2C_Support.c: 106: I2C_Write(hour);
  7346  003CE2  506A               	movf	_hour,w,c
  7347  003CE4  EC0B  F025         	call	_I2C_Write
  7348                           
  7349                           ;I2C_Support.c: 107: I2C_Write(dow);
  7350  003CE8  0100               	movlb	0	; () banked
  7351  003CEA  51AA               	movf	_dow& (0+255),w,b
  7352  003CEC  EC0B  F025         	call	_I2C_Write
  7353                           
  7354                           ;I2C_Support.c: 108: I2C_Write(day);
  7355  003CF0  5067               	movf	_day,w,c
  7356  003CF2  EC0B  F025         	call	_I2C_Write
  7357                           
  7358                           ;I2C_Support.c: 109: I2C_Write(month);
  7359  003CF6  506C               	movf	_month,w,c
  7360  003CF8  EC0B  F025         	call	_I2C_Write
  7361                           
  7362                           ;I2C_Support.c: 110: I2C_Write(year);
  7363  003CFC  0100               	movlb	0	; () banked
  7364  003CFE  51B4               	movf	_year& (0+255),w,b
  7365  003D00  EC0B  F025         	call	_I2C_Write
  7366                           
  7367                           ;I2C_Support.c: 111: I2C_Stop();
  7368  003D04  ECD6  F027         	call	_I2C_Stop	;wreg free
  7369  003D08  0012               	return		;funcret
  7370  003D0A                     __end_of_DS3231_Write_Time:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           postinc0	equ	0xFEE
  7377                           wreg	equ	0xFE8
  7378                           postdec1	equ	0xFE5
  7379                           fsr1l	equ	0xFE1
  7380                           status	equ	0xFD8
  7381                           
  7382 ;; *************** function _Decrease_Time *****************
  7383 ;; Defined at:
  7384 ;;		line 148 in file "Setup_Time.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;		None               void
  7391 ;; Registers used:
  7392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;Total ram usage:        0 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:   10
  7405 ;; This function calls:
  7406 ;;		_Update_Setup_Time_Screen
  7407 ;; This function is called by:
  7408 ;;		_Do_Setup_Time
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text32
  7413  00296E                     __ptext32:
  7414                           	opt stack 0
  7415  00296E                     _Decrease_Time:
  7416                           	opt stack 19
  7417                           
  7418                           ;Setup_Time.c: 150: switch (Select_Field)
  7419                           
  7420                           ;incstack = 0
  7421  00296E  D074               	goto	l10332
  7422  002970                     l10280:
  7423                           
  7424                           ;Setup_Time.c: 153: if (setup_hour == 0) setup_hour = 23;
  7425  002970  0100               	movlb	0	; () banked
  7426  002972  51B0               	movf	_setup_hour& (0+255),w,b
  7427  002974  A4D8               	btfss	status,2,c
  7428  002976  D004               	goto	l10284
  7429                           
  7430                           ; BSR set to: 0
  7431  002978  0E17               	movlw	23
  7432  00297A  0100               	movlb	0	; () banked
  7433  00297C  6FB0               	movwf	_setup_hour& (0+255),b
  7434  00297E  D081               	goto	l10334
  7435  002980                     l10284:
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;Setup_Time.c: 154: else --setup_hour;
  7439  002980  0100               	movlb	0	; () banked
  7440  002982  07B0               	decf	_setup_hour& (0+255),f,b
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;Setup_Time.c: 155: break;
  7444  002984  D07E               	goto	l10334
  7445  002986                     l10286:
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;Setup_Time.c: 157: if (setup_minute == 0) setup_minute = 59;
  7449  002986  0100               	movlb	0	; () banked
  7450  002988  51B1               	movf	_setup_minute& (0+255),w,b
  7451  00298A  A4D8               	btfss	status,2,c
  7452  00298C  D004               	goto	l10290
  7453                           
  7454                           ; BSR set to: 0
  7455  00298E  0E3B               	movlw	59
  7456  002990  0100               	movlb	0	; () banked
  7457  002992  6FB1               	movwf	_setup_minute& (0+255),b
  7458  002994  D076               	goto	l10334
  7459  002996                     l10290:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;Setup_Time.c: 158: else --setup_minute;
  7463  002996  0100               	movlb	0	; () banked
  7464  002998  07B1               	decf	_setup_minute& (0+255),f,b
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;Setup_Time.c: 159: break;
  7468  00299A  D073               	goto	l10334
  7469  00299C                     l10292:
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;Setup_Time.c: 161: if (setup_second == 0) setup_second = 59;
  7473  00299C  0100               	movlb	0	; () banked
  7474  00299E  51B2               	movf	_setup_second& (0+255),w,b
  7475  0029A0  A4D8               	btfss	status,2,c
  7476  0029A2  D004               	goto	l10296
  7477                           
  7478                           ; BSR set to: 0
  7479  0029A4  0E3B               	movlw	59
  7480  0029A6  0100               	movlb	0	; () banked
  7481  0029A8  6FB2               	movwf	_setup_second& (0+255),b
  7482  0029AA  D06B               	goto	l10334
  7483  0029AC                     l10296:
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;Setup_Time.c: 162: else --setup_second;
  7487  0029AC  0100               	movlb	0	; () banked
  7488  0029AE  07B2               	decf	_setup_second& (0+255),f,b
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;Setup_Time.c: 163: break;
  7492  0029B0  D068               	goto	l10334
  7493  0029B2                     l10298:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;Setup_Time.c: 165: if (setup_month == 1) setup_month = 12;
  7497  0029B2  046F               	decf	_setup_month,w,c
  7498  0029B4  A4D8               	btfss	status,2,c
  7499  0029B6  D003               	goto	l10302
  7500                           
  7501                           ; BSR set to: 0
  7502  0029B8  0E0C               	movlw	12
  7503  0029BA  6E6F               	movwf	_setup_month,c
  7504  0029BC  D062               	goto	l10334
  7505  0029BE                     l10302:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;Setup_Time.c: 166: else --setup_month;
  7509  0029BE  066F               	decf	_setup_month,f,c
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;Setup_Time.c: 167: break;
  7513  0029C0  D060               	goto	l10334
  7514  0029C2                     l10304:
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;Setup_Time.c: 170: setup_day--;
  7518  0029C2  066E               	decf	_setup_day,f,c
  7519                           
  7520                           ;Setup_Time.c: 172: switch(setup_month)
  7521  0029C4  D017               	goto	l10322
  7522                           
  7523                           ; BSR set to: 0
  7524                           
  7525                           ; BSR set to: 0
  7526                           
  7527                           ; BSR set to: 0
  7528                           
  7529                           ; BSR set to: 0
  7530                           
  7531                           ; BSR set to: 0
  7532                           
  7533                           ; BSR set to: 0
  7534                           
  7535                           ;Setup_Time.c: 173: {
  7536                           ;Setup_Time.c: 174: case 1:
  7537  0029C6  D000               	goto	l10306
  7538  0029C8                     l10306:
  7539                           
  7540                           ;Setup_Time.c: 175: case 3:
  7541                           ;Setup_Time.c: 176: case 5:
  7542                           ;Setup_Time.c: 177: case 7:
  7543                           ;Setup_Time.c: 178: case 8:
  7544                           ;Setup_Time.c: 179: case 10:
  7545                           ;Setup_Time.c: 180: case 12:
  7546                           ;Setup_Time.c: 181: if(setup_day ==0) setup_day = 31;
  7547  0029C8  506E               	movf	_setup_day,w,c
  7548  0029CA  A4D8               	btfss	status,2,c
  7549  0029CC  D05A               	goto	l10334
  7550  0029CE  0E1F               	movlw	31
  7551  0029D0  D00F               	goto	L13
  7552                           
  7553                           ;Setup_Time.c: 182: break;
  7554  0029D2  D057               	goto	l10334
  7555  0029D4                     l10310:
  7556                           
  7557                           ;Setup_Time.c: 184: if(setup_day ==0) setup_day=28;
  7558  0029D4  506E               	movf	_setup_day,w,c
  7559  0029D6  A4D8               	btfss	status,2,c
  7560  0029D8  D054               	goto	l10334
  7561  0029DA  0E1C               	movlw	28
  7562  0029DC  D009               	goto	L13
  7563                           
  7564                           ;Setup_Time.c: 185: break;
  7565  0029DE  D051               	goto	l10334
  7566                           
  7567                           ;Setup_Time.c: 186: case 4:
  7568  0029E0  D000               	goto	l10314
  7569  0029E2                     l10314:
  7570                           
  7571                           ;Setup_Time.c: 187: case 6:
  7572                           ;Setup_Time.c: 188: case 9:
  7573                           ;Setup_Time.c: 189: case 11:
  7574                           ;Setup_Time.c: 190: if(setup_day ==0) setup_day = 30;
  7575  0029E2  506E               	movf	_setup_day,w,c
  7576  0029E4  A4D8               	btfss	status,2,c
  7577  0029E6  D04D               	goto	l10334
  7578  0029E8  0E1E               	movlw	30
  7579  0029EA  D002               	goto	L13
  7580                           
  7581                           ;Setup_Time.c: 191: break;
  7582  0029EC  D04A               	goto	l10334
  7583  0029EE                     l10318:
  7584                           
  7585                           ;Setup_Time.c: 194: setup_day =0;
  7586  0029EE  0E00               	movlw	0
  7587  0029F0                     L13:
  7588  0029F0  6E6E               	movwf	_setup_day,c
  7589                           
  7590                           ;Setup_Time.c: 196: }
  7591                           
  7592                           ;Setup_Time.c: 195: break;
  7593  0029F2  D047               	goto	l10334
  7594  0029F4                     l10322:
  7595  0029F4  506F               	movf	_setup_month,w,c
  7596                           
  7597                           ; Switch size 1, requested type "space"
  7598                           ; Number of cases is 12, Range of values is 1 to 12
  7599                           ; switch strategies available:
  7600                           ; Name         Instructions Cycles
  7601                           ; simple_byte           37    19 (average)
  7602                           ;	Chosen strategy is simple_byte
  7603  0029F6  0A01               	xorlw	1	; case 1
  7604  0029F8  B4D8               	btfsc	status,2,c
  7605  0029FA  D7E6               	goto	l10306
  7606  0029FC  0A03               	xorlw	3	; case 2
  7607  0029FE  B4D8               	btfsc	status,2,c
  7608  002A00  D7E9               	goto	l10310
  7609  002A02  0A01               	xorlw	1	; case 3
  7610  002A04  B4D8               	btfsc	status,2,c
  7611  002A06  D7E0               	goto	l10306
  7612  002A08  0A07               	xorlw	7	; case 4
  7613  002A0A  B4D8               	btfsc	status,2,c
  7614  002A0C  D7EA               	goto	l10314
  7615  002A0E  0A01               	xorlw	1	; case 5
  7616  002A10  B4D8               	btfsc	status,2,c
  7617  002A12  D7DA               	goto	l10306
  7618  002A14  0A03               	xorlw	3	; case 6
  7619  002A16  B4D8               	btfsc	status,2,c
  7620  002A18  D7E4               	goto	l10314
  7621  002A1A  0A01               	xorlw	1	; case 7
  7622  002A1C  B4D8               	btfsc	status,2,c
  7623  002A1E  D7D4               	goto	l10306
  7624  002A20  0A0F               	xorlw	15	; case 8
  7625  002A22  B4D8               	btfsc	status,2,c
  7626  002A24  D7D1               	goto	l10306
  7627  002A26  0A01               	xorlw	1	; case 9
  7628  002A28  B4D8               	btfsc	status,2,c
  7629  002A2A  D7DB               	goto	l10314
  7630  002A2C  0A03               	xorlw	3	; case 10
  7631  002A2E  B4D8               	btfsc	status,2,c
  7632  002A30  D7CB               	goto	l10306
  7633  002A32  0A01               	xorlw	1	; case 11
  7634  002A34  B4D8               	btfsc	status,2,c
  7635  002A36  D7D5               	goto	l10314
  7636  002A38  0A07               	xorlw	7	; case 12
  7637  002A3A  B4D8               	btfsc	status,2,c
  7638  002A3C  D7C5               	goto	l10306
  7639  002A3E  D7D7               	goto	l10318
  7640                           
  7641                           ;Setup_Time.c: 197: break;
  7642  002A40  D020               	goto	l10334
  7643  002A42                     l10324:
  7644                           
  7645                           ;Setup_Time.c: 200: if (setup_year == 0) setup_year = 99;
  7646  002A42  0100               	movlb	0	; () banked
  7647  002A44  51B3               	movf	_setup_year& (0+255),w,b
  7648  002A46  A4D8               	btfss	status,2,c
  7649  002A48  D004               	goto	l10328
  7650                           
  7651                           ; BSR set to: 0
  7652  002A4A  0E63               	movlw	99
  7653  002A4C  0100               	movlb	0	; () banked
  7654  002A4E  6FB3               	movwf	_setup_year& (0+255),b
  7655  002A50  D018               	goto	l10334
  7656  002A52                     l10328:
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;Setup_Time.c: 201: else --setup_year;
  7660  002A52  0100               	movlb	0	; () banked
  7661  002A54  07B3               	decf	_setup_year& (0+255),f,b
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;Setup_Time.c: 205: }
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;Setup_Time.c: 204: break;
  7668                           
  7669                           ;Setup_Time.c: 203: default:
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;Setup_Time.c: 202: break;
  7673  002A56  D015               	goto	l10334
  7674  002A58                     l10332:
  7675  002A58  0100               	movlb	0	; () banked
  7676  002A5A  51A5               	movf	_Select_Field& (0+255),w,b
  7677                           
  7678                           ; Switch size 1, requested type "space"
  7679                           ; Number of cases is 6, Range of values is 0 to 5
  7680                           ; switch strategies available:
  7681                           ; Name         Instructions Cycles
  7682                           ; simple_byte           19    10 (average)
  7683                           ;	Chosen strategy is simple_byte
  7684  002A5C  0A00               	xorlw	0	; case 0
  7685  002A5E  B4D8               	btfsc	status,2,c
  7686  002A60  D787               	goto	l10280
  7687  002A62  0A01               	xorlw	1	; case 1
  7688  002A64  B4D8               	btfsc	status,2,c
  7689  002A66  D78F               	goto	l10286
  7690  002A68  0A03               	xorlw	3	; case 2
  7691  002A6A  B4D8               	btfsc	status,2,c
  7692  002A6C  D797               	goto	l10292
  7693  002A6E  0A01               	xorlw	1	; case 3
  7694  002A70  B4D8               	btfsc	status,2,c
  7695  002A72  D79F               	goto	l10298
  7696  002A74  0A07               	xorlw	7	; case 4
  7697  002A76  B4D8               	btfsc	status,2,c
  7698  002A78  D7A4               	goto	l10304
  7699  002A7A  0A01               	xorlw	1	; case 5
  7700  002A7C  B4D8               	btfsc	status,2,c
  7701  002A7E  D7E1               	goto	l10324
  7702  002A80  D000               	goto	l10334
  7703  002A82                     l10334:
  7704                           
  7705                           ;Setup_Time.c: 206: Update_Setup_Time_Screen();
  7706  002A82  EC4A  F013         	call	_Update_Setup_Time_Screen	;wreg free
  7707  002A86  0012               	return		;funcret
  7708  002A88                     __end_of_Decrease_Time:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           postinc0	equ	0xFEE
  7715                           wreg	equ	0xFE8
  7716                           postdec1	equ	0xFE5
  7717                           fsr1l	equ	0xFE1
  7718                           status	equ	0xFD8
  7719                           
  7720 ;; *************** function _Update_Setup_Time_Screen *****************
  7721 ;; Defined at:
  7722 ;;		line 258 in file "Setup_Time.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;		None
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;		None
  7727 ;; Return value:  Size  Location     Type
  7728 ;;		None               void
  7729 ;; Registers used:
  7730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;Total ram usage:        0 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    9
  7743 ;; This function calls:
  7744 ;;		___awdiv
  7745 ;;		___awmod
  7746 ;;		_drawtext
  7747 ;; This function is called by:
  7748 ;;		_Do_Setup_Time
  7749 ;;		_Increase_Time
  7750 ;;		_Decrease_Time
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           	psect	text33
  7755  002694                     __ptext33:
  7756                           	opt stack 0
  7757  002694                     _Update_Setup_Time_Screen:
  7758                           	opt stack 20
  7759                           
  7760                           ;Setup_Time.c: 260: setup_time[0] = (setup_hour/10) + '0';
  7761                           
  7762                           ;incstack = 0
  7763  002694  C0B0  F017         	movff	_setup_hour,___awdiv@dividend
  7764  002698  6A18               	clrf	___awdiv@dividend+1,c
  7765  00269A  0E00               	movlw	0
  7766  00269C  6E1A               	movwf	___awdiv@divisor+1,c
  7767  00269E  0E0A               	movlw	10
  7768  0026A0  6E19               	movwf	___awdiv@divisor,c
  7769  0026A2  ECD0  F01E         	call	___awdiv	;wreg free
  7770  0026A6  5017               	movf	?___awdiv,w,c
  7771  0026A8  0F30               	addlw	48
  7772  0026AA  0101               	movlb	1	; () banked
  7773  0026AC  6F58               	movwf	_setup_time& (0+255),b
  7774                           
  7775                           ;Setup_Time.c: 261: setup_time[1] = (setup_hour%10) +'0';
  7776  0026AE  C0B0  F03D         	movff	_setup_hour,___awmod@dividend
  7777  0026B2  6A3E               	clrf	___awmod@dividend+1,c
  7778  0026B4  0E00               	movlw	0
  7779  0026B6  6E40               	movwf	___awmod@divisor+1,c
  7780  0026B8  0E0A               	movlw	10
  7781  0026BA  6E3F               	movwf	___awmod@divisor,c
  7782  0026BC  EC08  F021         	call	___awmod	;wreg free
  7783  0026C0  503D               	movf	?___awmod,w,c
  7784  0026C2  0F30               	addlw	48
  7785  0026C4  0101               	movlb	1	; () banked
  7786  0026C6  6F59               	movwf	(_setup_time+1)& (0+255),b
  7787                           
  7788                           ;Setup_Time.c: 262: setup_time[3] = (setup_minute/10) + '0';
  7789  0026C8  C0B1  F017         	movff	_setup_minute,___awdiv@dividend
  7790  0026CC  6A18               	clrf	___awdiv@dividend+1,c
  7791  0026CE  0E00               	movlw	0
  7792  0026D0  6E1A               	movwf	___awdiv@divisor+1,c
  7793  0026D2  0E0A               	movlw	10
  7794  0026D4  6E19               	movwf	___awdiv@divisor,c
  7795  0026D6  ECD0  F01E         	call	___awdiv	;wreg free
  7796  0026DA  5017               	movf	?___awdiv,w,c
  7797  0026DC  0F30               	addlw	48
  7798  0026DE  0101               	movlb	1	; () banked
  7799  0026E0  6F5B               	movwf	(_setup_time+3)& (0+255),b
  7800                           
  7801                           ;Setup_Time.c: 263: setup_time[4] = (setup_minute%10) +'0';
  7802  0026E2  C0B1  F03D         	movff	_setup_minute,___awmod@dividend
  7803  0026E6  6A3E               	clrf	___awmod@dividend+1,c
  7804  0026E8  0E00               	movlw	0
  7805  0026EA  6E40               	movwf	___awmod@divisor+1,c
  7806  0026EC  0E0A               	movlw	10
  7807  0026EE  6E3F               	movwf	___awmod@divisor,c
  7808  0026F0  EC08  F021         	call	___awmod	;wreg free
  7809  0026F4  503D               	movf	?___awmod,w,c
  7810  0026F6  0F30               	addlw	48
  7811  0026F8  0101               	movlb	1	; () banked
  7812  0026FA  6F5C               	movwf	(_setup_time+4)& (0+255),b
  7813                           
  7814                           ;Setup_Time.c: 264: setup_time[6] = (setup_second/10) + '0';
  7815  0026FC  C0B2  F017         	movff	_setup_second,___awdiv@dividend
  7816  002700  6A18               	clrf	___awdiv@dividend+1,c
  7817  002702  0E00               	movlw	0
  7818  002704  6E1A               	movwf	___awdiv@divisor+1,c
  7819  002706  0E0A               	movlw	10
  7820  002708  6E19               	movwf	___awdiv@divisor,c
  7821  00270A  ECD0  F01E         	call	___awdiv	;wreg free
  7822  00270E  5017               	movf	?___awdiv,w,c
  7823  002710  0F30               	addlw	48
  7824  002712  0101               	movlb	1	; () banked
  7825  002714  6F5E               	movwf	(_setup_time+6)& (0+255),b
  7826                           
  7827                           ;Setup_Time.c: 265: setup_time[7] = (setup_second%10) + '0';
  7828  002716  C0B2  F03D         	movff	_setup_second,___awmod@dividend
  7829  00271A  6A3E               	clrf	___awmod@dividend+1,c
  7830  00271C  0E00               	movlw	0
  7831  00271E  6E40               	movwf	___awmod@divisor+1,c
  7832  002720  0E0A               	movlw	10
  7833  002722  6E3F               	movwf	___awmod@divisor,c
  7834  002724  EC08  F021         	call	___awmod	;wreg free
  7835  002728  503D               	movf	?___awmod,w,c
  7836  00272A  0F30               	addlw	48
  7837  00272C  0101               	movlb	1	; () banked
  7838  00272E  6F5F               	movwf	(_setup_time+7)& (0+255),b
  7839                           
  7840                           ;Setup_Time.c: 267: setup_date[0] = (setup_month/10) + '0';;
  7841  002730  C06F  F017         	movff	_setup_month,___awdiv@dividend
  7842  002734  6A18               	clrf	___awdiv@dividend+1,c
  7843  002736  0E00               	movlw	0
  7844  002738  6E1A               	movwf	___awdiv@divisor+1,c
  7845  00273A  0E0A               	movlw	10
  7846  00273C  6E19               	movwf	___awdiv@divisor,c
  7847  00273E  ECD0  F01E         	call	___awdiv	;wreg free
  7848  002742  5017               	movf	?___awdiv,w,c
  7849  002744  0F30               	addlw	48
  7850  002746  0101               	movlb	1	; () banked
  7851  002748  6F4F               	movwf	_setup_date& (0+255),b
  7852                           
  7853                           ;Setup_Time.c: 268: setup_date[1] = (setup_month%10) + '0';
  7854  00274A  C06F  F03D         	movff	_setup_month,___awmod@dividend
  7855  00274E  6A3E               	clrf	___awmod@dividend+1,c
  7856  002750  0E00               	movlw	0
  7857  002752  6E40               	movwf	___awmod@divisor+1,c
  7858  002754  0E0A               	movlw	10
  7859  002756  6E3F               	movwf	___awmod@divisor,c
  7860  002758  EC08  F021         	call	___awmod	;wreg free
  7861  00275C  503D               	movf	?___awmod,w,c
  7862  00275E  0F30               	addlw	48
  7863  002760  0101               	movlb	1	; () banked
  7864  002762  6F50               	movwf	(_setup_date+1)& (0+255),b
  7865                           
  7866                           ;Setup_Time.c: 269: setup_date[3] = (setup_day/10) + '0'; ;
  7867  002764  C06E  F017         	movff	_setup_day,___awdiv@dividend
  7868  002768  6A18               	clrf	___awdiv@dividend+1,c
  7869  00276A  0E00               	movlw	0
  7870  00276C  6E1A               	movwf	___awdiv@divisor+1,c
  7871  00276E  0E0A               	movlw	10
  7872  002770  6E19               	movwf	___awdiv@divisor,c
  7873  002772  ECD0  F01E         	call	___awdiv	;wreg free
  7874  002776  5017               	movf	?___awdiv,w,c
  7875  002778  0F30               	addlw	48
  7876  00277A  0101               	movlb	1	; () banked
  7877  00277C  6F52               	movwf	(_setup_date+3)& (0+255),b
  7878                           
  7879                           ;Setup_Time.c: 270: setup_date[4] = (setup_day%10) + '0'; ;
  7880  00277E  C06E  F03D         	movff	_setup_day,___awmod@dividend
  7881  002782  6A3E               	clrf	___awmod@dividend+1,c
  7882  002784  0E00               	movlw	0
  7883  002786  6E40               	movwf	___awmod@divisor+1,c
  7884  002788  0E0A               	movlw	10
  7885  00278A  6E3F               	movwf	___awmod@divisor,c
  7886  00278C  EC08  F021         	call	___awmod	;wreg free
  7887  002790  503D               	movf	?___awmod,w,c
  7888  002792  0F30               	addlw	48
  7889  002794  0101               	movlb	1	; () banked
  7890  002796  6F53               	movwf	(_setup_date+4)& (0+255),b
  7891                           
  7892                           ;Setup_Time.c: 271: setup_date[6] = (setup_year/10) + '0'; ;
  7893  002798  C0B3  F017         	movff	_setup_year,___awdiv@dividend
  7894  00279C  6A18               	clrf	___awdiv@dividend+1,c
  7895  00279E  0E00               	movlw	0
  7896  0027A0  6E1A               	movwf	___awdiv@divisor+1,c
  7897  0027A2  0E0A               	movlw	10
  7898  0027A4  6E19               	movwf	___awdiv@divisor,c
  7899  0027A6  ECD0  F01E         	call	___awdiv	;wreg free
  7900  0027AA  5017               	movf	?___awdiv,w,c
  7901  0027AC  0F30               	addlw	48
  7902  0027AE  0101               	movlb	1	; () banked
  7903  0027B0  6F55               	movwf	(_setup_date+6)& (0+255),b
  7904                           
  7905                           ;Setup_Time.c: 272: setup_date[7] = (setup_year%10) + '0'; ;
  7906  0027B2  C0B3  F03D         	movff	_setup_year,___awmod@dividend
  7907  0027B6  6A3E               	clrf	___awmod@dividend+1,c
  7908  0027B8  0E00               	movlw	0
  7909  0027BA  6E40               	movwf	___awmod@divisor+1,c
  7910  0027BC  0E0A               	movlw	10
  7911  0027BE  6E3F               	movwf	___awmod@divisor,c
  7912  0027C0  EC08  F021         	call	___awmod	;wreg free
  7913  0027C4  503D               	movf	?___awmod,w,c
  7914  0027C6  0F30               	addlw	48
  7915  0027C8  0101               	movlb	1	; () banked
  7916  0027CA  6F56               	movwf	(_setup_date+7)& (0+255),b
  7917                           
  7918                           ; BSR set to: 1
  7919                           ;Setup_Time.c: 274: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  7920  0027CC  0E34               	movlw	52
  7921  0027CE  6E39               	movwf	drawtext@y,c
  7922  0027D0  0E58               	movlw	low _setup_time
  7923  0027D2  6E3A               	movwf	drawtext@_text,c
  7924  0027D4  0E01               	movlw	high _setup_time
  7925  0027D6  6E3B               	movwf	drawtext@_text+1,c
  7926  0027D8  0E07               	movlw	7
  7927  0027DA  6E3D               	movwf	drawtext@color+1,c
  7928  0027DC  683C               	setf	drawtext@color,c
  7929  0027DE  0E00               	movlw	0
  7930  0027E0  6E3F               	movwf	drawtext@bg+1,c
  7931  0027E2  0E00               	movlw	0
  7932  0027E4  6E3E               	movwf	drawtext@bg,c
  7933  0027E6  0E02               	movlw	2
  7934  0027E8  6E40               	movwf	drawtext@size,c
  7935  0027EA  0E0F               	movlw	15
  7936  0027EC  ECAB  F01A         	call	_drawtext
  7937                           
  7938                           ;Setup_Time.c: 275: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7939  0027F0  0E52               	movlw	82
  7940  0027F2  6E39               	movwf	drawtext@y,c
  7941  0027F4  0E4F               	movlw	low _setup_date
  7942  0027F6  6E3A               	movwf	drawtext@_text,c
  7943  0027F8  0E01               	movlw	high _setup_date
  7944  0027FA  6E3B               	movwf	drawtext@_text+1,c
  7945  0027FC  0E07               	movlw	7
  7946  0027FE  6E3D               	movwf	drawtext@color+1,c
  7947  002800  0EE0               	movlw	224
  7948  002802  6E3C               	movwf	drawtext@color,c
  7949  002804  0E00               	movlw	0
  7950  002806  6E3F               	movwf	drawtext@bg+1,c
  7951  002808  0E00               	movlw	0
  7952  00280A  6E3E               	movwf	drawtext@bg,c
  7953  00280C  0E02               	movlw	2
  7954  00280E  6E40               	movwf	drawtext@size,c
  7955  002810  0E0F               	movlw	15
  7956  002812  ECAB  F01A         	call	_drawtext
  7957  002816  0012               	return		;funcret
  7958  002818                     __end_of_Update_Setup_Time_Screen:
  7959                           	opt stack 0
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           postdec1	equ	0xFE5
  7967                           fsr1l	equ	0xFE1
  7968                           status	equ	0xFD8
  7969                           
  7970 ;; *************** function _Do_Setup_Alarm_Time *****************
  7971 ;; Defined at:
  7972 ;;		line 24 in file "Setup_Alarm_Time.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;		None
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;		None
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  2  380[None  ] int 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;Total ram usage:        0 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:   11
  7993 ;; This function calls:
  7994 ;;		_DS3231_Read_Alarm_Time
  7995 ;;		_Decrease_Alarm_Time
  7996 ;;		_Do_Beep_Bad
  7997 ;;		_Do_Beep_Good
  7998 ;;		_Do_Save_New_Alarm_Time
  7999 ;;		_Exit_Setup_Alarm_Time
  8000 ;;		_Go_Next_Alarm_Field
  8001 ;;		_Go_Prev_Alarm_Field
  8002 ;;		_Increase_Alarm_Time
  8003 ;;		_Initialize_Setup_Alarm_Time_Screen
  8004 ;;		_Update_Setup_Alarm_Time_Screen
  8005 ;;		_bcd_2_dec
  8006 ;;		_check_for_button_input
  8007 ;; This function is called by:
  8008 ;;		_main
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text34
  8013  003A42                     __ptext34:
  8014                           	opt stack 0
  8015  003A42                     _Do_Setup_Alarm_Time:
  8016                           	opt stack 19
  8017                           
  8018                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8019                           
  8020                           ;incstack = 0
  8021  003A42  0E00               	movlw	0
  8022  003A44  0100               	movlb	0	; () banked
  8023  003A46  6FA3               	movwf	_Select_Alarm_Field& (0+255),b
  8024                           
  8025                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8026  003A48  0E01               	movlw	1
  8027  003A4A  0100               	movlb	0	; () banked
  8028  003A4C  6F9E               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8032  003A4E  EC1C  F024         	call	_DS3231_Read_Alarm_Time	;wreg free
  8033                           
  8034                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8035  003A52  5066               	movf	_alarm_second,w,c
  8036  003A54  ECFB  F025         	call	_bcd_2_dec
  8037  003A58  6E66               	movwf	_alarm_second,c
  8038                           
  8039                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8040  003A5A  5065               	movf	_alarm_minute,w,c
  8041  003A5C  ECFB  F025         	call	_bcd_2_dec
  8042  003A60  6E65               	movwf	_alarm_minute,c
  8043                           
  8044                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8045  003A62  5064               	movf	_alarm_hour,w,c
  8046  003A64  ECFB  F025         	call	_bcd_2_dec
  8047  003A68  6E64               	movwf	_alarm_hour,c
  8048                           
  8049                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8050  003A6A  C066  F0AE         	movff	_alarm_second,_setup_alarm_second
  8051                           
  8052                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8053  003A6E  C065  F0AD         	movff	_alarm_minute,_setup_alarm_minute
  8054                           
  8055                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8056  003A72  C064  F0AC         	movff	_alarm_hour,_setup_alarm_hour
  8057                           
  8058                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8059  003A76  ECF5  F01B         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8060                           
  8061                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8062  003A7A  EC52  F019         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8063                           
  8064                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8065  003A7E  D03C               	goto	l10734
  8066  003A80                     l10698:
  8067                           
  8068                           ;Setup_Alarm_Time.c: 38: {
  8069                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8070  003A80  ECB0  F01F         	call	_check_for_button_input	;wreg free
  8071  003A84  06E8               	decf	wreg,f,c
  8072  003A86  A4D8               	btfss	status,2,c
  8073  003A88  D037               	goto	l10734
  8074                           
  8075                           ;Setup_Alarm_Time.c: 40: {
  8076                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8077  003A8A  0E02               	movlw	2
  8078  003A8C  6469               	cpfsgt	_found,c
  8079  003A8E  D031               	goto	l10732
  8080  003A90  0E09               	movlw	9
  8081  003A92  6069               	cpfslt	_found,c
  8082  003A94  D02E               	goto	l10732
  8083                           
  8084                           ;Setup_Alarm_Time.c: 42: {
  8085                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8086  003A96  EC51  F027         	call	_Do_Beep_Good	;wreg free
  8087                           
  8088                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8089  003A9A  0E03               	movlw	3
  8090  003A9C  1869               	xorwf	_found,w,c
  8091  003A9E  A4D8               	btfss	status,2,c
  8092  003AA0  D003               	goto	l10710
  8093  003AA2  ECB1  F026         	call	_Go_Prev_Alarm_Field	;wreg free
  8094  003AA6  D000               	goto	l10710
  8095  003AA8                     l10710:
  8096                           
  8097                           ;Setup_Alarm_Time.c: 45: if (found == 4) Go_Next_Alarm_Field();
  8098  003AA8  0E04               	movlw	4
  8099  003AAA  1869               	xorwf	_found,w,c
  8100  003AAC  A4D8               	btfss	status,2,c
  8101  003AAE  D003               	goto	l10714
  8102  003AB0  ECC1  F026         	call	_Go_Next_Alarm_Field	;wreg free
  8103  003AB4  D000               	goto	l10714
  8104  003AB6                     l10714:
  8105                           
  8106                           ;Setup_Alarm_Time.c: 46: if (found == 5) Do_Save_New_Alarm_Time();
  8107  003AB6  0E05               	movlw	5
  8108  003AB8  1869               	xorwf	_found,w,c
  8109  003ABA  A4D8               	btfss	status,2,c
  8110  003ABC  D003               	goto	l10718
  8111  003ABE  EC45  F027         	call	_Do_Save_New_Alarm_Time	;wreg free
  8112  003AC2  D000               	goto	l10718
  8113  003AC4                     l10718:
  8114                           
  8115                           ;Setup_Alarm_Time.c: 47: if (found == 6) Decrease_Alarm_Time();
  8116  003AC4  0E06               	movlw	6
  8117  003AC6  1869               	xorwf	_found,w,c
  8118  003AC8  A4D8               	btfss	status,2,c
  8119  003ACA  D003               	goto	l10722
  8120  003ACC  ECB9  F022         	call	_Decrease_Alarm_Time	;wreg free
  8121  003AD0  D000               	goto	l10722
  8122  003AD2                     l10722:
  8123                           
  8124                           ;Setup_Alarm_Time.c: 48: if (found == 7) Increase_Alarm_Time();
  8125  003AD2  0E07               	movlw	7
  8126  003AD4  1869               	xorwf	_found,w,c
  8127  003AD6  A4D8               	btfss	status,2,c
  8128  003AD8  D003               	goto	l10726
  8129  003ADA  EC88  F022         	call	_Increase_Alarm_Time	;wreg free
  8130  003ADE  D000               	goto	l10726
  8131  003AE0                     l10726:
  8132                           
  8133                           ;Setup_Alarm_Time.c: 49: if (found == 8) Exit_Setup_Alarm_Time();
  8134  003AE0  0E08               	movlw	8
  8135  003AE2  1869               	xorwf	_found,w,c
  8136  003AE4  A4D8               	btfss	status,2,c
  8137  003AE6  D003               	goto	l10730
  8138  003AE8  EC01  F028         	call	_Exit_Setup_Alarm_Time	;wreg free
  8139  003AEC  D000               	goto	l10730
  8140  003AEE                     l10730:
  8141                           
  8142                           ;Setup_Alarm_Time.c: 51: found = 0xff;
  8143  003AEE  6869               	setf	_found,c
  8144                           
  8145                           ;Setup_Alarm_Time.c: 52: }
  8146  003AF0  D003               	goto	l10734
  8147  003AF2                     l10732:
  8148                           
  8149                           ;Setup_Alarm_Time.c: 53: else
  8150                           ;Setup_Alarm_Time.c: 54: {
  8151                           ;Setup_Alarm_Time.c: 55: Do_Beep_Bad();
  8152  003AF2  EC5D  F027         	call	_Do_Beep_Bad	;wreg free
  8153  003AF6  D000               	goto	l10734
  8154  003AF8                     l10734:
  8155  003AF8  0100               	movlb	0	; () banked
  8156  003AFA  059E               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8157  003AFC  B4D8               	btfsc	status,2,c
  8158  003AFE  D7C0               	goto	l10698
  8159                           
  8160                           ; BSR set to: 0
  8161                           
  8162                           ; BSR set to: 0
  8163  003B00  0012               	return		;funcret
  8164  003B02                     __end_of_Do_Setup_Alarm_Time:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           postinc0	equ	0xFEE
  8171                           wreg	equ	0xFE8
  8172                           postdec1	equ	0xFE5
  8173                           fsr1l	equ	0xFE1
  8174                           status	equ	0xFD8
  8175                           
  8176 ;; *************** function _check_for_button_input *****************
  8177 ;; Defined at:
  8178 ;;		line 14 in file "utils.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;		None
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;  j               2   20[BANK0 ] int 
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  1    wreg      unsigned char 
  8185 ;; Registers used:
  8186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 0/0
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;Total ram usage:        3 bytes
  8197 ;; Hardware stack levels used:    1
  8198 ;; Hardware stack levels required when called:    6
  8199 ;; This function calls:
  8200 ;;		_printf
  8201 ;; This function is called by:
  8202 ;;		_main
  8203 ;;		_Do_Setup_Alarm_Time
  8204 ;;		_Setup_Temp_Fan
  8205 ;;		_Do_Setup_Time
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text35
  8210  003F60                     __ptext35:
  8211                           	opt stack 0
  8212  003F60                     _check_for_button_input:
  8213                           	opt stack 24
  8214                           
  8215                           ;utils.c: 16: if (nec_ok == 1)
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;incstack = 0
  8219  003F60  0100               	movlb	0	; () banked
  8220  003F62  0595               	decf	_nec_ok& (0+255),w,b
  8221  003F64  0100               	movlb	0	; () banked
  8222  003F66  1196               	iorwf	(_nec_ok+1)& (0+255),w,b
  8223  003F68  A4D8               	btfss	status,2,c
  8224  003F6A  D043               	goto	l1338
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;utils.c: 17: {
  8228                           ;utils.c: 18: nec_ok = 0;
  8229  003F6C  0E00               	movlw	0
  8230  003F6E  0100               	movlb	0	; () banked
  8231  003F70  6F96               	movwf	(_nec_ok+1)& (0+255),b
  8232  003F72  0E00               	movlw	0
  8233  003F74  6F95               	movwf	_nec_ok& (0+255),b
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;utils.c: 22: INTCONbits.INT0IE = 1;
  8237  003F76  88F2               	bsf	intcon,4,c	;volatile
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;utils.c: 23: INTCON2bits.INTEDG0 = 0;
  8241  003F78  9CF1               	bcf	intcon2,6,c	;volatile
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;utils.c: 25: found = 0xff;
  8245  003F7A  6869               	setf	_found,c
  8246                           
  8247                           ;utils.c: 26: for (int j=0; j< 21; j++)
  8248  003F7C  0E00               	movlw	0
  8249  003F7E  0100               	movlb	0	; () banked
  8250  003F80  6FF2               	movwf	(check_for_button_input@j+1)& (0+255),b
  8251  003F82  0E00               	movlw	0
  8252  003F84  6FF1               	movwf	check_for_button_input@j& (0+255),b
  8253  003F86                     l10090:
  8254                           
  8255                           ; BSR set to: 0
  8256  003F86  0100               	movlb	0	; () banked
  8257  003F88  BFF2               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  8258  003F8A  D00A               	goto	l10094
  8259  003F8C  0100               	movlb	0	; () banked
  8260  003F8E  51F2               	movf	(check_for_button_input@j+1)& (0+255),w,b
  8261  003F90  E121               	bnz	l10104
  8262  003F92  0E15               	movlw	21
  8263  003F94  0100               	movlb	0	; () banked
  8264  003F96  5DF1               	subwf	check_for_button_input@j& (0+255),w,b
  8265  003F98  B0D8               	btfsc	status,0,c
  8266  003F9A  D01C               	goto	l10104
  8267  003F9C  D001               	goto	l10094
  8268                           
  8269                           ; BSR set to: 0
  8270  003F9E  D01A               	goto	l10104
  8271  003FA0                     l10094:
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;utils.c: 27: {
  8275                           ;utils.c: 28: if (Nec_code1 == array1[j])
  8276  003FA0  0E1F               	movlw	low _array1
  8277  003FA2  0100               	movlb	0	; () banked
  8278  003FA4  25F1               	addwf	check_for_button_input@j& (0+255),w,b
  8279  003FA6  6ED9               	movwf	fsr2l,c
  8280  003FA8  0E01               	movlw	high _array1
  8281  003FAA  0100               	movlb	0	; () banked
  8282  003FAC  21F2               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  8283  003FAE  6EDA               	movwf	fsr2h,c
  8284  003FB0  0100               	movlb	0	; () banked
  8285  003FB2  51A1               	movf	_Nec_code1& (0+255),w,b
  8286  003FB4  18DE               	xorwf	postinc2,w,c
  8287  003FB6  A4D8               	btfss	status,2,c
  8288  003FB8  D008               	goto	l10100
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;utils.c: 29: {
  8292                           ;utils.c: 30: found = j;
  8293  003FBA  C0F1  F069         	movff	check_for_button_input@j,_found
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;utils.c: 31: j = 21;
  8297  003FBE  0E00               	movlw	0
  8298  003FC0  0100               	movlb	0	; () banked
  8299  003FC2  6FF2               	movwf	(check_for_button_input@j+1)& (0+255),b
  8300  003FC4  0E15               	movlw	21
  8301  003FC6  6FF1               	movwf	check_for_button_input@j& (0+255),b
  8302  003FC8  D000               	goto	l10100
  8303  003FCA                     l10100:
  8304                           
  8305                           ; BSR set to: 0
  8306  003FCA  0100               	movlb	0	; () banked
  8307  003FCC  4BF1               	infsnz	check_for_button_input@j& (0+255),f,b
  8308  003FCE  2BF2               	incf	(check_for_button_input@j+1)& (0+255),f,b
  8309  003FD0  D7DA               	goto	l10090
  8310                           
  8311                           ; BSR set to: 0
  8312  003FD2  D000               	goto	l10104
  8313  003FD4                     l10104:
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;utils.c: 32: }
  8317                           ;utils.c: 33: }
  8318                           ;utils.c: 35: if (found == 0xff)
  8319  003FD4  2869               	incf	_found,w,c
  8320  003FD6  A4D8               	btfss	status,2,c
  8321  003FD8  D00A               	goto	l10114
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;utils.c: 36: {
  8325                           ;utils.c: 37: printf ("Cannot find button \r\n");
  8326  003FDA  0EE9               	movlw	low STR_35
  8327  003FDC  0100               	movlb	0	; () banked
  8328  003FDE  6FDD               	movwf	printf@f& (0+255),b
  8329  003FE0  0EFE               	movlw	high STR_35
  8330  003FE2  0100               	movlb	0	; () banked
  8331  003FE4  6FDE               	movwf	(printf@f+1)& (0+255),b
  8332  003FE6  EC0E  F000         	call	_printf	;wreg free
  8333                           
  8334                           ;utils.c: 38: return (0);
  8335  003FEA  0E00               	movlw	0
  8336                           
  8337                           ;utils.c: 39: }
  8338  003FEC  D002               	goto	l1338
  8339  003FEE                     l10114:
  8340                           
  8341                           ;utils.c: 40: else
  8342                           ;utils.c: 41: {
  8343                           ;utils.c: 42: return (1);
  8344  003FEE  0E01               	movlw	1
  8345  003FF0  D000               	goto	l1338
  8346  003FF2                     l1338:
  8347  003FF2  0012               	return		;funcret
  8348  003FF4                     __end_of_check_for_button_input:
  8349                           	opt stack 0
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           intcon	equ	0xFF2
  8355                           intcon2	equ	0xFF1
  8356                           postinc0	equ	0xFEE
  8357                           wreg	equ	0xFE8
  8358                           postdec1	equ	0xFE5
  8359                           fsr1l	equ	0xFE1
  8360                           postinc2	equ	0xFDE
  8361                           fsr2h	equ	0xFDA
  8362                           fsr2l	equ	0xFD9
  8363                           status	equ	0xFD8
  8364                           
  8365 ;; *************** function _bcd_2_dec *****************
  8366 ;; Defined at:
  8367 ;;		line 47 in file "utils.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;  bcd             1    wreg     unsigned char 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;  bcd             1   20[COMRAM] unsigned char 
  8372 ;;  dec             2   18[COMRAM] int 
  8373 ;; Return value:  Size  Location     Type
  8374 ;;                  1    wreg      unsigned char 
  8375 ;; Registers used:
  8376 ;;		wreg, status,2, status,0, prodl, prodh
  8377 ;; Tracked objects:
  8378 ;;		On entry : 0/0
  8379 ;;		On exit  : 0/0
  8380 ;;		Unchanged: 0/0
  8381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;Total ram usage:        5 bytes
  8387 ;; Hardware stack levels used:    1
  8388 ;; Hardware stack levels required when called:    2
  8389 ;; This function calls:
  8390 ;;		Nothing
  8391 ;; This function is called by:
  8392 ;;		_Do_Setup_Alarm_Time
  8393 ;;		_Do_Setup_Time
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           	psect	text36
  8398  004BF6                     __ptext36:
  8399                           	opt stack 0
  8400  004BF6                     _bcd_2_dec:
  8401                           	opt stack 27
  8402                           
  8403                           ;incstack = 0
  8404                           ;bcd_2_dec@bcd stored from wreg
  8405  004BF6  6E15               	movwf	bcd_2_dec@bcd,c
  8406                           
  8407                           ;utils.c: 49: int dec;
  8408                           ;utils.c: 50: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8409  004BF8  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8410  004BFC  0E0F               	movlw	15
  8411  004BFE  1611               	andwf	??_bcd_2_dec,f,c
  8412  004C00  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8413  004C04  3A12               	swapf	??_bcd_2_dec+1,f,c
  8414  004C06  0E0F               	movlw	15
  8415  004C08  1612               	andwf	??_bcd_2_dec+1,f,c
  8416  004C0A  5012               	movf	??_bcd_2_dec+1,w,c
  8417  004C0C  0D0A               	mullw	10
  8418  004C0E  5011               	movf	??_bcd_2_dec,w,c
  8419  004C10  24F3               	addwf	prodl,w,c
  8420  004C12  6E13               	movwf	bcd_2_dec@dec,c
  8421  004C14  0E00               	movlw	0
  8422  004C16  20F4               	addwfc	prodh,w,c
  8423  004C18  6E14               	movwf	bcd_2_dec@dec+1,c
  8424                           
  8425                           ;utils.c: 51: return dec;
  8426  004C1A  5013               	movf	bcd_2_dec@dec,w,c
  8427  004C1C  D000               	goto	l1342
  8428  004C1E                     l1342:
  8429  004C1E  0012               	return		;funcret
  8430  004C20                     __end_of_bcd_2_dec:
  8431                           	opt stack 0
  8432                           tblptru	equ	0xFF8
  8433                           tblptrh	equ	0xFF7
  8434                           tblptrl	equ	0xFF6
  8435                           tablat	equ	0xFF5
  8436                           prodh	equ	0xFF4
  8437                           prodl	equ	0xFF3
  8438                           intcon	equ	0xFF2
  8439                           intcon2	equ	0xFF1
  8440                           postinc0	equ	0xFEE
  8441                           wreg	equ	0xFE8
  8442                           postdec1	equ	0xFE5
  8443                           fsr1l	equ	0xFE1
  8444                           postinc2	equ	0xFDE
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8450 ;; Defined at:
  8451 ;;		line 149 in file "Setup_Alarm_Time.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;		None
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;		None
  8456 ;; Return value:  Size  Location     Type
  8457 ;;		None               void
  8458 ;; Registers used:
  8459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;Total ram usage:        0 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    9
  8472 ;; This function calls:
  8473 ;;		_drawtext
  8474 ;;		_fillRect
  8475 ;;		_fillScreen
  8476 ;;		_strcpy
  8477 ;; This function is called by:
  8478 ;;		_Do_Setup_Alarm_Time
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           	psect	text37
  8483  0037EA                     __ptext37:
  8484                           	opt stack 0
  8485  0037EA                     _Initialize_Setup_Alarm_Time_Screen:
  8486                           	opt stack 20
  8487                           
  8488                           ;Setup_Alarm_Time.c: 151: fillScreen(0x0000);
  8489                           
  8490                           ;incstack = 0
  8491  0037EA  0E00               	movlw	0
  8492  0037EC  6E25               	movwf	fillScreen@color+1,c
  8493  0037EE  0E00               	movlw	0
  8494  0037F0  6E24               	movwf	fillScreen@color,c
  8495  0037F2  EC10  F027         	call	_fillScreen	;wreg free
  8496                           
  8497                           ;Setup_Alarm_Time.c: 153: strcpy(txt, "ECE3301L Sp21 Final");
  8498  0037F6  C062  F011         	movff	_txt,strcpy@to
  8499  0037FA  C063  F012         	movff	_txt+1,strcpy@to+1
  8500  0037FE  0E29               	movlw	low STR_24
  8501  003800  6E13               	movwf	strcpy@from,c
  8502  003802  0EFF               	movlw	high STR_24
  8503  003804  6E14               	movwf	strcpy@from+1,c
  8504  003806  ECB4  F025         	call	_strcpy	;wreg free
  8505                           
  8506                           ;Setup_Alarm_Time.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8507  00380A  0E01               	movlw	1
  8508  00380C  6E39               	movwf	drawtext@y,c
  8509  00380E  C062  F03A         	movff	_txt,drawtext@_text
  8510  003812  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8511  003816  0EFF               	movlw	255
  8512  003818  6E3D               	movwf	drawtext@color+1,c
  8513  00381A  683C               	setf	drawtext@color,c
  8514  00381C  0E00               	movlw	0
  8515  00381E  6E3F               	movwf	drawtext@bg+1,c
  8516  003820  0E00               	movlw	0
  8517  003822  6E3E               	movwf	drawtext@bg,c
  8518  003824  0E01               	movlw	1
  8519  003826  6E40               	movwf	drawtext@size,c
  8520  003828  0E01               	movlw	1
  8521  00382A  ECAB  F01A         	call	_drawtext
  8522                           
  8523                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "Alrm Setup");
  8524  00382E  C062  F011         	movff	_txt,strcpy@to
  8525  003832  C063  F012         	movff	_txt+1,strcpy@to+1
  8526  003836  0EB9               	movlw	low STR_25
  8527  003838  6E13               	movwf	strcpy@from,c
  8528  00383A  0EFF               	movlw	high STR_25
  8529  00383C  6E14               	movwf	strcpy@from+1,c
  8530  00383E  ECB4  F025         	call	_strcpy	;wreg free
  8531                           
  8532                           ;Setup_Alarm_Time.c: 158: drawtext(1+5 , 1+20, txt, 0xF81F, 0x0000, 2);
  8533  003842  0E15               	movlw	21
  8534  003844  6E39               	movwf	drawtext@y,c
  8535  003846  C062  F03A         	movff	_txt,drawtext@_text
  8536  00384A  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8537  00384E  0EF8               	movlw	248
  8538  003850  6E3D               	movwf	drawtext@color+1,c
  8539  003852  0E1F               	movlw	31
  8540  003854  6E3C               	movwf	drawtext@color,c
  8541  003856  0E00               	movlw	0
  8542  003858  6E3F               	movwf	drawtext@bg+1,c
  8543  00385A  0E00               	movlw	0
  8544  00385C  6E3E               	movwf	drawtext@bg,c
  8545  00385E  0E02               	movlw	2
  8546  003860  6E40               	movwf	drawtext@size,c
  8547  003862  0E06               	movlw	6
  8548  003864  ECAB  F01A         	call	_drawtext
  8549                           
  8550                           ;Setup_Alarm_Time.c: 160: strcpy(txt, "Time");
  8551  003868  C062  F011         	movff	_txt,strcpy@to
  8552  00386C  C063  F012         	movff	_txt+1,strcpy@to+1
  8553  003870  0ECA               	movlw	low (STR_12+6)
  8554  003872  6E13               	movwf	strcpy@from,c
  8555  003874  0EFF               	movlw	high (STR_12+6)
  8556  003876  6E14               	movwf	strcpy@from+1,c
  8557  003878  ECB4  F025         	call	_strcpy	;wreg free
  8558                           
  8559                           ;Setup_Alarm_Time.c: 161: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8560  00387C  0E28               	movlw	40
  8561  00387E  6E39               	movwf	drawtext@y,c
  8562  003880  C062  F03A         	movff	_txt,drawtext@_text
  8563  003884  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8564  003888  0E00               	movlw	0
  8565  00388A  6E3D               	movwf	drawtext@color+1,c
  8566  00388C  0E1F               	movlw	31
  8567  00388E  6E3C               	movwf	drawtext@color,c
  8568  003890  0E00               	movlw	0
  8569  003892  6E3F               	movwf	drawtext@bg+1,c
  8570  003894  0E00               	movlw	0
  8571  003896  6E3E               	movwf	drawtext@bg,c
  8572  003898  0E01               	movlw	1
  8573  00389A  6E40               	movwf	drawtext@size,c
  8574  00389C  0E32               	movlw	50
  8575  00389E  ECAB  F01A         	call	_drawtext
  8576                           
  8577                           ;Setup_Alarm_Time.c: 162: fillRect(15-1, 52+16, 25,2,0x07FF);
  8578  0038A2  0E44               	movlw	68
  8579  0038A4  6E23               	movwf	fillRect@y,c
  8580  0038A6  0E19               	movlw	25
  8581  0038A8  6E24               	movwf	fillRect@w,c
  8582  0038AA  0E02               	movlw	2
  8583  0038AC  6E25               	movwf	fillRect@h,c
  8584  0038AE  0E07               	movlw	7
  8585  0038B0  6E27               	movwf	fillRect@color+1,c
  8586  0038B2  6826               	setf	fillRect@color,c
  8587  0038B4  0E0E               	movlw	14
  8588  0038B6  EC43  F024         	call	_fillRect
  8589  0038BA  0012               	return		;funcret
  8590  0038BC                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8591                           	opt stack 0
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           intcon2	equ	0xFF1
  8600                           postinc0	equ	0xFEE
  8601                           wreg	equ	0xFE8
  8602                           postdec1	equ	0xFE5
  8603                           fsr1l	equ	0xFE1
  8604                           postinc2	equ	0xFDE
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _Increase_Alarm_Time *****************
  8610 ;; Defined at:
  8611 ;;		line 61 in file "Setup_Alarm_Time.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;		None               void
  8618 ;; Registers used:
  8619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:   10
  8632 ;; This function calls:
  8633 ;;		_Update_Setup_Alarm_Time_Screen
  8634 ;; This function is called by:
  8635 ;;		_Do_Setup_Alarm_Time
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text38
  8640  004510                     __ptext38:
  8641                           	opt stack 0
  8642  004510                     _Increase_Alarm_Time:
  8643                           	opt stack 19
  8644                           
  8645                           ;Setup_Alarm_Time.c: 63: switch (Select_Alarm_Field)
  8646                           
  8647                           ;incstack = 0
  8648  004510  D021               	goto	l10200
  8649  004512                     l10180:
  8650                           
  8651                           ;Setup_Alarm_Time.c: 66: setup_alarm_hour++;
  8652  004512  0100               	movlb	0	; () banked
  8653  004514  2BAC               	incf	_setup_alarm_hour& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;Setup_Alarm_Time.c: 67: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  8657  004516  0E18               	movlw	24
  8658  004518  0100               	movlb	0	; () banked
  8659  00451A  19AC               	xorwf	_setup_alarm_hour& (0+255),w,b
  8660  00451C  A4D8               	btfss	status,2,c
  8661  00451E  D026               	goto	l10202
  8662                           
  8663                           ; BSR set to: 0
  8664  004520  0E00               	movlw	0
  8665  004522  0100               	movlb	0	; () banked
  8666  004524  6FAC               	movwf	_setup_alarm_hour& (0+255),b
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;Setup_Alarm_Time.c: 68: break;
  8670  004526  D022               	goto	l10202
  8671  004528                     l10186:
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;Setup_Alarm_Time.c: 72: setup_alarm_minute++;
  8675  004528  0100               	movlb	0	; () banked
  8676  00452A  2BAD               	incf	_setup_alarm_minute& (0+255),f,b
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;Setup_Alarm_Time.c: 73: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  8680  00452C  0E3C               	movlw	60
  8681  00452E  0100               	movlb	0	; () banked
  8682  004530  19AD               	xorwf	_setup_alarm_minute& (0+255),w,b
  8683  004532  A4D8               	btfss	status,2,c
  8684  004534  D01B               	goto	l10202
  8685                           
  8686                           ; BSR set to: 0
  8687  004536  0E00               	movlw	0
  8688  004538  0100               	movlb	0	; () banked
  8689  00453A  6FAD               	movwf	_setup_alarm_minute& (0+255),b
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;Setup_Alarm_Time.c: 74: break;
  8693  00453C  D017               	goto	l10202
  8694  00453E                     l10192:
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;Setup_Alarm_Time.c: 77: setup_alarm_second++;
  8698  00453E  0100               	movlb	0	; () banked
  8699  004540  2BAE               	incf	_setup_alarm_second& (0+255),f,b
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;Setup_Alarm_Time.c: 78: if (setup_alarm_second == 60) setup_alarm_second = 0;
  8703  004542  0E3C               	movlw	60
  8704  004544  0100               	movlb	0	; () banked
  8705  004546  19AE               	xorwf	_setup_alarm_second& (0+255),w,b
  8706  004548  A4D8               	btfss	status,2,c
  8707  00454A  D010               	goto	l10202
  8708                           
  8709                           ; BSR set to: 0
  8710  00454C  0E00               	movlw	0
  8711  00454E  0100               	movlb	0	; () banked
  8712  004550  6FAE               	movwf	_setup_alarm_second& (0+255),b
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;Setup_Alarm_Time.c: 84: }
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;Setup_Alarm_Time.c: 83: break;
  8719                           
  8720                           ;Setup_Alarm_Time.c: 82: default:
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;Setup_Alarm_Time.c: 79: break;
  8724  004552  D00C               	goto	l10202
  8725  004554                     l10200:
  8726  004554  0100               	movlb	0	; () banked
  8727  004556  51A3               	movf	_Select_Alarm_Field& (0+255),w,b
  8728                           
  8729                           ; Switch size 1, requested type "space"
  8730                           ; Number of cases is 3, Range of values is 0 to 2
  8731                           ; switch strategies available:
  8732                           ; Name         Instructions Cycles
  8733                           ; simple_byte           10     6 (average)
  8734                           ;	Chosen strategy is simple_byte
  8735  004558  0A00               	xorlw	0	; case 0
  8736  00455A  B4D8               	btfsc	status,2,c
  8737  00455C  D7DA               	goto	l10180
  8738  00455E  0A01               	xorlw	1	; case 1
  8739  004560  B4D8               	btfsc	status,2,c
  8740  004562  D7E2               	goto	l10186
  8741  004564  0A03               	xorlw	3	; case 2
  8742  004566  B4D8               	btfsc	status,2,c
  8743  004568  D7EA               	goto	l10192
  8744  00456A  D000               	goto	l10202
  8745  00456C                     l10202:
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;Setup_Alarm_Time.c: 85: Update_Setup_Alarm_Time_Screen();
  8749  00456C  EC52  F019         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8750  004570  0012               	return		;funcret
  8751  004572                     __end_of_Increase_Alarm_Time:
  8752                           	opt stack 0
  8753                           tblptru	equ	0xFF8
  8754                           tblptrh	equ	0xFF7
  8755                           tblptrl	equ	0xFF6
  8756                           tablat	equ	0xFF5
  8757                           prodh	equ	0xFF4
  8758                           prodl	equ	0xFF3
  8759                           intcon	equ	0xFF2
  8760                           intcon2	equ	0xFF1
  8761                           postinc0	equ	0xFEE
  8762                           wreg	equ	0xFE8
  8763                           postdec1	equ	0xFE5
  8764                           fsr1l	equ	0xFE1
  8765                           postinc2	equ	0xFDE
  8766                           fsr2h	equ	0xFDA
  8767                           fsr2l	equ	0xFD9
  8768                           status	equ	0xFD8
  8769                           
  8770 ;; *************** function _Go_Prev_Alarm_Field *****************
  8771 ;; Defined at:
  8772 ;;		line 126 in file "Setup_Alarm_Time.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;		None
  8777 ;; Return value:  Size  Location     Type
  8778 ;;		None               void
  8779 ;; Registers used:
  8780 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;Total ram usage:        0 bytes
  8791 ;; Hardware stack levels used:    1
  8792 ;; Hardware stack levels required when called:    8
  8793 ;; This function calls:
  8794 ;;		_Update_Setup_Screen_Cursor_Backward
  8795 ;; This function is called by:
  8796 ;;		_Do_Setup_Alarm_Time
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           	psect	text39
  8801  004D62                     __ptext39:
  8802                           	opt stack 0
  8803  004D62                     _Go_Prev_Alarm_Field:
  8804                           	opt stack 21
  8805                           
  8806                           ;Setup_Alarm_Time.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  8807                           
  8808                           ;incstack = 0
  8809  004D62  0100               	movlb	0	; () banked
  8810  004D64  51A3               	movf	_Select_Alarm_Field& (0+255),w,b
  8811  004D66  A4D8               	btfss	status,2,c
  8812  004D68  D004               	goto	l7494
  8813                           
  8814                           ; BSR set to: 0
  8815  004D6A  0E02               	movlw	2
  8816  004D6C  0100               	movlb	0	; () banked
  8817  004D6E  6FA3               	movwf	_Select_Alarm_Field& (0+255),b
  8818  004D70  D003               	goto	l7496
  8819  004D72                     l7494:
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;Setup_Alarm_Time.c: 129: else Select_Alarm_Field--;
  8823  004D72  0100               	movlb	0	; () banked
  8824  004D74  07A3               	decf	_Select_Alarm_Field& (0+255),f,b
  8825  004D76  D000               	goto	l7496
  8826  004D78                     l7496:
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;Setup_Alarm_Time.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  8830  004D78  0100               	movlb	0	; () banked
  8831  004D7A  51A3               	movf	_Select_Alarm_Field& (0+255),w,b
  8832  004D7C  ECCD  F010         	call	_Update_Setup_Screen_Cursor_Backward
  8833  004D80  0012               	return		;funcret
  8834  004D82                     __end_of_Go_Prev_Alarm_Field:
  8835                           	opt stack 0
  8836                           tblptru	equ	0xFF8
  8837                           tblptrh	equ	0xFF7
  8838                           tblptrl	equ	0xFF6
  8839                           tablat	equ	0xFF5
  8840                           prodh	equ	0xFF4
  8841                           prodl	equ	0xFF3
  8842                           intcon	equ	0xFF2
  8843                           intcon2	equ	0xFF1
  8844                           postinc0	equ	0xFEE
  8845                           wreg	equ	0xFE8
  8846                           postdec1	equ	0xFE5
  8847                           fsr1l	equ	0xFE1
  8848                           postinc2	equ	0xFDE
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8
  8852                           
  8853 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  8854 ;; Defined at:
  8855 ;;		line 317 in file "Setup_Time.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;  field           1    wreg     unsigned char 
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;  field           1   45[COMRAM] unsigned char 
  8860 ;;  xinc            1   47[COMRAM] unsigned char 
  8861 ;;  yinc            1   46[COMRAM] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;		None               void
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;Total ram usage:        3 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    7
  8878 ;; This function calls:
  8879 ;;		_fillRect
  8880 ;; This function is called by:
  8881 ;;		_Go_Prev_Alarm_Field
  8882 ;;		_Go_Prev_Field
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text40
  8887  00219A                     __ptext40:
  8888                           	opt stack 0
  8889  00219A                     _Update_Setup_Screen_Cursor_Backward:
  8890                           	opt stack 21
  8891                           
  8892                           ;incstack = 0
  8893                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  8894  00219A  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  8895                           
  8896                           ;Setup_Time.c: 319: char xinc = 36;
  8897  00219C  0E24               	movlw	36
  8898  00219E  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  8899                           
  8900                           ;Setup_Time.c: 320: char yinc = 30;
  8901  0021A0  0E1E               	movlw	30
  8902  0021A2  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  8903                           
  8904                           ;Setup_Time.c: 321: switch (field)
  8905  0021A4  D0BF               	goto	l7302
  8906  0021A6                     l7280:
  8907                           
  8908                           ;Setup_Time.c: 324: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8909  0021A6  0E44               	movlw	68
  8910  0021A8  6E23               	movwf	fillRect@y,c
  8911  0021AA  0E19               	movlw	25
  8912  0021AC  6E24               	movwf	fillRect@w,c
  8913  0021AE  0E02               	movlw	2
  8914  0021B0  6E25               	movwf	fillRect@h,c
  8915  0021B2  0E00               	movlw	0
  8916  0021B4  6E27               	movwf	fillRect@color+1,c
  8917  0021B6  0E00               	movlw	0
  8918  0021B8  6E26               	movwf	fillRect@color,c
  8919  0021BA  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8920  0021BC  0F0E               	addlw	14
  8921  0021BE  EC43  F024         	call	_fillRect
  8922                           
  8923                           ;Setup_Time.c: 325: fillRect(15-1, 52+16, 25,2,0x07FF);
  8924  0021C2  0E44               	movlw	68
  8925  0021C4  6E23               	movwf	fillRect@y,c
  8926  0021C6  0E19               	movlw	25
  8927  0021C8  6E24               	movwf	fillRect@w,c
  8928  0021CA  0E02               	movlw	2
  8929  0021CC  6E25               	movwf	fillRect@h,c
  8930  0021CE  0E07               	movlw	7
  8931  0021D0  6E27               	movwf	fillRect@color+1,c
  8932  0021D2  6826               	setf	fillRect@color,c
  8933  0021D4  0E0E               	movlw	14
  8934  0021D6  EC43  F024         	call	_fillRect
  8935                           
  8936                           ;Setup_Time.c: 326: break;
  8937  0021DA  D0B8               	goto	l1272
  8938  0021DC                     l7282:
  8939                           
  8940                           ;Setup_Time.c: 329: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8941  0021DC  0E44               	movlw	68
  8942  0021DE  6E23               	movwf	fillRect@y,c
  8943  0021E0  0E19               	movlw	25
  8944  0021E2  6E24               	movwf	fillRect@w,c
  8945  0021E4  0E02               	movlw	2
  8946  0021E6  6E25               	movwf	fillRect@h,c
  8947  0021E8  0E00               	movlw	0
  8948  0021EA  6E27               	movwf	fillRect@color+1,c
  8949  0021EC  0E00               	movlw	0
  8950  0021EE  6E26               	movwf	fillRect@color,c
  8951  0021F0  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8952  0021F2  0D02               	mullw	2
  8953  0021F4  50F3               	movf	prodl,w,c
  8954  0021F6  0F0E               	addlw	14
  8955  0021F8  EC43  F024         	call	_fillRect
  8956                           
  8957                           ;Setup_Time.c: 330: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8958  0021FC  0E44               	movlw	68
  8959  0021FE  6E23               	movwf	fillRect@y,c
  8960  002200  0E19               	movlw	25
  8961  002202  6E24               	movwf	fillRect@w,c
  8962  002204  0E02               	movlw	2
  8963  002206  6E25               	movwf	fillRect@h,c
  8964  002208  0E07               	movlw	7
  8965  00220A  6E27               	movwf	fillRect@color+1,c
  8966  00220C  6826               	setf	fillRect@color,c
  8967  00220E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8968  002210  0F0E               	addlw	14
  8969  002212  EC43  F024         	call	_fillRect
  8970                           
  8971                           ;Setup_Time.c: 331: break;
  8972  002216  D09A               	goto	l1272
  8973  002218                     l7286:
  8974                           
  8975                           ;Setup_Time.c: 334: fillRect(15-1, 52+16, 25,2,0x0000);
  8976  002218  0E44               	movlw	68
  8977  00221A  6E23               	movwf	fillRect@y,c
  8978  00221C  0E19               	movlw	25
  8979  00221E  6E24               	movwf	fillRect@w,c
  8980  002220  0E02               	movlw	2
  8981  002222  6E25               	movwf	fillRect@h,c
  8982  002224  0E00               	movlw	0
  8983  002226  6E27               	movwf	fillRect@color+1,c
  8984  002228  0E00               	movlw	0
  8985  00222A  6E26               	movwf	fillRect@color,c
  8986  00222C  0E0E               	movlw	14
  8987  00222E  EC43  F024         	call	_fillRect
  8988                           
  8989                           ;Setup_Time.c: 335: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8990  002232  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8991  002234  0F44               	addlw	68
  8992  002236  6E23               	movwf	fillRect@y,c
  8993  002238  0E19               	movlw	25
  8994  00223A  6E24               	movwf	fillRect@w,c
  8995  00223C  0E02               	movlw	2
  8996  00223E  6E25               	movwf	fillRect@h,c
  8997  002240  0E00               	movlw	0
  8998  002242  6E27               	movwf	fillRect@color+1,c
  8999  002244  0E00               	movlw	0
  9000  002246  6E26               	movwf	fillRect@color,c
  9001  002248  0E0E               	movlw	14
  9002  00224A  EC43  F024         	call	_fillRect
  9003                           
  9004                           ;Setup_Time.c: 336: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9005  00224E  0E44               	movlw	68
  9006  002250  6E23               	movwf	fillRect@y,c
  9007  002252  0E19               	movlw	25
  9008  002254  6E24               	movwf	fillRect@w,c
  9009  002256  0E02               	movlw	2
  9010  002258  6E25               	movwf	fillRect@h,c
  9011  00225A  0E07               	movlw	7
  9012  00225C  6E27               	movwf	fillRect@color+1,c
  9013  00225E  6826               	setf	fillRect@color,c
  9014  002260  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9015  002262  0D02               	mullw	2
  9016  002264  50F3               	movf	prodl,w,c
  9017  002266  0F0E               	addlw	14
  9018  002268  EC43  F024         	call	_fillRect
  9019                           
  9020                           ;Setup_Time.c: 337: break;
  9021  00226C  D06F               	goto	l1272
  9022  00226E                     l7290:
  9023                           
  9024                           ;Setup_Time.c: 340: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9025  00226E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9026  002270  0F44               	addlw	68
  9027  002272  6E23               	movwf	fillRect@y,c
  9028  002274  0E19               	movlw	25
  9029  002276  6E24               	movwf	fillRect@w,c
  9030  002278  0E02               	movlw	2
  9031  00227A  6E25               	movwf	fillRect@h,c
  9032  00227C  0E00               	movlw	0
  9033  00227E  6E27               	movwf	fillRect@color+1,c
  9034  002280  0E00               	movlw	0
  9035  002282  6E26               	movwf	fillRect@color,c
  9036  002284  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9037  002286  0F0E               	addlw	14
  9038  002288  EC43  F024         	call	_fillRect
  9039                           
  9040                           ;Setup_Time.c: 341: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9041  00228C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9042  00228E  0F44               	addlw	68
  9043  002290  6E23               	movwf	fillRect@y,c
  9044  002292  0E19               	movlw	25
  9045  002294  6E24               	movwf	fillRect@w,c
  9046  002296  0E02               	movlw	2
  9047  002298  6E25               	movwf	fillRect@h,c
  9048  00229A  0E07               	movlw	7
  9049  00229C  6E27               	movwf	fillRect@color+1,c
  9050  00229E  6826               	setf	fillRect@color,c
  9051  0022A0  0E0E               	movlw	14
  9052  0022A2  EC43  F024         	call	_fillRect
  9053                           
  9054                           ;Setup_Time.c: 342: break;
  9055  0022A6  D052               	goto	l1272
  9056  0022A8                     l7292:
  9057                           
  9058                           ;Setup_Time.c: 345: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9059  0022A8  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9060  0022AA  0F44               	addlw	68
  9061  0022AC  6E23               	movwf	fillRect@y,c
  9062  0022AE  0E19               	movlw	25
  9063  0022B0  6E24               	movwf	fillRect@w,c
  9064  0022B2  0E02               	movlw	2
  9065  0022B4  6E25               	movwf	fillRect@h,c
  9066  0022B6  0E00               	movlw	0
  9067  0022B8  6E27               	movwf	fillRect@color+1,c
  9068  0022BA  0E00               	movlw	0
  9069  0022BC  6E26               	movwf	fillRect@color,c
  9070  0022BE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9071  0022C0  0D02               	mullw	2
  9072  0022C2  50F3               	movf	prodl,w,c
  9073  0022C4  0F0E               	addlw	14
  9074  0022C6  EC43  F024         	call	_fillRect
  9075                           
  9076                           ;Setup_Time.c: 346: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9077  0022CA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9078  0022CC  0F44               	addlw	68
  9079  0022CE  6E23               	movwf	fillRect@y,c
  9080  0022D0  0E19               	movlw	25
  9081  0022D2  6E24               	movwf	fillRect@w,c
  9082  0022D4  0E02               	movlw	2
  9083  0022D6  6E25               	movwf	fillRect@h,c
  9084  0022D8  0E07               	movlw	7
  9085  0022DA  6E27               	movwf	fillRect@color+1,c
  9086  0022DC  6826               	setf	fillRect@color,c
  9087  0022DE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9088  0022E0  0F0E               	addlw	14
  9089  0022E2  EC43  F024         	call	_fillRect
  9090                           
  9091                           ;Setup_Time.c: 347: break;
  9092  0022E6  D032               	goto	l1272
  9093  0022E8                     l7296:
  9094                           
  9095                           ;Setup_Time.c: 350: fillRect(15-1, 52+16, 25,2,0x0000);
  9096  0022E8  0E44               	movlw	68
  9097  0022EA  6E23               	movwf	fillRect@y,c
  9098  0022EC  0E19               	movlw	25
  9099  0022EE  6E24               	movwf	fillRect@w,c
  9100  0022F0  0E02               	movlw	2
  9101  0022F2  6E25               	movwf	fillRect@h,c
  9102  0022F4  0E00               	movlw	0
  9103  0022F6  6E27               	movwf	fillRect@color+1,c
  9104  0022F8  0E00               	movlw	0
  9105  0022FA  6E26               	movwf	fillRect@color,c
  9106  0022FC  0E0E               	movlw	14
  9107  0022FE  EC43  F024         	call	_fillRect
  9108                           
  9109                           ;Setup_Time.c: 351: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9110  002302  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9111  002304  0F44               	addlw	68
  9112  002306  6E23               	movwf	fillRect@y,c
  9113  002308  0E19               	movlw	25
  9114  00230A  6E24               	movwf	fillRect@w,c
  9115  00230C  0E02               	movlw	2
  9116  00230E  6E25               	movwf	fillRect@h,c
  9117  002310  0E07               	movlw	7
  9118  002312  6E27               	movwf	fillRect@color+1,c
  9119  002314  6826               	setf	fillRect@color,c
  9120  002316  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9121  002318  0D02               	mullw	2
  9122  00231A  50F3               	movf	prodl,w,c
  9123  00231C  0F0E               	addlw	14
  9124  00231E  EC43  F024         	call	_fillRect
  9125                           
  9126                           ;Setup_Time.c: 353: }
  9127                           
  9128                           ;Setup_Time.c: 352: break;
  9129  002322  D014               	goto	l1272
  9130  002324                     l7302:
  9131  002324  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9132                           
  9133                           ; Switch size 1, requested type "space"
  9134                           ; Number of cases is 6, Range of values is 0 to 5
  9135                           ; switch strategies available:
  9136                           ; Name         Instructions Cycles
  9137                           ; simple_byte           19    10 (average)
  9138                           ;	Chosen strategy is simple_byte
  9139  002326  0A00               	xorlw	0	; case 0
  9140  002328  B4D8               	btfsc	status,2,c
  9141  00232A  D73D               	goto	l7280
  9142  00232C  0A01               	xorlw	1	; case 1
  9143  00232E  B4D8               	btfsc	status,2,c
  9144  002330  D755               	goto	l7282
  9145  002332  0A03               	xorlw	3	; case 2
  9146  002334  B4D8               	btfsc	status,2,c
  9147  002336  D770               	goto	l7286
  9148  002338  0A01               	xorlw	1	; case 3
  9149  00233A  B4D8               	btfsc	status,2,c
  9150  00233C  D798               	goto	l7290
  9151  00233E  0A07               	xorlw	7	; case 4
  9152  002340  B4D8               	btfsc	status,2,c
  9153  002342  D7B2               	goto	l7292
  9154  002344  0A01               	xorlw	1	; case 5
  9155  002346  B4D8               	btfsc	status,2,c
  9156  002348  D7CF               	goto	l7296
  9157  00234A  D000               	goto	l1272
  9158  00234C                     l1272:
  9159  00234C  0012               	return		;funcret
  9160  00234E                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9161                           	opt stack 0
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon2	equ	0xFF1
  9170                           postinc0	equ	0xFEE
  9171                           wreg	equ	0xFE8
  9172                           postdec1	equ	0xFE5
  9173                           fsr1l	equ	0xFE1
  9174                           postinc2	equ	0xFDE
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _Go_Next_Alarm_Field *****************
  9180 ;; Defined at:
  9181 ;;		line 117 in file "Setup_Alarm_Time.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;		None               void
  9188 ;; Registers used:
  9189 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;Total ram usage:        0 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    8
  9202 ;; This function calls:
  9203 ;;		_Update_Setup_Screen_Cursor_Forward
  9204 ;; This function is called by:
  9205 ;;		_Do_Setup_Alarm_Time
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           	psect	text41
  9210  004D82                     __ptext41:
  9211                           	opt stack 0
  9212  004D82                     _Go_Next_Alarm_Field:
  9213                           	opt stack 21
  9214                           
  9215                           ;Setup_Alarm_Time.c: 120: Select_Alarm_Field++;
  9216                           
  9217                           ;incstack = 0
  9218  004D82  0100               	movlb	0	; () banked
  9219  004D84  2BA3               	incf	_Select_Alarm_Field& (0+255),f,b
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;Setup_Alarm_Time.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9223  004D86  0E03               	movlw	3
  9224  004D88  0100               	movlb	0	; () banked
  9225  004D8A  19A3               	xorwf	_Select_Alarm_Field& (0+255),w,b
  9226  004D8C  A4D8               	btfss	status,2,c
  9227  004D8E  D004               	goto	l7504
  9228                           
  9229                           ; BSR set to: 0
  9230  004D90  0E00               	movlw	0
  9231  004D92  0100               	movlb	0	; () banked
  9232  004D94  6FA3               	movwf	_Select_Alarm_Field& (0+255),b
  9233  004D96  D000               	goto	l7504
  9234  004D98                     l7504:
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;Setup_Alarm_Time.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9238  004D98  0100               	movlb	0	; () banked
  9239  004D9A  51A3               	movf	_Select_Alarm_Field& (0+255),w,b
  9240  004D9C  ECF0  F00F         	call	_Update_Setup_Screen_Cursor_Forward
  9241  004DA0  0012               	return		;funcret
  9242  004DA2                     __end_of_Go_Next_Alarm_Field:
  9243                           	opt stack 0
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           prodh	equ	0xFF4
  9249                           prodl	equ	0xFF3
  9250                           intcon	equ	0xFF2
  9251                           intcon2	equ	0xFF1
  9252                           postinc0	equ	0xFEE
  9253                           wreg	equ	0xFE8
  9254                           postdec1	equ	0xFE5
  9255                           fsr1l	equ	0xFE1
  9256                           postinc2	equ	0xFDE
  9257                           fsr2h	equ	0xFDA
  9258                           fsr2l	equ	0xFD9
  9259                           status	equ	0xFD8
  9260                           
  9261 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9262 ;; Defined at:
  9263 ;;		line 278 in file "Setup_Time.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  field           1    wreg     unsigned char 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  field           1   45[COMRAM] unsigned char 
  9268 ;;  xinc            1   47[COMRAM] unsigned char 
  9269 ;;  yinc            1   46[COMRAM] unsigned char 
  9270 ;; Return value:  Size  Location     Type
  9271 ;;		None               void
  9272 ;; Registers used:
  9273 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;Total ram usage:        3 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    7
  9286 ;; This function calls:
  9287 ;;		_fillRect
  9288 ;; This function is called by:
  9289 ;;		_Go_Next_Alarm_Field
  9290 ;;		_Go_Next_Field
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           	psect	text42
  9295  001FE0                     __ptext42:
  9296                           	opt stack 0
  9297  001FE0                     _Update_Setup_Screen_Cursor_Forward:
  9298                           	opt stack 21
  9299                           
  9300                           ;incstack = 0
  9301                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9302  001FE0  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9303                           
  9304                           ;Setup_Time.c: 280: char xinc = 36;
  9305  001FE2  0E24               	movlw	36
  9306  001FE4  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9307                           
  9308                           ;Setup_Time.c: 281: char yinc = 30;
  9309  001FE6  0E1E               	movlw	30
  9310  001FE8  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9311                           
  9312                           ;Setup_Time.c: 282: switch (field)
  9313  001FEA  D0C2               	goto	l7276
  9314  001FEC                     l7254:
  9315                           
  9316                           ;Setup_Time.c: 285: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9317  001FEC  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9318  001FEE  0F44               	addlw	68
  9319  001FF0  6E23               	movwf	fillRect@y,c
  9320  001FF2  0E19               	movlw	25
  9321  001FF4  6E24               	movwf	fillRect@w,c
  9322  001FF6  0E02               	movlw	2
  9323  001FF8  6E25               	movwf	fillRect@h,c
  9324  001FFA  0E00               	movlw	0
  9325  001FFC  6E27               	movwf	fillRect@color+1,c
  9326  001FFE  0E00               	movlw	0
  9327  002000  6E26               	movwf	fillRect@color,c
  9328  002002  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9329  002004  0D02               	mullw	2
  9330  002006  50F3               	movf	prodl,w,c
  9331  002008  0F0E               	addlw	14
  9332  00200A  EC43  F024         	call	_fillRect
  9333                           
  9334                           ;Setup_Time.c: 286: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9335  00200E  0E44               	movlw	68
  9336  002010  6E23               	movwf	fillRect@y,c
  9337  002012  0E19               	movlw	25
  9338  002014  6E24               	movwf	fillRect@w,c
  9339  002016  0E02               	movlw	2
  9340  002018  6E25               	movwf	fillRect@h,c
  9341  00201A  0E00               	movlw	0
  9342  00201C  6E27               	movwf	fillRect@color+1,c
  9343  00201E  0E00               	movlw	0
  9344  002020  6E26               	movwf	fillRect@color,c
  9345  002022  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9346  002024  0D02               	mullw	2
  9347  002026  50F3               	movf	prodl,w,c
  9348  002028  0F0E               	addlw	14
  9349  00202A  EC43  F024         	call	_fillRect
  9350                           
  9351                           ;Setup_Time.c: 287: fillRect(15-1, 52+16, 25,2,0x07FF);
  9352  00202E  0E44               	movlw	68
  9353  002030  6E23               	movwf	fillRect@y,c
  9354  002032  0E19               	movlw	25
  9355  002034  6E24               	movwf	fillRect@w,c
  9356  002036  0E02               	movlw	2
  9357  002038  6E25               	movwf	fillRect@h,c
  9358  00203A  0E07               	movlw	7
  9359  00203C  6E27               	movwf	fillRect@color+1,c
  9360  00203E  6826               	setf	fillRect@color,c
  9361  002040  0E0E               	movlw	14
  9362  002042  EC43  F024         	call	_fillRect
  9363                           
  9364                           ;Setup_Time.c: 288: break;
  9365  002046  D0A8               	goto	l1261
  9366  002048                     l7258:
  9367                           
  9368                           ;Setup_Time.c: 291: fillRect(15-1, 52+16, 25,2,0x0000);
  9369  002048  0E44               	movlw	68
  9370  00204A  6E23               	movwf	fillRect@y,c
  9371  00204C  0E19               	movlw	25
  9372  00204E  6E24               	movwf	fillRect@w,c
  9373  002050  0E02               	movlw	2
  9374  002052  6E25               	movwf	fillRect@h,c
  9375  002054  0E00               	movlw	0
  9376  002056  6E27               	movwf	fillRect@color+1,c
  9377  002058  0E00               	movlw	0
  9378  00205A  6E26               	movwf	fillRect@color,c
  9379  00205C  0E0E               	movlw	14
  9380  00205E  EC43  F024         	call	_fillRect
  9381                           
  9382                           ;Setup_Time.c: 292: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9383  002062  0E44               	movlw	68
  9384  002064  6E23               	movwf	fillRect@y,c
  9385  002066  0E19               	movlw	25
  9386  002068  6E24               	movwf	fillRect@w,c
  9387  00206A  0E02               	movlw	2
  9388  00206C  6E25               	movwf	fillRect@h,c
  9389  00206E  0E07               	movlw	7
  9390  002070  6E27               	movwf	fillRect@color+1,c
  9391  002072  6826               	setf	fillRect@color,c
  9392  002074  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9393  002076  0F0E               	addlw	14
  9394  002078  EC43  F024         	call	_fillRect
  9395                           
  9396                           ;Setup_Time.c: 293: break;
  9397  00207C  D08D               	goto	l1261
  9398  00207E                     l7260:
  9399                           
  9400                           ;Setup_Time.c: 296: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9401  00207E  0E44               	movlw	68
  9402  002080  6E23               	movwf	fillRect@y,c
  9403  002082  0E19               	movlw	25
  9404  002084  6E24               	movwf	fillRect@w,c
  9405  002086  0E02               	movlw	2
  9406  002088  6E25               	movwf	fillRect@h,c
  9407  00208A  0E00               	movlw	0
  9408  00208C  6E27               	movwf	fillRect@color+1,c
  9409  00208E  0E00               	movlw	0
  9410  002090  6E26               	movwf	fillRect@color,c
  9411  002092  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9412  002094  0F0E               	addlw	14
  9413  002096  EC43  F024         	call	_fillRect
  9414                           
  9415                           ;Setup_Time.c: 297: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9416  00209A  0E44               	movlw	68
  9417  00209C  6E23               	movwf	fillRect@y,c
  9418  00209E  0E19               	movlw	25
  9419  0020A0  6E24               	movwf	fillRect@w,c
  9420  0020A2  0E02               	movlw	2
  9421  0020A4  6E25               	movwf	fillRect@h,c
  9422  0020A6  0E07               	movlw	7
  9423  0020A8  6E27               	movwf	fillRect@color+1,c
  9424  0020AA  6826               	setf	fillRect@color,c
  9425  0020AC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9426  0020AE  0D02               	mullw	2
  9427  0020B0  50F3               	movf	prodl,w,c
  9428  0020B2  0F0E               	addlw	14
  9429  0020B4  EC43  F024         	call	_fillRect
  9430                           
  9431                           ;Setup_Time.c: 298: break;
  9432  0020B8  D06F               	goto	l1261
  9433  0020BA                     l7264:
  9434                           
  9435                           ;Setup_Time.c: 301: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9436  0020BA  0E44               	movlw	68
  9437  0020BC  6E23               	movwf	fillRect@y,c
  9438  0020BE  0E19               	movlw	25
  9439  0020C0  6E24               	movwf	fillRect@w,c
  9440  0020C2  0E02               	movlw	2
  9441  0020C4  6E25               	movwf	fillRect@h,c
  9442  0020C6  0E00               	movlw	0
  9443  0020C8  6E27               	movwf	fillRect@color+1,c
  9444  0020CA  0E00               	movlw	0
  9445  0020CC  6E26               	movwf	fillRect@color,c
  9446  0020CE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9447  0020D0  0D02               	mullw	2
  9448  0020D2  50F3               	movf	prodl,w,c
  9449  0020D4  0F0E               	addlw	14
  9450  0020D6  EC43  F024         	call	_fillRect
  9451                           
  9452                           ;Setup_Time.c: 302: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9453  0020DA  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9454  0020DC  0F44               	addlw	68
  9455  0020DE  6E23               	movwf	fillRect@y,c
  9456  0020E0  0E19               	movlw	25
  9457  0020E2  6E24               	movwf	fillRect@w,c
  9458  0020E4  0E02               	movlw	2
  9459  0020E6  6E25               	movwf	fillRect@h,c
  9460  0020E8  0E07               	movlw	7
  9461  0020EA  6E27               	movwf	fillRect@color+1,c
  9462  0020EC  6826               	setf	fillRect@color,c
  9463  0020EE  0E0E               	movlw	14
  9464  0020F0  EC43  F024         	call	_fillRect
  9465                           
  9466                           ;Setup_Time.c: 303: break;
  9467  0020F4  D051               	goto	l1261
  9468  0020F6                     l7268:
  9469                           
  9470                           ;Setup_Time.c: 306: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9471  0020F6  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9472  0020F8  0F44               	addlw	68
  9473  0020FA  6E23               	movwf	fillRect@y,c
  9474  0020FC  0E19               	movlw	25
  9475  0020FE  6E24               	movwf	fillRect@w,c
  9476  002100  0E02               	movlw	2
  9477  002102  6E25               	movwf	fillRect@h,c
  9478  002104  0E00               	movlw	0
  9479  002106  6E27               	movwf	fillRect@color+1,c
  9480  002108  0E00               	movlw	0
  9481  00210A  6E26               	movwf	fillRect@color,c
  9482  00210C  0E0E               	movlw	14
  9483  00210E  EC43  F024         	call	_fillRect
  9484                           
  9485                           ;Setup_Time.c: 307: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9486  002112  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9487  002114  0F44               	addlw	68
  9488  002116  6E23               	movwf	fillRect@y,c
  9489  002118  0E19               	movlw	25
  9490  00211A  6E24               	movwf	fillRect@w,c
  9491  00211C  0E02               	movlw	2
  9492  00211E  6E25               	movwf	fillRect@h,c
  9493  002120  0E07               	movlw	7
  9494  002122  6E27               	movwf	fillRect@color+1,c
  9495  002124  6826               	setf	fillRect@color,c
  9496  002126  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9497  002128  0F0E               	addlw	14
  9498  00212A  EC43  F024         	call	_fillRect
  9499                           
  9500                           ;Setup_Time.c: 308: break;
  9501  00212E  D034               	goto	l1261
  9502  002130                     l7270:
  9503                           
  9504                           ;Setup_Time.c: 311: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9505  002130  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9506  002132  0F44               	addlw	68
  9507  002134  6E23               	movwf	fillRect@y,c
  9508  002136  0E19               	movlw	25
  9509  002138  6E24               	movwf	fillRect@w,c
  9510  00213A  0E02               	movlw	2
  9511  00213C  6E25               	movwf	fillRect@h,c
  9512  00213E  0E00               	movlw	0
  9513  002140  6E27               	movwf	fillRect@color+1,c
  9514  002142  0E00               	movlw	0
  9515  002144  6E26               	movwf	fillRect@color,c
  9516  002146  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9517  002148  0F0E               	addlw	14
  9518  00214A  EC43  F024         	call	_fillRect
  9519                           
  9520                           ;Setup_Time.c: 312: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9521  00214E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9522  002150  0F44               	addlw	68
  9523  002152  6E23               	movwf	fillRect@y,c
  9524  002154  0E19               	movlw	25
  9525  002156  6E24               	movwf	fillRect@w,c
  9526  002158  0E02               	movlw	2
  9527  00215A  6E25               	movwf	fillRect@h,c
  9528  00215C  0E07               	movlw	7
  9529  00215E  6E27               	movwf	fillRect@color+1,c
  9530  002160  6826               	setf	fillRect@color,c
  9531  002162  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9532  002164  0D02               	mullw	2
  9533  002166  50F3               	movf	prodl,w,c
  9534  002168  0F0E               	addlw	14
  9535  00216A  EC43  F024         	call	_fillRect
  9536                           
  9537                           ;Setup_Time.c: 314: }
  9538                           
  9539                           ;Setup_Time.c: 313: break;
  9540  00216E  D014               	goto	l1261
  9541  002170                     l7276:
  9542  002170  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  9543                           
  9544                           ; Switch size 1, requested type "space"
  9545                           ; Number of cases is 6, Range of values is 0 to 5
  9546                           ; switch strategies available:
  9547                           ; Name         Instructions Cycles
  9548                           ; simple_byte           19    10 (average)
  9549                           ;	Chosen strategy is simple_byte
  9550  002172  0A00               	xorlw	0	; case 0
  9551  002174  B4D8               	btfsc	status,2,c
  9552  002176  D73A               	goto	l7254
  9553  002178  0A01               	xorlw	1	; case 1
  9554  00217A  B4D8               	btfsc	status,2,c
  9555  00217C  D765               	goto	l7258
  9556  00217E  0A03               	xorlw	3	; case 2
  9557  002180  B4D8               	btfsc	status,2,c
  9558  002182  D77D               	goto	l7260
  9559  002184  0A01               	xorlw	1	; case 3
  9560  002186  B4D8               	btfsc	status,2,c
  9561  002188  D798               	goto	l7264
  9562  00218A  0A07               	xorlw	7	; case 4
  9563  00218C  B4D8               	btfsc	status,2,c
  9564  00218E  D7B3               	goto	l7268
  9565  002190  0A01               	xorlw	1	; case 5
  9566  002192  B4D8               	btfsc	status,2,c
  9567  002194  D7CD               	goto	l7270
  9568  002196  D000               	goto	l1261
  9569  002198                     l1261:
  9570  002198  0012               	return		;funcret
  9571  00219A                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9572                           	opt stack 0
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           prodh	equ	0xFF4
  9578                           prodl	equ	0xFF3
  9579                           intcon	equ	0xFF2
  9580                           intcon2	equ	0xFF1
  9581                           postinc0	equ	0xFEE
  9582                           wreg	equ	0xFE8
  9583                           postdec1	equ	0xFE5
  9584                           fsr1l	equ	0xFE1
  9585                           postinc2	equ	0xFDE
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           
  9590 ;; *************** function _Exit_Setup_Alarm_Time *****************
  9591 ;; Defined at:
  9592 ;;		line 133 in file "Setup_Alarm_Time.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:   10
  9613 ;; This function calls:
  9614 ;;		_DS3231_Read_Time
  9615 ;;		_Initialize_Screen
  9616 ;; This function is called by:
  9617 ;;		_Do_Setup_Alarm_Time
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text43
  9622  005002                     __ptext43:
  9623                           	opt stack 0
  9624  005002                     _Exit_Setup_Alarm_Time:
  9625                           	opt stack 19
  9626                           
  9627                           ;Setup_Alarm_Time.c: 135: DS3231_Read_Time();
  9628                           
  9629                           ;incstack = 0
  9630  005002  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  9631                           
  9632                           ;Setup_Alarm_Time.c: 136: Initialize_Screen();
  9633  005006  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  9634                           
  9635                           ;Setup_Alarm_Time.c: 137: In_Alarm_Time_Setup = 0;
  9636  00500A  0E00               	movlw	0
  9637  00500C  0100               	movlb	0	; () banked
  9638  00500E  6F9E               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9639                           
  9640                           ; BSR set to: 0
  9641  005010  0012               	return		;funcret
  9642  005012                     __end_of_Exit_Setup_Alarm_Time:
  9643                           	opt stack 0
  9644                           tblptru	equ	0xFF8
  9645                           tblptrh	equ	0xFF7
  9646                           tblptrl	equ	0xFF6
  9647                           tablat	equ	0xFF5
  9648                           prodh	equ	0xFF4
  9649                           prodl	equ	0xFF3
  9650                           intcon	equ	0xFF2
  9651                           intcon2	equ	0xFF1
  9652                           postinc0	equ	0xFEE
  9653                           wreg	equ	0xFE8
  9654                           postdec1	equ	0xFE5
  9655                           fsr1l	equ	0xFE1
  9656                           postinc2	equ	0xFDE
  9657                           fsr2h	equ	0xFDA
  9658                           fsr2l	equ	0xFD9
  9659                           status	equ	0xFD8
  9660                           
  9661 ;; *************** function _Do_Save_New_Alarm_Time *****************
  9662 ;; Defined at:
  9663 ;;		line 140 in file "Setup_Alarm_Time.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;		None
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;		None
  9668 ;; Return value:  Size  Location     Type
  9669 ;;		None               void
  9670 ;; Registers used:
  9671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;Total ram usage:        0 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:   10
  9684 ;; This function calls:
  9685 ;;		_DS3231_Read_Alarm_Time
  9686 ;;		_DS3231_Read_Time
  9687 ;;		_DS3231_Write_Alarm_Time
  9688 ;;		_Initialize_Screen
  9689 ;; This function is called by:
  9690 ;;		_Do_Setup_Alarm_Time
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text44
  9695  004E8A                     __ptext44:
  9696                           	opt stack 0
  9697  004E8A                     _Do_Save_New_Alarm_Time:
  9698                           	opt stack 19
  9699                           
  9700                           ;Setup_Alarm_Time.c: 142: DS3231_Write_Alarm_Time();
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;incstack = 0
  9704  004E8A  ECC7  F020         	call	_DS3231_Write_Alarm_Time	;wreg free
  9705                           
  9706                           ;Setup_Alarm_Time.c: 143: DS3231_Read_Alarm_Time();
  9707  004E8E  EC1C  F024         	call	_DS3231_Read_Alarm_Time	;wreg free
  9708                           
  9709                           ;Setup_Alarm_Time.c: 144: DS3231_Read_Time();
  9710  004E92  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
  9711                           
  9712                           ;Setup_Alarm_Time.c: 145: Initialize_Screen();
  9713  004E96  EC2A  F00B         	call	_Initialize_Screen	;wreg free
  9714                           
  9715                           ;Setup_Alarm_Time.c: 146: In_Alarm_Time_Setup = 0;
  9716  004E9A  0E00               	movlw	0
  9717  004E9C  0100               	movlb	0	; () banked
  9718  004E9E  6F9E               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9719                           
  9720                           ; BSR set to: 0
  9721  004EA0  0012               	return		;funcret
  9722  004EA2                     __end_of_Do_Save_New_Alarm_Time:
  9723                           	opt stack 0
  9724                           tblptru	equ	0xFF8
  9725                           tblptrh	equ	0xFF7
  9726                           tblptrl	equ	0xFF6
  9727                           tablat	equ	0xFF5
  9728                           prodh	equ	0xFF4
  9729                           prodl	equ	0xFF3
  9730                           intcon	equ	0xFF2
  9731                           intcon2	equ	0xFF1
  9732                           postinc0	equ	0xFEE
  9733                           wreg	equ	0xFE8
  9734                           postdec1	equ	0xFE5
  9735                           fsr1l	equ	0xFE1
  9736                           postinc2	equ	0xFDE
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function _Initialize_Screen *****************
  9742 ;; Defined at:
  9743 ;;		line 36 in file "Main_Screen.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;		None
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;		None
  9748 ;; Return value:  Size  Location     Type
  9749 ;;                  2  350[None  ] int 
  9750 ;; Registers used:
  9751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9752 ;; Tracked objects:
  9753 ;;		On entry : 0/0
  9754 ;;		On exit  : 0/0
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;Total ram usage:        0 bytes
  9762 ;; Hardware stack levels used:    1
  9763 ;; Hardware stack levels required when called:    9
  9764 ;; This function calls:
  9765 ;;		_LCD_Reset
  9766 ;;		_TFT_GreenTab_Initialize
  9767 ;;		_drawCircle
  9768 ;;		_drawtext
  9769 ;;		_fillScreen
  9770 ;;		_strcpy
  9771 ;; This function is called by:
  9772 ;;		_main
  9773 ;;		_Exit_Setup_Alarm_Time
  9774 ;;		_Do_Save_New_Alarm_Time
  9775 ;;		_Exit_Setup_Fan_Temp
  9776 ;;		_Do_Save_New_Fan_Temp
  9777 ;;		_Do_Save_New_Time
  9778 ;;		_Exit_Time_Setup
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text45
  9783  001654                     __ptext45:
  9784                           	opt stack 0
  9785  001654                     _Initialize_Screen:
  9786                           	opt stack 19
  9787                           
  9788                           ;Main_Screen.c: 38: LCD_Reset();
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;incstack = 0
  9792  001654  ECBB  F027         	call	_LCD_Reset	;wreg free
  9793                           
  9794                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
  9795  001658  ECE5  F025         	call	_TFT_GreenTab_Initialize	;wreg free
  9796                           
  9797                           ;Main_Screen.c: 40: fillScreen(0x0000);
  9798  00165C  0E00               	movlw	0
  9799  00165E  6E25               	movwf	fillScreen@color+1,c
  9800  001660  0E00               	movlw	0
  9801  001662  6E24               	movwf	fillScreen@color,c
  9802  001664  EC10  F027         	call	_fillScreen	;wreg free
  9803                           
  9804                           ;Main_Screen.c: 42: strcpy(txt, "ECE3301L Sp21 Final\0");
  9805  001668  C062  F011         	movff	_txt,strcpy@to
  9806  00166C  C063  F012         	movff	_txt+1,strcpy@to+1
  9807  001670  0EFF               	movlw	low STR_6
  9808  001672  6E13               	movwf	strcpy@from,c
  9809  001674  0EFE               	movlw	high STR_6
  9810  001676  6E14               	movwf	strcpy@from+1,c
  9811  001678  ECB4  F025         	call	_strcpy	;wreg free
  9812                           
  9813                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  9814  00167C  0E01               	movlw	1
  9815  00167E  6E39               	movwf	drawtext@y,c
  9816  001680  C062  F03A         	movff	_txt,drawtext@_text
  9817  001684  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9818  001688  0EFF               	movlw	255
  9819  00168A  6E3D               	movwf	drawtext@color+1,c
  9820  00168C  683C               	setf	drawtext@color,c
  9821  00168E  0E00               	movlw	0
  9822  001690  6E3F               	movwf	drawtext@bg+1,c
  9823  001692  0E00               	movlw	0
  9824  001694  6E3E               	movwf	drawtext@bg,c
  9825  001696  0E01               	movlw	1
  9826  001698  6E40               	movwf	drawtext@size,c
  9827  00169A  0E01               	movlw	1
  9828  00169C  ECAB  F01A         	call	_drawtext
  9829                           
  9830                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
  9831  0016A0  C062  F011         	movff	_txt,strcpy@to
  9832  0016A4  C063  F012         	movff	_txt+1,strcpy@to+1
  9833  0016A8  0E70               	movlw	low STR_7
  9834  0016AA  6E13               	movwf	strcpy@from,c
  9835  0016AC  0EFF               	movlw	high STR_7
  9836  0016AE  6E14               	movwf	strcpy@from+1,c
  9837  0016B0  ECB4  F025         	call	_strcpy	;wreg free
  9838                           
  9839                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  9840  0016B4  0E0B               	movlw	11
  9841  0016B6  6E39               	movwf	drawtext@y,c
  9842  0016B8  C062  F03A         	movff	_txt,drawtext@_text
  9843  0016BC  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9844  0016C0  0EF8               	movlw	248
  9845  0016C2  6E3D               	movwf	drawtext@color+1,c
  9846  0016C4  0E1F               	movlw	31
  9847  0016C6  6E3C               	movwf	drawtext@color,c
  9848  0016C8  0E00               	movlw	0
  9849  0016CA  6E3F               	movwf	drawtext@bg+1,c
  9850  0016CC  0E00               	movlw	0
  9851  0016CE  6E3E               	movwf	drawtext@bg,c
  9852  0016D0  0E01               	movlw	1
  9853  0016D2  6E40               	movwf	drawtext@size,c
  9854  0016D4  0E18               	movlw	24
  9855  0016D6  ECAB  F01A         	call	_drawtext
  9856                           
  9857                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
  9858  0016DA  0E00               	movlw	0
  9859  0016DC  6E1D               	movwf	drawCircle@x0+1,c
  9860  0016DE  0E28               	movlw	40
  9861  0016E0  6E1C               	movwf	drawCircle@x0,c
  9862  0016E2  0E00               	movlw	0
  9863  0016E4  6E1F               	movwf	drawCircle@y0+1,c
  9864  0016E6  0E17               	movlw	23
  9865  0016E8  6E1E               	movwf	drawCircle@y0,c
  9866  0016EA  0E00               	movlw	0
  9867  0016EC  6E21               	movwf	drawCircle@r+1,c
  9868  0016EE  0E02               	movlw	2
  9869  0016F0  6E20               	movwf	drawCircle@r,c
  9870  0016F2  0EFF               	movlw	255
  9871  0016F4  6E23               	movwf	drawCircle@color+1,c
  9872  0016F6  0EE0               	movlw	224
  9873  0016F8  6E22               	movwf	drawCircle@color,c
  9874  0016FA  ECA7  F011         	call	_drawCircle	;wreg free
  9875                           
  9876                           ;Main_Screen.c: 48: strcpy(txt, "C/");
  9877  0016FE  C062  F011         	movff	_txt,strcpy@to
  9878  001702  C063  F012         	movff	_txt+1,strcpy@to+1
  9879  001706  0EF5               	movlw	low STR_8
  9880  001708  6E13               	movwf	strcpy@from,c
  9881  00170A  0EFF               	movlw	high STR_8
  9882  00170C  6E14               	movwf	strcpy@from+1,c
  9883  00170E  ECB4  F025         	call	_strcpy	;wreg free
  9884                           
  9885                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  9886  001712  0E17               	movlw	23
  9887  001714  6E39               	movwf	drawtext@y,c
  9888  001716  C062  F03A         	movff	_txt,drawtext@_text
  9889  00171A  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9890  00171E  0EFF               	movlw	255
  9891  001720  6E3D               	movwf	drawtext@color+1,c
  9892  001722  0EE0               	movlw	224
  9893  001724  6E3C               	movwf	drawtext@color,c
  9894  001726  0E00               	movlw	0
  9895  001728  6E3F               	movwf	drawtext@bg+1,c
  9896  00172A  0E00               	movlw	0
  9897  00172C  6E3E               	movwf	drawtext@bg,c
  9898  00172E  0E02               	movlw	2
  9899  001730  6E40               	movwf	drawtext@size,c
  9900  001732  0E2D               	movlw	45
  9901  001734  ECAB  F01A         	call	_drawtext
  9902                           
  9903                           ;Main_Screen.c: 50: strcpy(txt, "F");
  9904  001738  C062  F011         	movff	_txt,strcpy@to
  9905  00173C  C063  F012         	movff	_txt+1,strcpy@to+1
  9906  001740  0EEF               	movlw	low (STR_21+2)
  9907  001742  6E13               	movwf	strcpy@from,c
  9908  001744  0EFF               	movlw	high (STR_21+2)
  9909  001746  6E14               	movwf	strcpy@from+1,c
  9910  001748  ECB4  F025         	call	_strcpy	;wreg free
  9911                           
  9912                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
  9913  00174C  0E00               	movlw	0
  9914  00174E  6E1D               	movwf	drawCircle@x0+1,c
  9915  001750  0E6E               	movlw	110
  9916  001752  6E1C               	movwf	drawCircle@x0,c
  9917  001754  0E00               	movlw	0
  9918  001756  6E1F               	movwf	drawCircle@y0+1,c
  9919  001758  0E17               	movlw	23
  9920  00175A  6E1E               	movwf	drawCircle@y0,c
  9921  00175C  0E00               	movlw	0
  9922  00175E  6E21               	movwf	drawCircle@r+1,c
  9923  001760  0E02               	movlw	2
  9924  001762  6E20               	movwf	drawCircle@r,c
  9925  001764  0EFF               	movlw	255
  9926  001766  6E23               	movwf	drawCircle@color+1,c
  9927  001768  0EE0               	movlw	224
  9928  00176A  6E22               	movwf	drawCircle@color,c
  9929  00176C  ECA7  F011         	call	_drawCircle	;wreg free
  9930                           
  9931                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  9932  001770  0E17               	movlw	23
  9933  001772  6E39               	movwf	drawtext@y,c
  9934  001774  C062  F03A         	movff	_txt,drawtext@_text
  9935  001778  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9936  00177C  0EFF               	movlw	255
  9937  00177E  6E3D               	movwf	drawtext@color+1,c
  9938  001780  0EE0               	movlw	224
  9939  001782  6E3C               	movwf	drawtext@color,c
  9940  001784  0E00               	movlw	0
  9941  001786  6E3F               	movwf	drawtext@bg+1,c
  9942  001788  0E00               	movlw	0
  9943  00178A  6E3E               	movwf	drawtext@bg,c
  9944  00178C  0E02               	movlw	2
  9945  00178E  6E40               	movwf	drawtext@size,c
  9946  001790  0E73               	movlw	115
  9947  001792  ECAB  F01A         	call	_drawtext
  9948                           
  9949                           ;Main_Screen.c: 53: strcpy(txt, "Time");
  9950  001796  C062  F011         	movff	_txt,strcpy@to
  9951  00179A  C063  F012         	movff	_txt+1,strcpy@to+1
  9952  00179E  0ECA               	movlw	low (STR_12+6)
  9953  0017A0  6E13               	movwf	strcpy@from,c
  9954  0017A2  0EFF               	movlw	high (STR_12+6)
  9955  0017A4  6E14               	movwf	strcpy@from+1,c
  9956  0017A6  ECB4  F025         	call	_strcpy	;wreg free
  9957                           
  9958                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  9959  0017AA  0E28               	movlw	40
  9960  0017AC  6E39               	movwf	drawtext@y,c
  9961  0017AE  C062  F03A         	movff	_txt,drawtext@_text
  9962  0017B2  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9963  0017B6  0E00               	movlw	0
  9964  0017B8  6E3D               	movwf	drawtext@color+1,c
  9965  0017BA  0E1F               	movlw	31
  9966  0017BC  6E3C               	movwf	drawtext@color,c
  9967  0017BE  0E00               	movlw	0
  9968  0017C0  6E3F               	movwf	drawtext@bg+1,c
  9969  0017C2  0E00               	movlw	0
  9970  0017C4  6E3E               	movwf	drawtext@bg,c
  9971  0017C6  0E01               	movlw	1
  9972  0017C8  6E40               	movwf	drawtext@size,c
  9973  0017CA  0E32               	movlw	50
  9974  0017CC  ECAB  F01A         	call	_drawtext
  9975                           
  9976                           ;Main_Screen.c: 55: strcpy(txt, "Date");
  9977  0017D0  C062  F011         	movff	_txt,strcpy@to
  9978  0017D4  C063  F012         	movff	_txt+1,strcpy@to+1
  9979  0017D8  0EDF               	movlw	low STR_11
  9980  0017DA  6E13               	movwf	strcpy@from,c
  9981  0017DC  0EFF               	movlw	high STR_11
  9982  0017DE  6E14               	movwf	strcpy@from+1,c
  9983  0017E0  ECB4  F025         	call	_strcpy	;wreg free
  9984                           
  9985                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  9986  0017E4  0E47               	movlw	71
  9987  0017E6  6E39               	movwf	drawtext@y,c
  9988  0017E8  C062  F03A         	movff	_txt,drawtext@_text
  9989  0017EC  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9990  0017F0  0EF8               	movlw	248
  9991  0017F2  6E3D               	movwf	drawtext@color+1,c
  9992  0017F4  0E00               	movlw	0
  9993  0017F6  6E3C               	movwf	drawtext@color,c
  9994  0017F8  0E00               	movlw	0
  9995  0017FA  6E3F               	movwf	drawtext@bg+1,c
  9996  0017FC  0E00               	movlw	0
  9997  0017FE  6E3E               	movwf	drawtext@bg,c
  9998  001800  0E01               	movlw	1
  9999  001802  6E40               	movwf	drawtext@size,c
 10000  001804  0E32               	movlw	50
 10001  001806  ECAB  F01A         	call	_drawtext
 10002                           
 10003                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10004  00180A  C062  F011         	movff	_txt,strcpy@to
 10005  00180E  C063  F012         	movff	_txt+1,strcpy@to+1
 10006  001812  0EC4               	movlw	low STR_12
 10007  001814  6E13               	movwf	strcpy@from,c
 10008  001816  0EFF               	movlw	high STR_12
 10009  001818  6E14               	movwf	strcpy@from+1,c
 10010  00181A  ECB4  F025         	call	_strcpy	;wreg free
 10011                           
 10012                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10013  00181E  0E64               	movlw	100
 10014  001820  6E39               	movwf	drawtext@y,c
 10015  001822  C062  F03A         	movff	_txt,drawtext@_text
 10016  001826  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10017  00182A  0EFF               	movlw	255
 10018  00182C  6E3D               	movwf	drawtext@color+1,c
 10019  00182E  0EE0               	movlw	224
 10020  001830  6E3C               	movwf	drawtext@color,c
 10021  001832  0E00               	movlw	0
 10022  001834  6E3F               	movwf	drawtext@bg+1,c
 10023  001836  0E00               	movlw	0
 10024  001838  6E3E               	movwf	drawtext@bg,c
 10025  00183A  0E01               	movlw	1
 10026  00183C  6E40               	movwf	drawtext@size,c
 10027  00183E  0E04               	movlw	4
 10028  001840  ECAB  F01A         	call	_drawtext
 10029                           
 10030                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10031  001844  C062  F011         	movff	_txt,strcpy@to
 10032  001848  C063  F012         	movff	_txt+1,strcpy@to+1
 10033  00184C  0ECF               	movlw	low STR_13
 10034  00184E  6E13               	movwf	strcpy@from,c
 10035  001850  0EFF               	movlw	high STR_13
 10036  001852  6E14               	movwf	strcpy@from+1,c
 10037  001854  ECB4  F025         	call	_strcpy	;wreg free
 10038                           
 10039                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10040  001858  0E64               	movlw	100
 10041  00185A  6E39               	movwf	drawtext@y,c
 10042  00185C  C062  F03A         	movff	_txt,drawtext@_text
 10043  001860  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10044  001864  0EFF               	movlw	255
 10045  001866  6E3D               	movwf	drawtext@color+1,c
 10046  001868  0EE0               	movlw	224
 10047  00186A  6E3C               	movwf	drawtext@color,c
 10048  00186C  0E00               	movlw	0
 10049  00186E  6E3F               	movwf	drawtext@bg+1,c
 10050  001870  0E00               	movlw	0
 10051  001872  6E3E               	movwf	drawtext@bg,c
 10052  001874  0E01               	movlw	1
 10053  001876  6E40               	movwf	drawtext@size,c
 10054  001878  0E4D               	movlw	77
 10055  00187A  ECAB  F01A         	call	_drawtext
 10056                           
 10057                           ;Main_Screen.c: 61: strcpy(txt, "FAN Set Temp");
 10058  00187E  C062  F011         	movff	_txt,strcpy@to
 10059  001882  C063  F012         	movff	_txt+1,strcpy@to+1
 10060  001886  0E7D               	movlw	low STR_14
 10061  001888  6E13               	movwf	strcpy@from,c
 10062  00188A  0EFF               	movlw	high STR_14
 10063  00188C  6E14               	movwf	strcpy@from+1,c
 10064  00188E  ECB4  F025         	call	_strcpy	;wreg free
 10065                           
 10066                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10067  001892  0E78               	movlw	120
 10068  001894  6E39               	movwf	drawtext@y,c
 10069  001896  C062  F03A         	movff	_txt,drawtext@_text
 10070  00189A  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10071  00189E  0E00               	movlw	0
 10072  0018A0  6E3D               	movwf	drawtext@color+1,c
 10073  0018A2  0E1F               	movlw	31
 10074  0018A4  6E3C               	movwf	drawtext@color,c
 10075  0018A6  0E00               	movlw	0
 10076  0018A8  6E3F               	movwf	drawtext@bg+1,c
 10077  0018AA  0E00               	movlw	0
 10078  0018AC  6E3E               	movwf	drawtext@bg,c
 10079  0018AE  0E01               	movlw	1
 10080  0018B0  6E40               	movwf	drawtext@size,c
 10081  0018B2  0E06               	movlw	6
 10082  0018B4  ECAB  F01A         	call	_drawtext
 10083                           
 10084                           ;Main_Screen.c: 63: strcpy(txt, "Fan SW");
 10085  0018B8  C062  F011         	movff	_txt,strcpy@to
 10086  0018BC  C063  F012         	movff	_txt+1,strcpy@to+1
 10087  0018C0  0ED8               	movlw	low STR_15
 10088  0018C2  6E13               	movwf	strcpy@from,c
 10089  0018C4  0EFF               	movlw	high STR_15
 10090  0018C6  6E14               	movwf	strcpy@from+1,c
 10091  0018C8  ECB4  F025         	call	_strcpy	;wreg free
 10092                           
 10093                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10094  0018CC  0E78               	movlw	120
 10095  0018CE  6E39               	movwf	drawtext@y,c
 10096  0018D0  C062  F03A         	movff	_txt,drawtext@_text
 10097  0018D4  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10098  0018D8  0E00               	movlw	0
 10099  0018DA  6E3D               	movwf	drawtext@color+1,c
 10100  0018DC  0E1F               	movlw	31
 10101  0018DE  6E3C               	movwf	drawtext@color,c
 10102  0018E0  0E00               	movlw	0
 10103  0018E2  6E3F               	movwf	drawtext@bg+1,c
 10104  0018E4  0E00               	movlw	0
 10105  0018E6  6E3E               	movwf	drawtext@bg,c
 10106  0018E8  0E01               	movlw	1
 10107  0018EA  6E40               	movwf	drawtext@size,c
 10108  0018EC  0E55               	movlw	85
 10109  0018EE  ECAB  F01A         	call	_drawtext
 10110                           
 10111                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10112  0018F2  C062  F011         	movff	_txt,strcpy@to
 10113  0018F6  C063  F012         	movff	_txt+1,strcpy@to+1
 10114  0018FA  0EF8               	movlw	low STR_16
 10115  0018FC  6E13               	movwf	strcpy@from,c
 10116  0018FE  0EFF               	movlw	high STR_16
 10117  001900  6E14               	movwf	strcpy@from+1,c
 10118  001902  ECB4  F025         	call	_strcpy	;wreg free
 10119                           
 10120                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10121  001906  0E8C               	movlw	140
 10122  001908  6E39               	movwf	drawtext@y,c
 10123  00190A  C062  F03A         	movff	_txt,drawtext@_text
 10124  00190E  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10125  001912  0EFF               	movlw	255
 10126  001914  6E3D               	movwf	drawtext@color+1,c
 10127  001916  683C               	setf	drawtext@color,c
 10128  001918  0E00               	movlw	0
 10129  00191A  6E3F               	movwf	drawtext@bg+1,c
 10130  00191C  0E00               	movlw	0
 10131  00191E  6E3E               	movwf	drawtext@bg,c
 10132  001920  0E01               	movlw	1
 10133  001922  6E40               	movwf	drawtext@size,c
 10134  001924  0E0C               	movlw	12
 10135  001926  ECAB  F01A         	call	_drawtext
 10136                           
 10137                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10138  00192A  C062  F011         	movff	_txt,strcpy@to
 10139  00192E  C063  F012         	movff	_txt+1,strcpy@to+1
 10140  001932  0EFB               	movlw	low STR_17
 10141  001934  6E13               	movwf	strcpy@from,c
 10142  001936  0EFF               	movlw	high STR_17
 10143  001938  6E14               	movwf	strcpy@from+1,c
 10144  00193A  ECB4  F025         	call	_strcpy	;wreg free
 10145                           
 10146                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10147  00193E  0E8C               	movlw	140
 10148  001940  6E39               	movwf	drawtext@y,c
 10149  001942  C062  F03A         	movff	_txt,drawtext@_text
 10150  001946  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10151  00194A  0EFF               	movlw	255
 10152  00194C  6E3D               	movwf	drawtext@color+1,c
 10153  00194E  683C               	setf	drawtext@color,c
 10154  001950  0E00               	movlw	0
 10155  001952  6E3F               	movwf	drawtext@bg+1,c
 10156  001954  0E00               	movlw	0
 10157  001956  6E3E               	movwf	drawtext@bg,c
 10158  001958  0E01               	movlw	1
 10159  00195A  6E40               	movwf	drawtext@size,c
 10160  00195C  0E21               	movlw	33
 10161  00195E  ECAB  F01A         	call	_drawtext
 10162                           
 10163                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10164  001962  C062  F011         	movff	_txt,strcpy@to
 10165  001966  C063  F012         	movff	_txt+1,strcpy@to+1
 10166  00196A  0EE4               	movlw	low STR_18
 10167  00196C  6E13               	movwf	strcpy@from,c
 10168  00196E  0EFF               	movlw	high STR_18
 10169  001970  6E14               	movwf	strcpy@from+1,c
 10170  001972  ECB4  F025         	call	_strcpy	;wreg free
 10171                           
 10172                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10173  001976  0E8C               	movlw	140
 10174  001978  6E39               	movwf	drawtext@y,c
 10175  00197A  C062  F03A         	movff	_txt,drawtext@_text
 10176  00197E  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10177  001982  0EFF               	movlw	255
 10178  001984  6E3D               	movwf	drawtext@color+1,c
 10179  001986  683C               	setf	drawtext@color,c
 10180  001988  0E00               	movlw	0
 10181  00198A  6E3F               	movwf	drawtext@bg+1,c
 10182  00198C  0E00               	movlw	0
 10183  00198E  6E3E               	movwf	drawtext@bg,c
 10184  001990  0E01               	movlw	1
 10185  001992  6E40               	movwf	drawtext@size,c
 10186  001994  0E32               	movlw	50
 10187  001996  ECAB  F01A         	call	_drawtext
 10188                           
 10189                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10190  00199A  C062  F011         	movff	_txt,strcpy@to
 10191  00199E  C063  F012         	movff	_txt+1,strcpy@to+1
 10192  0019A2  0EF1               	movlw	low STR_19
 10193  0019A4  6E13               	movwf	strcpy@from,c
 10194  0019A6  0EFF               	movlw	high STR_19
 10195  0019A8  6E14               	movwf	strcpy@from+1,c
 10196  0019AA  ECB4  F025         	call	_strcpy	;wreg free
 10197                           
 10198                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10199  0019AE  0E8C               	movlw	140
 10200  0019B0  6E39               	movwf	drawtext@y,c
 10201  0019B2  C062  F03A         	movff	_txt,drawtext@_text
 10202  0019B6  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10203  0019BA  0EFF               	movlw	255
 10204  0019BC  6E3D               	movwf	drawtext@color+1,c
 10205  0019BE  683C               	setf	drawtext@color,c
 10206  0019C0  0E00               	movlw	0
 10207  0019C2  6E3F               	movwf	drawtext@bg+1,c
 10208  0019C4  0E00               	movlw	0
 10209  0019C6  6E3E               	movwf	drawtext@bg,c
 10210  0019C8  0E01               	movlw	1
 10211  0019CA  6E40               	movwf	drawtext@size,c
 10212  0019CC  0E5F               	movlw	95
 10213  0019CE  ECAB  F01A         	call	_drawtext
 10214  0019D2  0012               	return		;funcret
 10215  0019D4                     __end_of_Initialize_Screen:
 10216                           	opt stack 0
 10217                           tblptru	equ	0xFF8
 10218                           tblptrh	equ	0xFF7
 10219                           tblptrl	equ	0xFF6
 10220                           tablat	equ	0xFF5
 10221                           prodh	equ	0xFF4
 10222                           prodl	equ	0xFF3
 10223                           intcon	equ	0xFF2
 10224                           intcon2	equ	0xFF1
 10225                           postinc0	equ	0xFEE
 10226                           wreg	equ	0xFE8
 10227                           postdec1	equ	0xFE5
 10228                           fsr1l	equ	0xFE1
 10229                           postinc2	equ	0xFDE
 10230                           fsr2h	equ	0xFDA
 10231                           fsr2l	equ	0xFD9
 10232                           status	equ	0xFD8
 10233                           
 10234 ;; *************** function _strcpy *****************
 10235 ;; Defined at:
 10236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;  to              2   16[COMRAM] PTR unsigned char 
 10239 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), 
 10240 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10241 ;;		 -> STR_34(5), STR_33(5), STR_32(12), STR_31(21), 
 10242 ;;		 -> STR_30(15), STR_29(12), STR_28(21), STR_26(5), 
 10243 ;;		 -> STR_25(11), STR_24(20), STR_23(4), STR_22(4), 
 10244 ;;		 -> STR_21(4), STR_20(4), STR_19(4), STR_18(5), 
 10245 ;;		 -> STR_17(3), STR_16(3), STR_15(7), STR_14(13), 
 10246 ;;		 -> STR_13(9), STR_12(11), STR_11(5), STR_10(5), 
 10247 ;;		 -> STR_9(2), STR_8(3), STR_7(13), STR_6(21), 
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10250 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  2   16[COMRAM] PTR unsigned char 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        6 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    2
 10267 ;; This function calls:
 10268 ;;		Nothing
 10269 ;; This function is called by:
 10270 ;;		_Initialize_Screen
 10271 ;;		_Update_Screen
 10272 ;;		_Initialize_Setup_Alarm_Time_Screen
 10273 ;;		_Initialize_Setup_Fan_Screen
 10274 ;;		_Initialize_Setup_Time_Screen
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text46
 10279  004B68                     __ptext46:
 10280                           	opt stack 0
 10281  004B68                     _strcpy:
 10282                           	opt stack 27
 10283                           
 10284                           ;incstack = 0
 10285  004B68  C011  F015         	movff	strcpy@to,strcpy@cp
 10286  004B6C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10287  004B70  D005               	goto	l6834
 10288  004B72                     l6832:
 10289  004B72  4A15               	infsnz	strcpy@cp,f,c
 10290  004B74  2A16               	incf	strcpy@cp+1,f,c
 10291  004B76  4A13               	infsnz	strcpy@from,f,c
 10292  004B78  2A14               	incf	strcpy@from+1,f,c
 10293  004B7A  D000               	goto	l6834
 10294  004B7C                     l6834:
 10295  004B7C  C013  FFF6         	movff	strcpy@from,tblptrl
 10296  004B80  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10297  004B84                     	if	0	;tblptru may be non-zero
 10298  004B84                     	endif
 10299  004B84                     	if	0	;tblptru may be non-zero
 10300  004B84                     	endif
 10301  004B84  C015  FFD9         	movff	strcpy@cp,fsr2l
 10302  004B88  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10303  004B8C  0008               	tblrd		*
 10304  004B8E  CFF5 FFDF          	movff	tablat,indf2
 10305  004B92  50DF               	movf	indf2,w,c
 10306  004B94  A4D8               	btfss	status,2,c
 10307  004B96  D7ED               	goto	l6832
 10308                           
 10309                           ;	Return value of _strcpy is never used
 10310  004B98  0012               	return		;funcret
 10311  004B9A                     __end_of_strcpy:
 10312                           	opt stack 0
 10313                           tblptru	equ	0xFF8
 10314                           tblptrh	equ	0xFF7
 10315                           tblptrl	equ	0xFF6
 10316                           tablat	equ	0xFF5
 10317                           prodh	equ	0xFF4
 10318                           prodl	equ	0xFF3
 10319                           intcon	equ	0xFF2
 10320                           intcon2	equ	0xFF1
 10321                           postinc0	equ	0xFEE
 10322                           wreg	equ	0xFE8
 10323                           postdec1	equ	0xFE5
 10324                           fsr1l	equ	0xFE1
 10325                           indf2	equ	0xFDF
 10326                           postinc2	equ	0xFDE
 10327                           fsr2h	equ	0xFDA
 10328                           fsr2l	equ	0xFD9
 10329                           status	equ	0xFD8
 10330                           
 10331 ;; *************** function _fillScreen *****************
 10332 ;; Defined at:
 10333 ;;		line 620 in file "ST7735_TFT.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;  color           2   35[COMRAM] unsigned int 
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;		None
 10338 ;; Return value:  Size  Location     Type
 10339 ;;		None               void
 10340 ;; Registers used:
 10341 ;;		wreg, status,2, status,0, cstack
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10347 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10351 ;;Total ram usage:        2 bytes
 10352 ;; Hardware stack levels used:    1
 10353 ;; Hardware stack levels required when called:    6
 10354 ;; This function calls:
 10355 ;;		_fillRectangle
 10356 ;; This function is called by:
 10357 ;;		_Initialize_Screen
 10358 ;;		_Initialize_Setup_Alarm_Time_Screen
 10359 ;;		_Initialize_Setup_Fan_Screen
 10360 ;;		_Initialize_Setup_Time_Screen
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           	psect	text47
 10365  004E20                     __ptext47:
 10366                           	opt stack 0
 10367  004E20                     _fillScreen:
 10368                           	opt stack 22
 10369                           
 10370                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
 10371                           
 10372                           ;incstack = 0
 10373  004E20  0E00               	movlw	0
 10374  004E22  6E18               	movwf	fillRectangle@y,c
 10375  004E24  0E80               	movlw	128
 10376  004E26  6E19               	movwf	fillRectangle@w,c
 10377  004E28  0EA0               	movlw	160
 10378  004E2A  6E1A               	movwf	fillRectangle@h,c
 10379  004E2C  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10380  004E30  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10381  004E34  0E00               	movlw	0
 10382  004E36  EC1C  F01B         	call	_fillRectangle
 10383  004E3A  0012               	return		;funcret
 10384  004E3C                     __end_of_fillScreen:
 10385                           	opt stack 0
 10386                           tblptru	equ	0xFF8
 10387                           tblptrh	equ	0xFF7
 10388                           tblptrl	equ	0xFF6
 10389                           tablat	equ	0xFF5
 10390                           prodh	equ	0xFF4
 10391                           prodl	equ	0xFF3
 10392                           intcon	equ	0xFF2
 10393                           intcon2	equ	0xFF1
 10394                           postinc0	equ	0xFEE
 10395                           wreg	equ	0xFE8
 10396                           postdec1	equ	0xFE5
 10397                           fsr1l	equ	0xFE1
 10398                           indf2	equ	0xFDF
 10399                           postinc2	equ	0xFDE
 10400                           fsr2h	equ	0xFDA
 10401                           fsr2l	equ	0xFD9
 10402                           status	equ	0xFD8
 10403                           
 10404 ;; *************** function _fillRectangle *****************
 10405 ;; Defined at:
 10406 ;;		line 504 in file "ST7735_TFT.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  x               1    wreg     unsigned char 
 10409 ;;  y               1   23[COMRAM] unsigned char 
 10410 ;;  w               1   24[COMRAM] unsigned char 
 10411 ;;  h               1   25[COMRAM] unsigned char 
 10412 ;;  color           2   26[COMRAM] unsigned int 
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;  x               1   34[COMRAM] unsigned char 
 10415 ;;  lo              1   33[COMRAM] unsigned char 
 10416 ;;  hi              1   32[COMRAM] unsigned char 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;		None               void
 10419 ;; Registers used:
 10420 ;;		wreg, status,2, status,0, cstack
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10426 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;Total ram usage:       12 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    5
 10433 ;; This function calls:
 10434 ;;		_setAddrWindow
 10435 ;;		_spiwrite
 10436 ;; This function is called by:
 10437 ;;		_fillScreen
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           	psect	text48
 10442  003638                     __ptext48:
 10443                           	opt stack 0
 10444  003638                     _fillRectangle:
 10445                           	opt stack 22
 10446                           
 10447                           ;incstack = 0
 10448                           ;fillRectangle@x stored from wreg
 10449  003638  6E23               	movwf	fillRectangle@x,c
 10450                           
 10451                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
 10452                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
 10453  00363A  0E80               	movlw	128
 10454  00363C  6023               	cpfslt	fillRectangle@x,c
 10455  00363E  D069               	goto	l792
 10456  003640  0E9F               	movlw	159
 10457  003642  6418               	cpfsgt	fillRectangle@y,c
 10458  003644  D001               	goto	l6110
 10459                           
 10460                           ;ST7735_TFT.c: 508: return;
 10461  003646  D065               	goto	l792
 10462  003648                     l6110:
 10463                           
 10464                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
 10465  003648  0EFF               	movlw	255
 10466  00364A  6E1D               	movwf	??_fillRectangle& (0+255),c
 10467  00364C  0EFF               	movlw	255
 10468  00364E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10469  003650  5019               	movf	fillRectangle@w,w,c
 10470  003652  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10471  003656  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10472  003658  261F               	addwf	??_fillRectangle+2,f,c
 10473  00365A  0E00               	movlw	0
 10474  00365C  2220               	addwfc	??_fillRectangle+3,f,c
 10475  00365E  501D               	movf	??_fillRectangle,w,c
 10476  003660  261F               	addwf	??_fillRectangle+2,f,c
 10477  003662  501E               	movf	??_fillRectangle+1,w,c
 10478  003664  2220               	addwfc	??_fillRectangle+3,f,c
 10479  003666  BE20               	btfsc	??_fillRectangle+3,7,c
 10480  003668  D00A               	goto	l793
 10481  00366A  5020               	movf	??_fillRectangle+3,w,c
 10482  00366C  E104               	bnz	u4160
 10483  00366E  0E80               	movlw	128
 10484  003670  5C1F               	subwf	??_fillRectangle+2,w,c
 10485  003672  A0D8               	btfss	status,0,c
 10486  003674  D004               	goto	l793
 10487  003676                     u4160:
 10488                           
 10489                           ;ST7735_TFT.c: 510: w = 128 - x;
 10490  003676  5023               	movf	fillRectangle@x,w,c
 10491  003678  0800               	sublw	0
 10492  00367A  0F80               	addlw	128
 10493  00367C  6E19               	movwf	fillRectangle@w,c
 10494  00367E                     l793:
 10495                           
 10496                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
 10497  00367E  0EFF               	movlw	255
 10498  003680  6E1D               	movwf	??_fillRectangle& (0+255),c
 10499  003682  0EFF               	movlw	255
 10500  003684  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10501  003686  501A               	movf	fillRectangle@h,w,c
 10502  003688  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10503  00368C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10504  00368E  261F               	addwf	??_fillRectangle+2,f,c
 10505  003690  0E00               	movlw	0
 10506  003692  2220               	addwfc	??_fillRectangle+3,f,c
 10507  003694  501D               	movf	??_fillRectangle,w,c
 10508  003696  261F               	addwf	??_fillRectangle+2,f,c
 10509  003698  501E               	movf	??_fillRectangle+1,w,c
 10510  00369A  2220               	addwfc	??_fillRectangle+3,f,c
 10511  00369C  BE20               	btfsc	??_fillRectangle+3,7,c
 10512  00369E  D00B               	goto	l6116
 10513  0036A0  5020               	movf	??_fillRectangle+3,w,c
 10514  0036A2  E104               	bnz	u4170
 10515  0036A4  0EA0               	movlw	160
 10516  0036A6  5C1F               	subwf	??_fillRectangle+2,w,c
 10517  0036A8  A0D8               	btfss	status,0,c
 10518  0036AA  D005               	goto	l6116
 10519  0036AC                     u4170:
 10520                           
 10521                           ;ST7735_TFT.c: 512: h = 160 - y;
 10522  0036AC  5018               	movf	fillRectangle@y,w,c
 10523  0036AE  0800               	sublw	0
 10524  0036B0  0FA0               	addlw	160
 10525  0036B2  6E1A               	movwf	fillRectangle@h,c
 10526  0036B4  D000               	goto	l6116
 10527  0036B6                     l6116:
 10528                           
 10529                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
 10530  0036B6  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 10531  0036BA  5023               	movf	fillRectangle@x,w,c
 10532  0036BC  2419               	addwf	fillRectangle@w,w,c
 10533  0036BE  6E1D               	movwf	??_fillRectangle& (0+255),c
 10534  0036C0  041D               	decf	??_fillRectangle,w,c
 10535  0036C2  6E15               	movwf	setAddrWindow@x1,c
 10536  0036C4  5018               	movf	fillRectangle@y,w,c
 10537  0036C6  241A               	addwf	fillRectangle@h,w,c
 10538  0036C8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10539  0036CA  041E               	decf	??_fillRectangle+1,w,c
 10540  0036CC  6E16               	movwf	setAddrWindow@y1,c
 10541  0036CE  5023               	movf	fillRectangle@x,w,c
 10542  0036D0  EC76  F023         	call	_setAddrWindow
 10543                           
 10544                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
 10545  0036D4  501C               	movf	fillRectangle@color+1,w,c
 10546  0036D6  6E21               	movwf	fillRectangle@hi,c
 10547  0036D8  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 10548                           
 10549                           ;ST7735_TFT.c: 515: PORTDbits.RD3 = 1;
 10550  0036DC  8683               	bsf	3971,3,c	;volatile
 10551                           
 10552                           ;ST7735_TFT.c: 516: PORTDbits.RD4 = 0;
 10553  0036DE  9883               	bcf	3971,4,c	;volatile
 10554                           
 10555                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
 10556  0036E0  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 10557  0036E4                     l6128:
 10558  0036E4  5018               	movf	fillRectangle@y,w,c
 10559  0036E6  B4D8               	btfsc	status,2,c
 10560  0036E8  D013               	goto	l796
 10561  0036EA  D001               	goto	l795
 10562  0036EC  D011               	goto	l796
 10563  0036EE                     l795:
 10564                           
 10565                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
 10566  0036EE  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 10567  0036F2                     l6132:
 10568  0036F2  5023               	movf	fillRectangle@x,w,c
 10569  0036F4  B4D8               	btfsc	status,2,c
 10570  0036F6  D00A               	goto	l6142
 10571  0036F8  D001               	goto	l6136
 10572  0036FA  D008               	goto	l6142
 10573  0036FC                     l6136:
 10574                           
 10575                           ;ST7735_TFT.c: 520: spiwrite(hi);
 10576  0036FC  5021               	movf	fillRectangle@hi,w,c
 10577  0036FE  EC9E  F027         	call	_spiwrite
 10578                           
 10579                           ;ST7735_TFT.c: 521: spiwrite(lo);
 10580  003702  5022               	movf	fillRectangle@lo,w,c
 10581  003704  EC9E  F027         	call	_spiwrite
 10582  003708  0623               	decf	fillRectangle@x,f,c
 10583  00370A  D7F3               	goto	l6132
 10584  00370C                     l6142:
 10585  00370C  0618               	decf	fillRectangle@y,f,c
 10586  00370E  D7EA               	goto	l6128
 10587  003710                     l796:
 10588                           
 10589                           ;ST7735_TFT.c: 522: }
 10590                           ;ST7735_TFT.c: 523: }
 10591                           ;ST7735_TFT.c: 524: PORTDbits.RD4 = 1;
 10592  003710  8883               	bsf	3971,4,c	;volatile
 10593  003712                     l792:
 10594  003712  0012               	return		;funcret
 10595  003714                     __end_of_fillRectangle:
 10596                           	opt stack 0
 10597                           tblptru	equ	0xFF8
 10598                           tblptrh	equ	0xFF7
 10599                           tblptrl	equ	0xFF6
 10600                           tablat	equ	0xFF5
 10601                           prodh	equ	0xFF4
 10602                           prodl	equ	0xFF3
 10603                           intcon	equ	0xFF2
 10604                           intcon2	equ	0xFF1
 10605                           postinc0	equ	0xFEE
 10606                           wreg	equ	0xFE8
 10607                           postdec1	equ	0xFE5
 10608                           fsr1l	equ	0xFE1
 10609                           indf2	equ	0xFDF
 10610                           postinc2	equ	0xFDE
 10611                           fsr2h	equ	0xFDA
 10612                           fsr2l	equ	0xFD9
 10613                           status	equ	0xFD8
 10614                           
 10615 ;; *************** function _drawCircle *****************
 10616 ;; Defined at:
 10617 ;;		line 529 in file "ST7735_TFT.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;  x0              2   27[COMRAM] int 
 10620 ;;  y0              2   29[COMRAM] int 
 10621 ;;  r               2   31[COMRAM] int 
 10622 ;;  color           2   33[COMRAM] unsigned int 
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;  y               2   45[COMRAM] int 
 10625 ;;  x               2   43[COMRAM] int 
 10626 ;;  f               2   41[COMRAM] int 
 10627 ;;  ddF_y           2   39[COMRAM] int 
 10628 ;;  ddF_x           2   37[COMRAM] int 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;		None               void
 10631 ;; Registers used:
 10632 ;;		wreg, status,2, status,0, cstack
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10638 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;Total ram usage:       20 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; Hardware stack levels required when called:    6
 10645 ;; This function calls:
 10646 ;;		_drawPixel
 10647 ;; This function is called by:
 10648 ;;		_Initialize_Screen
 10649 ;; This function uses a non-reentrant model
 10650 ;;
 10651                           
 10652                           	psect	text49
 10653  00234E                     __ptext49:
 10654                           	opt stack 0
 10655  00234E                     _drawCircle:
 10656                           	opt stack 21
 10657                           
 10658                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
 10659                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 10660                           
 10661                           ;incstack = 0
 10662  00234E  C020  F024         	movff	drawCircle@r,??_drawCircle
 10663  002352  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10664  002356  1E24               	comf	??_drawCircle,f,c
 10665  002358  1E25               	comf	??_drawCircle+1,f,c
 10666  00235A  4A24               	infsnz	??_drawCircle,f,c
 10667  00235C  2A25               	incf	??_drawCircle+1,f,c
 10668  00235E  0E01               	movlw	1
 10669  002360  2424               	addwf	??_drawCircle,w,c
 10670  002362  6E2A               	movwf	drawCircle@f,c
 10671  002364  0E00               	movlw	0
 10672  002366  2025               	addwfc	??_drawCircle+1,w,c
 10673  002368  6E2B               	movwf	drawCircle@f+1,c
 10674  00236A  0E00               	movlw	0
 10675  00236C  6E27               	movwf	drawCircle@ddF_x+1,c
 10676  00236E  0E01               	movlw	1
 10677  002370  6E26               	movwf	drawCircle@ddF_x,c
 10678  002372  C020  F024         	movff	drawCircle@r,??_drawCircle
 10679  002376  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10680  00237A  90D8               	bcf	status,0,c
 10681  00237C  3624               	rlcf	??_drawCircle,f,c
 10682  00237E  3625               	rlcf	??_drawCircle+1,f,c
 10683  002380  1E24               	comf	??_drawCircle,f,c
 10684  002382  1E25               	comf	??_drawCircle+1,f,c
 10685  002384  4A24               	infsnz	??_drawCircle,f,c
 10686  002386  2A25               	incf	??_drawCircle+1,f,c
 10687  002388  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 10688  00238C  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 10689  002390  0E00               	movlw	0
 10690  002392  6E2D               	movwf	drawCircle@x+1,c
 10691  002394  0E00               	movlw	0
 10692  002396  6E2C               	movwf	drawCircle@x,c
 10693  002398  C020  F02E         	movff	drawCircle@r,drawCircle@y
 10694  00239C  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 10695                           
 10696                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
 10697  0023A0  501E               	movf	drawCircle@y0,w,c
 10698  0023A2  2420               	addwf	drawCircle@r,w,c
 10699  0023A4  6E18               	movwf	drawPixel@y,c
 10700  0023A6  C022  F019         	movff	drawCircle@color,drawPixel@color
 10701  0023AA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10702  0023AE  501C               	movf	drawCircle@x0,w,c
 10703  0023B0  ECCD  F025         	call	_drawPixel
 10704                           
 10705                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
 10706  0023B4  5020               	movf	drawCircle@r,w,c
 10707  0023B6  0800               	sublw	0
 10708  0023B8  241E               	addwf	drawCircle@y0,w,c
 10709  0023BA  6E18               	movwf	drawPixel@y,c
 10710  0023BC  C022  F019         	movff	drawCircle@color,drawPixel@color
 10711  0023C0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10712  0023C4  501C               	movf	drawCircle@x0,w,c
 10713  0023C6  ECCD  F025         	call	_drawPixel
 10714                           
 10715                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
 10716  0023CA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 10717  0023CE  C022  F019         	movff	drawCircle@color,drawPixel@color
 10718  0023D2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10719  0023D6  501C               	movf	drawCircle@x0,w,c
 10720  0023D8  2420               	addwf	drawCircle@r,w,c
 10721  0023DA  ECCD  F025         	call	_drawPixel
 10722                           
 10723                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
 10724  0023DE  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 10725  0023E2  C022  F019         	movff	drawCircle@color,drawPixel@color
 10726  0023E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10727  0023EA  5020               	movf	drawCircle@r,w,c
 10728  0023EC  0800               	sublw	0
 10729  0023EE  241C               	addwf	drawCircle@x0,w,c
 10730  0023F0  ECCD  F025         	call	_drawPixel
 10731                           
 10732                           ;ST7735_TFT.c: 537: while (x < y) {
 10733  0023F4  D078               	goto	l6918
 10734  0023F6                     l6890:
 10735                           
 10736                           ;ST7735_TFT.c: 538: if (f >= 0) {
 10737  0023F6  BE2B               	btfsc	drawCircle@f+1,7,c
 10738  0023F8  D00B               	goto	l803
 10739                           
 10740                           ;ST7735_TFT.c: 539: y--;
 10741  0023FA  062E               	decf	drawCircle@y,f,c
 10742  0023FC  A0D8               	btfss	status,0,c
 10743  0023FE  062F               	decf	drawCircle@y+1,f,c
 10744                           
 10745                           ;ST7735_TFT.c: 540: ddF_y += 2;
 10746  002400  0E02               	movlw	2
 10747  002402  2628               	addwf	drawCircle@ddF_y,f,c
 10748  002404  0E00               	movlw	0
 10749  002406  2229               	addwfc	drawCircle@ddF_y+1,f,c
 10750                           
 10751                           ;ST7735_TFT.c: 541: f += ddF_y;
 10752  002408  5028               	movf	drawCircle@ddF_y,w,c
 10753  00240A  262A               	addwf	drawCircle@f,f,c
 10754  00240C  5029               	movf	drawCircle@ddF_y+1,w,c
 10755  00240E  222B               	addwfc	drawCircle@f+1,f,c
 10756  002410                     l803:
 10757                           
 10758                           ;ST7735_TFT.c: 542: }
 10759                           ;ST7735_TFT.c: 543: x++;
 10760  002410  4A2C               	infsnz	drawCircle@x,f,c
 10761  002412  2A2D               	incf	drawCircle@x+1,f,c
 10762                           
 10763                           ;ST7735_TFT.c: 544: ddF_x += 2;
 10764  002414  0E02               	movlw	2
 10765  002416  2626               	addwf	drawCircle@ddF_x,f,c
 10766  002418  0E00               	movlw	0
 10767  00241A  2227               	addwfc	drawCircle@ddF_x+1,f,c
 10768                           
 10769                           ;ST7735_TFT.c: 545: f += ddF_x;
 10770  00241C  5026               	movf	drawCircle@ddF_x,w,c
 10771  00241E  262A               	addwf	drawCircle@f,f,c
 10772  002420  5027               	movf	drawCircle@ddF_x+1,w,c
 10773  002422  222B               	addwfc	drawCircle@f+1,f,c
 10774                           
 10775                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
 10776  002424  501E               	movf	drawCircle@y0,w,c
 10777  002426  242E               	addwf	drawCircle@y,w,c
 10778  002428  6E18               	movwf	drawPixel@y,c
 10779  00242A  C022  F019         	movff	drawCircle@color,drawPixel@color
 10780  00242E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10781  002432  501C               	movf	drawCircle@x0,w,c
 10782  002434  242C               	addwf	drawCircle@x,w,c
 10783  002436  ECCD  F025         	call	_drawPixel
 10784                           
 10785                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
 10786  00243A  501E               	movf	drawCircle@y0,w,c
 10787  00243C  242E               	addwf	drawCircle@y,w,c
 10788  00243E  6E18               	movwf	drawPixel@y,c
 10789  002440  C022  F019         	movff	drawCircle@color,drawPixel@color
 10790  002444  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10791  002448  502C               	movf	drawCircle@x,w,c
 10792  00244A  0800               	sublw	0
 10793  00244C  241C               	addwf	drawCircle@x0,w,c
 10794  00244E  ECCD  F025         	call	_drawPixel
 10795                           
 10796                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
 10797  002452  502E               	movf	drawCircle@y,w,c
 10798  002454  0800               	sublw	0
 10799  002456  241E               	addwf	drawCircle@y0,w,c
 10800  002458  6E18               	movwf	drawPixel@y,c
 10801  00245A  C022  F019         	movff	drawCircle@color,drawPixel@color
 10802  00245E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10803  002462  501C               	movf	drawCircle@x0,w,c
 10804  002464  242C               	addwf	drawCircle@x,w,c
 10805  002466  ECCD  F025         	call	_drawPixel
 10806                           
 10807                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
 10808  00246A  502E               	movf	drawCircle@y,w,c
 10809  00246C  0800               	sublw	0
 10810  00246E  241E               	addwf	drawCircle@y0,w,c
 10811  002470  6E18               	movwf	drawPixel@y,c
 10812  002472  C022  F019         	movff	drawCircle@color,drawPixel@color
 10813  002476  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10814  00247A  502C               	movf	drawCircle@x,w,c
 10815  00247C  0800               	sublw	0
 10816  00247E  241C               	addwf	drawCircle@x0,w,c
 10817  002480  ECCD  F025         	call	_drawPixel
 10818                           
 10819                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
 10820  002484  501E               	movf	drawCircle@y0,w,c
 10821  002486  242C               	addwf	drawCircle@x,w,c
 10822  002488  6E18               	movwf	drawPixel@y,c
 10823  00248A  C022  F019         	movff	drawCircle@color,drawPixel@color
 10824  00248E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10825  002492  501C               	movf	drawCircle@x0,w,c
 10826  002494  242E               	addwf	drawCircle@y,w,c
 10827  002496  ECCD  F025         	call	_drawPixel
 10828                           
 10829                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
 10830  00249A  501E               	movf	drawCircle@y0,w,c
 10831  00249C  242C               	addwf	drawCircle@x,w,c
 10832  00249E  6E18               	movwf	drawPixel@y,c
 10833  0024A0  C022  F019         	movff	drawCircle@color,drawPixel@color
 10834  0024A4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10835  0024A8  502E               	movf	drawCircle@y,w,c
 10836  0024AA  0800               	sublw	0
 10837  0024AC  241C               	addwf	drawCircle@x0,w,c
 10838  0024AE  ECCD  F025         	call	_drawPixel
 10839                           
 10840                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
 10841  0024B2  502C               	movf	drawCircle@x,w,c
 10842  0024B4  0800               	sublw	0
 10843  0024B6  241E               	addwf	drawCircle@y0,w,c
 10844  0024B8  6E18               	movwf	drawPixel@y,c
 10845  0024BA  C022  F019         	movff	drawCircle@color,drawPixel@color
 10846  0024BE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10847  0024C2  501C               	movf	drawCircle@x0,w,c
 10848  0024C4  242E               	addwf	drawCircle@y,w,c
 10849  0024C6  ECCD  F025         	call	_drawPixel
 10850                           
 10851                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
 10852  0024CA  502C               	movf	drawCircle@x,w,c
 10853  0024CC  0800               	sublw	0
 10854  0024CE  241E               	addwf	drawCircle@y0,w,c
 10855  0024D0  6E18               	movwf	drawPixel@y,c
 10856  0024D2  C022  F019         	movff	drawCircle@color,drawPixel@color
 10857  0024D6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10858  0024DA  502E               	movf	drawCircle@y,w,c
 10859  0024DC  0800               	sublw	0
 10860  0024DE  241C               	addwf	drawCircle@x0,w,c
 10861  0024E0  ECCD  F025         	call	_drawPixel
 10862  0024E4  D000               	goto	l6918
 10863  0024E6                     l6918:
 10864  0024E6  502E               	movf	drawCircle@y,w,c
 10865  0024E8  5C2C               	subwf	drawCircle@x,w,c
 10866  0024EA  502D               	movf	drawCircle@x+1,w,c
 10867  0024EC  0A80               	xorlw	128
 10868  0024EE  6E24               	movwf	??_drawCircle& (0+255),c
 10869  0024F0  502F               	movf	drawCircle@y+1,w,c
 10870  0024F2  0A80               	xorlw	128
 10871  0024F4  5824               	subwfb	??_drawCircle& (0+255),w,c
 10872  0024F6  A0D8               	btfss	status,0,c
 10873  0024F8  D77E               	goto	l6890
 10874  0024FA  0012               	return		;funcret
 10875  0024FC                     __end_of_drawCircle:
 10876                           	opt stack 0
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           prodh	equ	0xFF4
 10882                           prodl	equ	0xFF3
 10883                           intcon	equ	0xFF2
 10884                           intcon2	equ	0xFF1
 10885                           postinc0	equ	0xFEE
 10886                           wreg	equ	0xFE8
 10887                           postdec1	equ	0xFE5
 10888                           fsr1l	equ	0xFE1
 10889                           indf2	equ	0xFDF
 10890                           postinc2	equ	0xFDE
 10891                           fsr2h	equ	0xFDA
 10892                           fsr2l	equ	0xFD9
 10893                           status	equ	0xFD8
 10894                           
 10895 ;; *************** function _TFT_GreenTab_Initialize *****************
 10896 ;; Defined at:
 10897 ;;		line 645 in file "ST7735_TFT.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;		None
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;		None
 10902 ;; Return value:  Size  Location     Type
 10903 ;;		None               void
 10904 ;; Registers used:
 10905 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10906 ;; Tracked objects:
 10907 ;;		On entry : 0/0
 10908 ;;		On exit  : 0/0
 10909 ;;		Unchanged: 0/0
 10910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;Total ram usage:        0 bytes
 10916 ;; Hardware stack levels used:    1
 10917 ;; Hardware stack levels required when called:    5
 10918 ;; This function calls:
 10919 ;;		_Rcmd1
 10920 ;;		_Rcmd2red
 10921 ;;		_Rcmd3
 10922 ;;		_write_command
 10923 ;;		_write_data
 10924 ;; This function is called by:
 10925 ;;		_Initialize_Screen
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           	psect	text50
 10930  004BCA                     __ptext50:
 10931                           	opt stack 0
 10932  004BCA                     _TFT_GreenTab_Initialize:
 10933                           	opt stack 22
 10934                           
 10935                           ;ST7735_TFT.c: 647: PORTDbits.RD4 = 1;
 10936                           
 10937                           ;incstack = 0
 10938  004BCA  8883               	bsf	3971,4,c	;volatile
 10939                           
 10940                           ;ST7735_TFT.c: 648: PORTDbits.RD3 = 0;
 10941  004BCC  9683               	bcf	3971,3,c	;volatile
 10942                           
 10943                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
 10944  004BCE  0E80               	movlw	128
 10945  004BD0  6EC7               	movwf	4039,c	;volatile
 10946                           
 10947                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
 10948  004BD2  0E30               	movlw	48
 10949  004BD4  6EC6               	movwf	4038,c	;volatile
 10950                           
 10951                           ;ST7735_TFT.c: 654: Rcmd1();
 10952  004BD6  ECCC  F015         	call	_Rcmd1	;wreg free
 10953                           
 10954                           ;ST7735_TFT.c: 655: Rcmd2red();
 10955  004BDA  ECCD  F024         	call	_Rcmd2red	;wreg free
 10956                           
 10957                           ;ST7735_TFT.c: 656: Rcmd3();
 10958  004BDE  EC63  F018         	call	_Rcmd3	;wreg free
 10959                           
 10960                           ;ST7735_TFT.c: 657: write_command(0x36);
 10961  004BE2  0E36               	movlw	54
 10962  004BE4  EC11  F028         	call	_write_command
 10963                           
 10964                           ;ST7735_TFT.c: 658: write_data(0xC0);
 10965  004BE8  0EC0               	movlw	192
 10966  004BEA  EC09  F028         	call	_write_data
 10967                           
 10968                           ;ST7735_TFT.c: 659: _tft_type = 1;
 10969  004BEE  0E01               	movlw	1
 10970  004BF0  0100               	movlb	0	; () banked
 10971  004BF2  6FA6               	movwf	__tft_type& (0+255),b
 10972                           
 10973                           ; BSR set to: 0
 10974  004BF4  0012               	return		;funcret
 10975  004BF6                     __end_of_TFT_GreenTab_Initialize:
 10976                           	opt stack 0
 10977                           tblptru	equ	0xFF8
 10978                           tblptrh	equ	0xFF7
 10979                           tblptrl	equ	0xFF6
 10980                           tablat	equ	0xFF5
 10981                           prodh	equ	0xFF4
 10982                           prodl	equ	0xFF3
 10983                           intcon	equ	0xFF2
 10984                           intcon2	equ	0xFF1
 10985                           postinc0	equ	0xFEE
 10986                           wreg	equ	0xFE8
 10987                           postdec1	equ	0xFE5
 10988                           fsr1l	equ	0xFE1
 10989                           indf2	equ	0xFDF
 10990                           postinc2	equ	0xFDE
 10991                           fsr2h	equ	0xFDA
 10992                           fsr2l	equ	0xFD9
 10993                           status	equ	0xFD8
 10994                           
 10995 ;; *************** function _Rcmd3 *****************
 10996 ;; Defined at:
 10997 ;;		line 339 in file "ST7735_TFT.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;		None
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;		None
 11002 ;; Return value:  Size  Location     Type
 11003 ;;		None               void
 11004 ;; Registers used:
 11005 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;Total ram usage:        0 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    4
 11018 ;; This function calls:
 11019 ;;		_delay_ms
 11020 ;;		_write_command
 11021 ;;		_write_data
 11022 ;; This function is called by:
 11023 ;;		_TFT_GreenTab_Initialize
 11024 ;;		_TFT_BlackTab_Initialize
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           	psect	text51
 11029  0030C6                     __ptext51:
 11030                           	opt stack 0
 11031  0030C6                     _Rcmd3:
 11032                           	opt stack 22
 11033                           
 11034                           ;ST7735_TFT.c: 341: write_command(0xE0);
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;incstack = 0
 11038  0030C6  0EE0               	movlw	224
 11039  0030C8  EC11  F028         	call	_write_command
 11040                           
 11041                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11042  0030CC  0E02               	movlw	2
 11043  0030CE  EC09  F028         	call	_write_data
 11044  0030D2  0E1C               	movlw	28
 11045  0030D4  EC09  F028         	call	_write_data
 11046  0030D8  0E07               	movlw	7
 11047  0030DA  EC09  F028         	call	_write_data
 11048  0030DE  0E12               	movlw	18
 11049  0030E0  EC09  F028         	call	_write_data
 11050                           
 11051                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11052  0030E4  0E37               	movlw	55
 11053  0030E6  EC09  F028         	call	_write_data
 11054  0030EA  0E32               	movlw	50
 11055  0030EC  EC09  F028         	call	_write_data
 11056  0030F0  0E29               	movlw	41
 11057  0030F2  EC09  F028         	call	_write_data
 11058  0030F6  0E2D               	movlw	45
 11059  0030F8  EC09  F028         	call	_write_data
 11060                           
 11061                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11062  0030FC  0E29               	movlw	41
 11063  0030FE  EC09  F028         	call	_write_data
 11064  003102  0E25               	movlw	37
 11065  003104  EC09  F028         	call	_write_data
 11066  003108  0E2B               	movlw	43
 11067  00310A  EC09  F028         	call	_write_data
 11068  00310E  0E39               	movlw	57
 11069  003110  EC09  F028         	call	_write_data
 11070                           
 11071                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11072  003114  0E00               	movlw	0
 11073  003116  EC09  F028         	call	_write_data
 11074  00311A  0E01               	movlw	1
 11075  00311C  EC09  F028         	call	_write_data
 11076  003120  0E03               	movlw	3
 11077  003122  EC09  F028         	call	_write_data
 11078  003126  0E10               	movlw	16
 11079  003128  EC09  F028         	call	_write_data
 11080                           
 11081                           ;ST7735_TFT.c: 346: write_command(0xE1);
 11082  00312C  0EE1               	movlw	225
 11083  00312E  EC11  F028         	call	_write_command
 11084                           
 11085                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11086  003132  0E03               	movlw	3
 11087  003134  EC09  F028         	call	_write_data
 11088  003138  0E1D               	movlw	29
 11089  00313A  EC09  F028         	call	_write_data
 11090  00313E  0E07               	movlw	7
 11091  003140  EC09  F028         	call	_write_data
 11092  003144  0E06               	movlw	6
 11093  003146  EC09  F028         	call	_write_data
 11094                           
 11095                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11096  00314A  0E2E               	movlw	46
 11097  00314C  EC09  F028         	call	_write_data
 11098  003150  0E2C               	movlw	44
 11099  003152  EC09  F028         	call	_write_data
 11100  003156  0E29               	movlw	41
 11101  003158  EC09  F028         	call	_write_data
 11102  00315C  0E2D               	movlw	45
 11103  00315E  EC09  F028         	call	_write_data
 11104                           
 11105                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11106  003162  0E2E               	movlw	46
 11107  003164  EC09  F028         	call	_write_data
 11108  003168  0E2E               	movlw	46
 11109  00316A  EC09  F028         	call	_write_data
 11110  00316E  0E37               	movlw	55
 11111  003170  EC09  F028         	call	_write_data
 11112  003174  0E3F               	movlw	63
 11113  003176  EC09  F028         	call	_write_data
 11114                           
 11115                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11116  00317A  0E00               	movlw	0
 11117  00317C  EC09  F028         	call	_write_data
 11118  003180  0E00               	movlw	0
 11119  003182  EC09  F028         	call	_write_data
 11120  003186  0E02               	movlw	2
 11121  003188  EC09  F028         	call	_write_data
 11122  00318C  0E10               	movlw	16
 11123  00318E  EC09  F028         	call	_write_data
 11124                           
 11125                           ;ST7735_TFT.c: 351: write_command(0x13);
 11126  003192  0E13               	movlw	19
 11127  003194  EC11  F028         	call	_write_command
 11128                           
 11129                           ;ST7735_TFT.c: 352: delay_ms(10);
 11130  003198  0E00               	movlw	0
 11131  00319A  6E18               	movwf	delay_ms@ms+1,c
 11132  00319C  0E0A               	movlw	10
 11133  00319E  6E17               	movwf	delay_ms@ms,c
 11134  0031A0  ECF3  F023         	call	_delay_ms	;wreg free
 11135                           
 11136                           ;ST7735_TFT.c: 353: write_command(0x29);
 11137  0031A4  0E29               	movlw	41
 11138  0031A6  EC11  F028         	call	_write_command
 11139                           
 11140                           ;ST7735_TFT.c: 354: delay_ms(100);
 11141  0031AA  0E00               	movlw	0
 11142  0031AC  6E18               	movwf	delay_ms@ms+1,c
 11143  0031AE  0E64               	movlw	100
 11144  0031B0  6E17               	movwf	delay_ms@ms,c
 11145  0031B2  ECF3  F023         	call	_delay_ms	;wreg free
 11146  0031B6  0012               	return		;funcret
 11147  0031B8                     __end_of_Rcmd3:
 11148                           	opt stack 0
 11149                           tblptru	equ	0xFF8
 11150                           tblptrh	equ	0xFF7
 11151                           tblptrl	equ	0xFF6
 11152                           tablat	equ	0xFF5
 11153                           prodh	equ	0xFF4
 11154                           prodl	equ	0xFF3
 11155                           intcon	equ	0xFF2
 11156                           intcon2	equ	0xFF1
 11157                           postinc0	equ	0xFEE
 11158                           wreg	equ	0xFE8
 11159                           postdec1	equ	0xFE5
 11160                           fsr1l	equ	0xFE1
 11161                           indf2	equ	0xFDF
 11162                           postinc2	equ	0xFDE
 11163                           fsr2h	equ	0xFDA
 11164                           fsr2l	equ	0xFD9
 11165                           status	equ	0xFD8
 11166                           
 11167 ;; *************** function _Rcmd2red *****************
 11168 ;; Defined at:
 11169 ;;		line 329 in file "ST7735_TFT.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;		None
 11172 ;; Auto vars:     Size  Location     Type
 11173 ;;		None
 11174 ;; Return value:  Size  Location     Type
 11175 ;;		None               void
 11176 ;; Registers used:
 11177 ;;		wreg, status,2, cstack
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;Total ram usage:        0 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; Hardware stack levels required when called:    4
 11190 ;; This function calls:
 11191 ;;		_write_command
 11192 ;;		_write_data
 11193 ;; This function is called by:
 11194 ;;		_TFT_GreenTab_Initialize
 11195 ;; This function uses a non-reentrant model
 11196 ;;
 11197                           
 11198                           	psect	text52
 11199  00499A                     __ptext52:
 11200                           	opt stack 0
 11201  00499A                     _Rcmd2red:
 11202                           	opt stack 22
 11203                           
 11204                           ;ST7735_TFT.c: 331: write_command(0x2A);
 11205                           
 11206                           ;incstack = 0
 11207  00499A  0E2A               	movlw	42
 11208  00499C  EC11  F028         	call	_write_command
 11209                           
 11210                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
 11211  0049A0  0E00               	movlw	0
 11212  0049A2  EC09  F028         	call	_write_data
 11213  0049A6  0E00               	movlw	0
 11214  0049A8  EC09  F028         	call	_write_data
 11215                           
 11216                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
 11217  0049AC  0E00               	movlw	0
 11218  0049AE  EC09  F028         	call	_write_data
 11219  0049B2  0E7F               	movlw	127
 11220  0049B4  EC09  F028         	call	_write_data
 11221                           
 11222                           ;ST7735_TFT.c: 334: write_command(0x2B);
 11223  0049B8  0E2B               	movlw	43
 11224  0049BA  EC11  F028         	call	_write_command
 11225                           
 11226                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
 11227  0049BE  0E00               	movlw	0
 11228  0049C0  EC09  F028         	call	_write_data
 11229  0049C4  0E00               	movlw	0
 11230  0049C6  EC09  F028         	call	_write_data
 11231                           
 11232                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
 11233  0049CA  0E00               	movlw	0
 11234  0049CC  EC09  F028         	call	_write_data
 11235  0049D0  0E9F               	movlw	159
 11236  0049D2  EC09  F028         	call	_write_data
 11237  0049D6  0012               	return		;funcret
 11238  0049D8                     __end_of_Rcmd2red:
 11239                           	opt stack 0
 11240                           tblptru	equ	0xFF8
 11241                           tblptrh	equ	0xFF7
 11242                           tblptrl	equ	0xFF6
 11243                           tablat	equ	0xFF5
 11244                           prodh	equ	0xFF4
 11245                           prodl	equ	0xFF3
 11246                           intcon	equ	0xFF2
 11247                           intcon2	equ	0xFF1
 11248                           postinc0	equ	0xFEE
 11249                           wreg	equ	0xFE8
 11250                           postdec1	equ	0xFE5
 11251                           fsr1l	equ	0xFE1
 11252                           indf2	equ	0xFDF
 11253                           postinc2	equ	0xFDE
 11254                           fsr2h	equ	0xFDA
 11255                           fsr2l	equ	0xFD9
 11256                           status	equ	0xFD8
 11257                           
 11258 ;; *************** function _Rcmd1 *****************
 11259 ;; Defined at:
 11260 ;;		line 282 in file "ST7735_TFT.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;		None
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;		None
 11265 ;; Return value:  Size  Location     Type
 11266 ;;		None               void
 11267 ;; Registers used:
 11268 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;Total ram usage:        0 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    4
 11281 ;; This function calls:
 11282 ;;		_delay_ms
 11283 ;;		_write_command
 11284 ;;		_write_data
 11285 ;; This function is called by:
 11286 ;;		_TFT_GreenTab_Initialize
 11287 ;;		_TFT_BlackTab_Initialize
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           	psect	text53
 11292  002B98                     __ptext53:
 11293                           	opt stack 0
 11294  002B98                     _Rcmd1:
 11295                           	opt stack 22
 11296                           
 11297                           ;ST7735_TFT.c: 284: write_command(0x01);
 11298                           
 11299                           ;incstack = 0
 11300  002B98  0E01               	movlw	1
 11301  002B9A  EC11  F028         	call	_write_command
 11302                           
 11303                           ;ST7735_TFT.c: 285: delay_ms(150);
 11304  002B9E  0E00               	movlw	0
 11305  002BA0  6E18               	movwf	delay_ms@ms+1,c
 11306  002BA2  0E96               	movlw	150
 11307  002BA4  6E17               	movwf	delay_ms@ms,c
 11308  002BA6  ECF3  F023         	call	_delay_ms	;wreg free
 11309                           
 11310                           ;ST7735_TFT.c: 286: write_command(0x11);
 11311  002BAA  0E11               	movlw	17
 11312  002BAC  EC11  F028         	call	_write_command
 11313                           
 11314                           ;ST7735_TFT.c: 287: delay_ms(500);
 11315  002BB0  0E01               	movlw	1
 11316  002BB2  6E18               	movwf	delay_ms@ms+1,c
 11317  002BB4  0EF4               	movlw	244
 11318  002BB6  6E17               	movwf	delay_ms@ms,c
 11319  002BB8  ECF3  F023         	call	_delay_ms	;wreg free
 11320                           
 11321                           ;ST7735_TFT.c: 288: write_command(0xB1);
 11322  002BBC  0EB1               	movlw	177
 11323  002BBE  EC11  F028         	call	_write_command
 11324                           
 11325                           ;ST7735_TFT.c: 289: write_data(0x01);
 11326  002BC2  0E01               	movlw	1
 11327  002BC4  EC09  F028         	call	_write_data
 11328                           
 11329                           ;ST7735_TFT.c: 290: write_data(0x2C);
 11330  002BC8  0E2C               	movlw	44
 11331  002BCA  EC09  F028         	call	_write_data
 11332                           
 11333                           ;ST7735_TFT.c: 291: write_data(0x2D);
 11334  002BCE  0E2D               	movlw	45
 11335  002BD0  EC09  F028         	call	_write_data
 11336                           
 11337                           ;ST7735_TFT.c: 292: write_command(0xB2);
 11338  002BD4  0EB2               	movlw	178
 11339  002BD6  EC11  F028         	call	_write_command
 11340                           
 11341                           ;ST7735_TFT.c: 293: write_data(0x01);
 11342  002BDA  0E01               	movlw	1
 11343  002BDC  EC09  F028         	call	_write_data
 11344                           
 11345                           ;ST7735_TFT.c: 294: write_data(0x2C);
 11346  002BE0  0E2C               	movlw	44
 11347  002BE2  EC09  F028         	call	_write_data
 11348                           
 11349                           ;ST7735_TFT.c: 295: write_data(0x2D);
 11350  002BE6  0E2D               	movlw	45
 11351  002BE8  EC09  F028         	call	_write_data
 11352                           
 11353                           ;ST7735_TFT.c: 296: write_command(0xB3);
 11354  002BEC  0EB3               	movlw	179
 11355  002BEE  EC11  F028         	call	_write_command
 11356                           
 11357                           ;ST7735_TFT.c: 297: write_data(0x01);
 11358  002BF2  0E01               	movlw	1
 11359  002BF4  EC09  F028         	call	_write_data
 11360                           
 11361                           ;ST7735_TFT.c: 298: write_data(0x2C);
 11362  002BF8  0E2C               	movlw	44
 11363  002BFA  EC09  F028         	call	_write_data
 11364                           
 11365                           ;ST7735_TFT.c: 299: write_data(0x2D);
 11366  002BFE  0E2D               	movlw	45
 11367  002C00  EC09  F028         	call	_write_data
 11368                           
 11369                           ;ST7735_TFT.c: 300: write_data(0x01);
 11370  002C04  0E01               	movlw	1
 11371  002C06  EC09  F028         	call	_write_data
 11372                           
 11373                           ;ST7735_TFT.c: 301: write_data(0x2C);
 11374  002C0A  0E2C               	movlw	44
 11375  002C0C  EC09  F028         	call	_write_data
 11376                           
 11377                           ;ST7735_TFT.c: 302: write_data(0x2D);
 11378  002C10  0E2D               	movlw	45
 11379  002C12  EC09  F028         	call	_write_data
 11380                           
 11381                           ;ST7735_TFT.c: 303: write_command(0xB4);
 11382  002C16  0EB4               	movlw	180
 11383  002C18  EC11  F028         	call	_write_command
 11384                           
 11385                           ;ST7735_TFT.c: 304: write_data(0x07);
 11386  002C1C  0E07               	movlw	7
 11387  002C1E  EC09  F028         	call	_write_data
 11388                           
 11389                           ;ST7735_TFT.c: 305: write_command(0xC0);
 11390  002C22  0EC0               	movlw	192
 11391  002C24  EC11  F028         	call	_write_command
 11392                           
 11393                           ;ST7735_TFT.c: 306: write_data(0xA2);
 11394  002C28  0EA2               	movlw	162
 11395  002C2A  EC09  F028         	call	_write_data
 11396                           
 11397                           ;ST7735_TFT.c: 307: write_data(0x02);
 11398  002C2E  0E02               	movlw	2
 11399  002C30  EC09  F028         	call	_write_data
 11400                           
 11401                           ;ST7735_TFT.c: 308: write_data(0x84);
 11402  002C34  0E84               	movlw	132
 11403  002C36  EC09  F028         	call	_write_data
 11404                           
 11405                           ;ST7735_TFT.c: 309: write_command(0xC1);
 11406  002C3A  0EC1               	movlw	193
 11407  002C3C  EC11  F028         	call	_write_command
 11408                           
 11409                           ;ST7735_TFT.c: 310: write_data(0xC5);
 11410  002C40  0EC5               	movlw	197
 11411  002C42  EC09  F028         	call	_write_data
 11412                           
 11413                           ;ST7735_TFT.c: 311: write_command(0xC2);
 11414  002C46  0EC2               	movlw	194
 11415  002C48  EC11  F028         	call	_write_command
 11416                           
 11417                           ;ST7735_TFT.c: 312: write_data(0x0A);
 11418  002C4C  0E0A               	movlw	10
 11419  002C4E  EC09  F028         	call	_write_data
 11420                           
 11421                           ;ST7735_TFT.c: 313: write_data(0x00);
 11422  002C52  0E00               	movlw	0
 11423  002C54  EC09  F028         	call	_write_data
 11424                           
 11425                           ;ST7735_TFT.c: 314: write_command(0xC3);
 11426  002C58  0EC3               	movlw	195
 11427  002C5A  EC11  F028         	call	_write_command
 11428                           
 11429                           ;ST7735_TFT.c: 315: write_data(0x8A);
 11430  002C5E  0E8A               	movlw	138
 11431  002C60  EC09  F028         	call	_write_data
 11432                           
 11433                           ;ST7735_TFT.c: 316: write_data(0x2A);
 11434  002C64  0E2A               	movlw	42
 11435  002C66  EC09  F028         	call	_write_data
 11436                           
 11437                           ;ST7735_TFT.c: 317: write_command(0xC4);
 11438  002C6A  0EC4               	movlw	196
 11439  002C6C  EC11  F028         	call	_write_command
 11440                           
 11441                           ;ST7735_TFT.c: 318: write_data(0x8A);
 11442  002C70  0E8A               	movlw	138
 11443  002C72  EC09  F028         	call	_write_data
 11444                           
 11445                           ;ST7735_TFT.c: 319: write_data(0xEE);
 11446  002C76  0EEE               	movlw	238
 11447  002C78  EC09  F028         	call	_write_data
 11448                           
 11449                           ;ST7735_TFT.c: 320: write_command(0xC5);
 11450  002C7C  0EC5               	movlw	197
 11451  002C7E  EC11  F028         	call	_write_command
 11452                           
 11453                           ;ST7735_TFT.c: 321: write_data(0x0E);
 11454  002C82  0E0E               	movlw	14
 11455  002C84  EC09  F028         	call	_write_data
 11456                           
 11457                           ;ST7735_TFT.c: 322: write_command(0x20);
 11458  002C88  0E20               	movlw	32
 11459  002C8A  EC11  F028         	call	_write_command
 11460                           
 11461                           ;ST7735_TFT.c: 323: write_command(0x36);
 11462  002C8E  0E36               	movlw	54
 11463  002C90  EC11  F028         	call	_write_command
 11464                           
 11465                           ;ST7735_TFT.c: 324: write_data(0xC8);
 11466  002C94  0EC8               	movlw	200
 11467  002C96  EC09  F028         	call	_write_data
 11468                           
 11469                           ;ST7735_TFT.c: 325: write_command(0x3A);
 11470  002C9A  0E3A               	movlw	58
 11471  002C9C  EC11  F028         	call	_write_command
 11472                           
 11473                           ;ST7735_TFT.c: 326: write_data(0x05);
 11474  002CA0  0E05               	movlw	5
 11475  002CA2  EC09  F028         	call	_write_data
 11476  002CA6  0012               	return		;funcret
 11477  002CA8                     __end_of_Rcmd1:
 11478                           	opt stack 0
 11479                           tblptru	equ	0xFF8
 11480                           tblptrh	equ	0xFF7
 11481                           tblptrl	equ	0xFF6
 11482                           tablat	equ	0xFF5
 11483                           prodh	equ	0xFF4
 11484                           prodl	equ	0xFF3
 11485                           intcon	equ	0xFF2
 11486                           intcon2	equ	0xFF1
 11487                           postinc0	equ	0xFEE
 11488                           wreg	equ	0xFE8
 11489                           postdec1	equ	0xFE5
 11490                           fsr1l	equ	0xFE1
 11491                           indf2	equ	0xFDF
 11492                           postinc2	equ	0xFDE
 11493                           fsr2h	equ	0xFDA
 11494                           fsr2l	equ	0xFD9
 11495                           status	equ	0xFD8
 11496                           
 11497 ;; *************** function _LCD_Reset *****************
 11498 ;; Defined at:
 11499 ;;		line 218 in file "ST7735_TFT.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;		None
 11504 ;; Return value:  Size  Location     Type
 11505 ;;		None               void
 11506 ;; Registers used:
 11507 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;Total ram usage:        0 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    4
 11520 ;; This function calls:
 11521 ;;		_delay_ms
 11522 ;; This function is called by:
 11523 ;;		_Initialize_Screen
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	text54
 11528  004F76                     __ptext54:
 11529                           	opt stack 0
 11530  004F76                     _LCD_Reset:
 11531                           	opt stack 23
 11532                           
 11533                           ;ST7735_TFT.c: 220: PORTDbits.RD5 = 0;
 11534                           
 11535                           ;incstack = 0
 11536  004F76  9A83               	bcf	3971,5,c	;volatile
 11537                           
 11538                           ;ST7735_TFT.c: 221: delay_ms(100);
 11539  004F78  0E00               	movlw	0
 11540  004F7A  6E18               	movwf	delay_ms@ms+1,c
 11541  004F7C  0E64               	movlw	100
 11542  004F7E  6E17               	movwf	delay_ms@ms,c
 11543  004F80  ECF3  F023         	call	_delay_ms	;wreg free
 11544                           
 11545                           ;ST7735_TFT.c: 222: PORTDbits.RD5 = 1;
 11546  004F84  8A83               	bsf	3971,5,c	;volatile
 11547  004F86  0012               	return		;funcret
 11548  004F88                     __end_of_LCD_Reset:
 11549                           	opt stack 0
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           intcon2	equ	0xFF1
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           postdec1	equ	0xFE5
 11561                           fsr1l	equ	0xFE1
 11562                           indf2	equ	0xFDF
 11563                           postinc2	equ	0xFDE
 11564                           fsr2h	equ	0xFDA
 11565                           fsr2l	equ	0xFD9
 11566                           status	equ	0xFD8
 11567                           
 11568 ;; *************** function _delay_ms *****************
 11569 ;; Defined at:
 11570 ;;		line 65 in file "ST7735_TFT.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;  ms              2   22[COMRAM] int 
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;  count           2   26[COMRAM] int 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;		None               void
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;Total ram usage:        6 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    3
 11591 ;; This function calls:
 11592 ;;		___wmul
 11593 ;; This function is called by:
 11594 ;;		_LCD_Reset
 11595 ;;		_Rcmd1
 11596 ;;		_Rcmd3
 11597 ;;		_Bcmd
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text55
 11602  0047E6                     __ptext55:
 11603                           	opt stack 0
 11604  0047E6                     _delay_ms:
 11605                           	opt stack 22
 11606                           
 11607                           ;ST7735_TFT.c: 71: int count;
 11608                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
 11609                           
 11610                           ;incstack = 0
 11611  0047E6  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 11612  0047EA  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 11613  0047EE  0E00               	movlw	0
 11614  0047F0  6E14               	movwf	___wmul@multiplicand+1,c
 11615  0047F2  0E7D               	movlw	125
 11616  0047F4  6E13               	movwf	___wmul@multiplicand,c
 11617  0047F6  EC24  F026         	call	___wmul	;wreg free
 11618  0047FA  C011  F01B         	movff	?___wmul,delay_ms@count
 11619  0047FE  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 11620                           
 11621                           ;ST7735_TFT.c: 73: count = (0xffff - count);
 11622  004802  C01B  F019         	movff	delay_ms@count,??_delay_ms
 11623  004806  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 11624  00480A  1E19               	comf	??_delay_ms,f,c
 11625  00480C  1E1A               	comf	??_delay_ms+1,f,c
 11626  00480E  4A19               	infsnz	??_delay_ms,f,c
 11627  004810  2A1A               	incf	??_delay_ms+1,f,c
 11628  004812  0EFF               	movlw	255
 11629  004814  2419               	addwf	??_delay_ms,w,c
 11630  004816  6E1B               	movwf	delay_ms@count,c
 11631  004818  0EFF               	movlw	255
 11632  00481A  201A               	addwfc	??_delay_ms+1,w,c
 11633  00481C  6E1C               	movwf	delay_ms@count+1,c
 11634                           
 11635                           ;ST7735_TFT.c: 75: T0CON = 0x03;
 11636  00481E  0E03               	movlw	3
 11637  004820  6ED5               	movwf	4053,c	;volatile
 11638                           
 11639                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
 11640  004822  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 11641                           
 11642                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
 11643  004826  501C               	movf	delay_ms@count+1,w,c
 11644  004828  6ED7               	movwf	4055,c	;volatile
 11645                           
 11646                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
 11647  00482A  94F2               	bcf	intcon,2,c	;volatile
 11648                           
 11649                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
 11650  00482C  8ED5               	bsf	4053,7,c	;volatile
 11651                           
 11652                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
 11653  00482E  D000               	goto	l679
 11654  004830                     l679:
 11655  004830  A4F2               	btfss	intcon,2,c	;volatile
 11656  004832  D7FE               	goto	l679
 11657                           
 11658                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
 11659  004834  9ED5               	bcf	4053,7,c	;volatile
 11660  004836  0012               	return		;funcret
 11661  004838                     __end_of_delay_ms:
 11662                           	opt stack 0
 11663                           tblptru	equ	0xFF8
 11664                           tblptrh	equ	0xFF7
 11665                           tblptrl	equ	0xFF6
 11666                           tablat	equ	0xFF5
 11667                           prodh	equ	0xFF4
 11668                           prodl	equ	0xFF3
 11669                           intcon	equ	0xFF2
 11670                           intcon2	equ	0xFF1
 11671                           postinc0	equ	0xFEE
 11672                           wreg	equ	0xFE8
 11673                           postdec1	equ	0xFE5
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           fsr2h	equ	0xFDA
 11678                           fsr2l	equ	0xFD9
 11679                           status	equ	0xFD8
 11680                           
 11681 ;; *************** function _DS3231_Write_Alarm_Time *****************
 11682 ;; Defined at:
 11683 ;;		line 193 in file "I2C_Support.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;		None
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  Address         1   74[COMRAM] unsigned char 
 11688 ;;  Device          1   73[COMRAM] unsigned char 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;		None               void
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0, cstack
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;Total ram usage:        2 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    6
 11705 ;; This function calls:
 11706 ;;		_DS3231_Read_Time
 11707 ;;		_I2C_Start
 11708 ;;		_I2C_Stop
 11709 ;;		_I2C_Write
 11710 ;;		_dec_2_bcd
 11711 ;; This function is called by:
 11712 ;;		_Do_Save_New_Alarm_Time
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           	psect	text56
 11717  00418E                     __ptext56:
 11718                           	opt stack 0
 11719  00418E                     _DS3231_Write_Alarm_Time:
 11720                           	opt stack 22
 11721                           
 11722                           ;I2C_Support.c: 195: DS3231_Read_Time();
 11723                           
 11724                           ;incstack = 0
 11725  00418E  ECF1  F021         	call	_DS3231_Read_Time	;wreg free
 11726                           
 11727                           ;I2C_Support.c: 196: alarm_date = day;
 11728  004192  C067  F0A7         	movff	_day,_alarm_date
 11729                           
 11730                           ;I2C_Support.c: 197: char Device = 0x68;
 11731  004196  0E68               	movlw	104
 11732  004198  6E4A               	movwf	DS3231_Write_Alarm_Time@Device,c
 11733                           
 11734                           ;I2C_Support.c: 198: char Address = 0x07;
 11735  00419A  0E07               	movlw	7
 11736  00419C  6E4B               	movwf	DS3231_Write_Alarm_Time@Address,c
 11737                           
 11738                           ;I2C_Support.c: 199: alarm_hour = dec_2_bcd(setup_alarm_hour);
 11739  00419E  0100               	movlb	0	; () banked
 11740  0041A0  51AC               	movf	_setup_alarm_hour& (0+255),w,b
 11741  0041A2  EC4A  F023         	call	_dec_2_bcd
 11742  0041A6  5043               	movf	?_dec_2_bcd,w,c
 11743  0041A8  6E64               	movwf	_alarm_hour,c
 11744                           
 11745                           ;I2C_Support.c: 200: alarm_minute = dec_2_bcd(setup_alarm_minute);
 11746  0041AA  0100               	movlb	0	; () banked
 11747  0041AC  51AD               	movf	_setup_alarm_minute& (0+255),w,b
 11748  0041AE  EC4A  F023         	call	_dec_2_bcd
 11749  0041B2  5043               	movf	?_dec_2_bcd,w,c
 11750  0041B4  6E65               	movwf	_alarm_minute,c
 11751                           
 11752                           ;I2C_Support.c: 201: alarm_second = dec_2_bcd(setup_alarm_second);
 11753  0041B6  0100               	movlb	0	; () banked
 11754  0041B8  51AE               	movf	_setup_alarm_second& (0+255),w,b
 11755  0041BA  EC4A  F023         	call	_dec_2_bcd
 11756  0041BE  5043               	movf	?_dec_2_bcd,w,c
 11757  0041C0  6E66               	movwf	_alarm_second,c
 11758                           
 11759                           ;I2C_Support.c: 202: alarm_second = alarm_second & 0x7f;
 11760  0041C2  5066               	movf	_alarm_second,w,c
 11761  0041C4  0B7F               	andlw	127
 11762  0041C6  6E66               	movwf	_alarm_second,c
 11763                           
 11764                           ;I2C_Support.c: 203: alarm_minute = alarm_minute & 0x7f;
 11765  0041C8  5065               	movf	_alarm_minute,w,c
 11766  0041CA  0B7F               	andlw	127
 11767  0041CC  6E65               	movwf	_alarm_minute,c
 11768                           
 11769                           ;I2C_Support.c: 204: alarm_hour = alarm_hour & 0x7f;
 11770  0041CE  5064               	movf	_alarm_hour,w,c
 11771  0041D0  0B7F               	andlw	127
 11772  0041D2  6E64               	movwf	_alarm_hour,c
 11773                           
 11774                           ;I2C_Support.c: 205: alarm_date = alarm_date | 0x80;
 11775  0041D4  0100               	movlb	0	; () banked
 11776  0041D6  51A7               	movf	_alarm_date& (0+255),w,b
 11777  0041D8  0980               	iorlw	128
 11778  0041DA  0100               	movlb	0	; () banked
 11779  0041DC  6FA7               	movwf	_alarm_date& (0+255),b
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;I2C_Support.c: 206: I2C_Start();
 11783  0041DE  ECDF  F027         	call	_I2C_Start	;wreg free
 11784                           
 11785                           ;I2C_Support.c: 207: I2C_Write((Device << 1) | 0);
 11786  0041E2  504A               	movf	DS3231_Write_Alarm_Time@Device,w,c
 11787  0041E4  244A               	addwf	DS3231_Write_Alarm_Time@Device,w,c
 11788  0041E6  EC0B  F025         	call	_I2C_Write
 11789                           
 11790                           ;I2C_Support.c: 208: I2C_Write(Address);
 11791  0041EA  504B               	movf	DS3231_Write_Alarm_Time@Address,w,c
 11792  0041EC  EC0B  F025         	call	_I2C_Write
 11793                           
 11794                           ;I2C_Support.c: 210: I2C_Write(alarm_second);
 11795  0041F0  5066               	movf	_alarm_second,w,c
 11796  0041F2  EC0B  F025         	call	_I2C_Write
 11797                           
 11798                           ;I2C_Support.c: 211: I2C_Write(alarm_minute);
 11799  0041F6  5065               	movf	_alarm_minute,w,c
 11800  0041F8  EC0B  F025         	call	_I2C_Write
 11801                           
 11802                           ;I2C_Support.c: 212: I2C_Write(alarm_hour);
 11803  0041FC  5064               	movf	_alarm_hour,w,c
 11804  0041FE  EC0B  F025         	call	_I2C_Write
 11805                           
 11806                           ;I2C_Support.c: 213: I2C_Write(alarm_date);
 11807  004202  0100               	movlb	0	; () banked
 11808  004204  51A7               	movf	_alarm_date& (0+255),w,b
 11809  004206  EC0B  F025         	call	_I2C_Write
 11810                           
 11811                           ;I2C_Support.c: 214: I2C_Stop();
 11812  00420A  ECD6  F027         	call	_I2C_Stop	;wreg free
 11813  00420E  0012               	return		;funcret
 11814  004210                     __end_of_DS3231_Write_Alarm_Time:
 11815                           	opt stack 0
 11816                           tblptru	equ	0xFF8
 11817                           tblptrh	equ	0xFF7
 11818                           tblptrl	equ	0xFF6
 11819                           tablat	equ	0xFF5
 11820                           prodh	equ	0xFF4
 11821                           prodl	equ	0xFF3
 11822                           intcon	equ	0xFF2
 11823                           intcon2	equ	0xFF1
 11824                           postinc0	equ	0xFEE
 11825                           wreg	equ	0xFE8
 11826                           postdec1	equ	0xFE5
 11827                           fsr1l	equ	0xFE1
 11828                           indf2	equ	0xFDF
 11829                           postinc2	equ	0xFDE
 11830                           fsr2h	equ	0xFDA
 11831                           fsr2l	equ	0xFD9
 11832                           status	equ	0xFD8
 11833                           
 11834 ;; *************** function _dec_2_bcd *****************
 11835 ;; Defined at:
 11836 ;;		line 54 in file "utils.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;  dec             1    wreg     unsigned char 
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;  dec             1   72[COMRAM] unsigned char 
 11841 ;;  bcd             2   70[COMRAM] int 
 11842 ;; Return value:  Size  Location     Type
 11843 ;;                  2   66[COMRAM] int 
 11844 ;; Registers used:
 11845 ;;		wreg, status,2, status,0, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;Total ram usage:        7 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    3
 11858 ;; This function calls:
 11859 ;;		___awdiv
 11860 ;;		___awmod
 11861 ;; This function is called by:
 11862 ;;		_DS3231_Write_Time
 11863 ;;		_DS3231_Write_Alarm_Time
 11864 ;;		_DS3231_Write_Initial_Alarm_Time
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           	psect	text57
 11869  004694                     __ptext57:
 11870                           	opt stack 0
 11871  004694                     _dec_2_bcd:
 11872                           	opt stack 24
 11873                           
 11874                           ;incstack = 0
 11875                           ;dec_2_bcd@dec stored from wreg
 11876  004694  6E49               	movwf	dec_2_bcd@dec,c
 11877                           
 11878                           ;utils.c: 56: int bcd;
 11879                           ;utils.c: 57: bcd = ((dec / 10) << 4) + (dec % 10);
 11880  004696  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 11881  00469A  6A18               	clrf	___awdiv@dividend+1,c
 11882  00469C  0E00               	movlw	0
 11883  00469E  6E1A               	movwf	___awdiv@divisor+1,c
 11884  0046A0  0E0A               	movlw	10
 11885  0046A2  6E19               	movwf	___awdiv@divisor,c
 11886  0046A4  ECD0  F01E         	call	___awdiv	;wreg free
 11887  0046A8  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 11888  0046AC  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 11889  0046B0  3A45               	swapf	??_dec_2_bcd,f,c
 11890  0046B2  3A46               	swapf	??_dec_2_bcd+1,f,c
 11891  0046B4  0EF0               	movlw	240
 11892  0046B6  1646               	andwf	??_dec_2_bcd+1,f,c
 11893  0046B8  5045               	movf	??_dec_2_bcd,w,c
 11894  0046BA  0B0F               	andlw	15
 11895  0046BC  1246               	iorwf	??_dec_2_bcd+1,f,c
 11896  0046BE  0EF0               	movlw	240
 11897  0046C0  1645               	andwf	??_dec_2_bcd,f,c
 11898  0046C2  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 11899  0046C6  6A3E               	clrf	___awmod@dividend+1,c
 11900  0046C8  0E00               	movlw	0
 11901  0046CA  6E40               	movwf	___awmod@divisor+1,c
 11902  0046CC  0E0A               	movlw	10
 11903  0046CE  6E3F               	movwf	___awmod@divisor,c
 11904  0046D0  EC08  F021         	call	___awmod	;wreg free
 11905  0046D4  503D               	movf	?___awmod,w,c
 11906  0046D6  2445               	addwf	??_dec_2_bcd,w,c
 11907  0046D8  6E47               	movwf	dec_2_bcd@bcd,c
 11908  0046DA  503E               	movf	?___awmod+1,w,c
 11909  0046DC  2046               	addwfc	??_dec_2_bcd+1,w,c
 11910  0046DE  6E48               	movwf	dec_2_bcd@bcd+1,c
 11911                           
 11912                           ;utils.c: 58: return bcd;
 11913  0046E0  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 11914  0046E4  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 11915  0046E8  D000               	goto	l1345
 11916  0046EA                     l1345:
 11917  0046EA  0012               	return		;funcret
 11918  0046EC                     __end_of_dec_2_bcd:
 11919                           	opt stack 0
 11920                           tblptru	equ	0xFF8
 11921                           tblptrh	equ	0xFF7
 11922                           tblptrl	equ	0xFF6
 11923                           tablat	equ	0xFF5
 11924                           prodh	equ	0xFF4
 11925                           prodl	equ	0xFF3
 11926                           intcon	equ	0xFF2
 11927                           intcon2	equ	0xFF1
 11928                           postinc0	equ	0xFEE
 11929                           wreg	equ	0xFE8
 11930                           postdec1	equ	0xFE5
 11931                           fsr1l	equ	0xFE1
 11932                           indf2	equ	0xFDF
 11933                           postinc2	equ	0xFDE
 11934                           fsr2h	equ	0xFDA
 11935                           fsr2l	equ	0xFD9
 11936                           status	equ	0xFD8
 11937                           
 11938 ;; *************** function _DS3231_Read_Time *****************
 11939 ;; Defined at:
 11940 ;;		line 45 in file "I2C_Support.c"
 11941 ;; Parameters:    Size  Location     Type
 11942 ;;		None
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;  Device          1   20[COMRAM] unsigned char 
 11945 ;;  Address         1   19[COMRAM] unsigned char 
 11946 ;; Return value:  Size  Location     Type
 11947 ;;		None               void
 11948 ;; Registers used:
 11949 ;;		wreg, status,2, status,0, cstack
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11959 ;;Total ram usage:        2 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    5
 11962 ;; This function calls:
 11963 ;;		_I2C_ReStart
 11964 ;;		_I2C_Read
 11965 ;;		_I2C_Start
 11966 ;;		_I2C_Stop
 11967 ;;		_I2C_Write
 11968 ;; This function is called by:
 11969 ;;		_DS3231_Write_Alarm_Time
 11970 ;;		_main
 11971 ;;		_Exit_Setup_Alarm_Time
 11972 ;;		_Do_Save_New_Alarm_Time
 11973 ;;		_Exit_Setup_Fan_Temp
 11974 ;;		_Do_Save_New_Fan_Temp
 11975 ;;		_Do_Setup_Time
 11976 ;;		_Do_Save_New_Time
 11977 ;;		_Exit_Time_Setup
 11978 ;;		_DS3231_Write_Initial_Alarm_Time
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           	psect	text58
 11983  0043E2                     __ptext58:
 11984                           	opt stack 0
 11985  0043E2                     _DS3231_Read_Time:
 11986                           	opt stack 23
 11987                           
 11988                           ;I2C_Support.c: 47: char Device = 0x68;
 11989                           
 11990                           ;incstack = 0
 11991  0043E2  0E68               	movlw	104
 11992  0043E4  6E15               	movwf	DS3231_Read_Time@Device,c
 11993                           
 11994                           ;I2C_Support.c: 48: char Address = 0x00;
 11995  0043E6  0E00               	movlw	0
 11996  0043E8  6E14               	movwf	DS3231_Read_Time@Address,c
 11997                           
 11998                           ;I2C_Support.c: 50: I2C_Start();
 11999  0043EA  ECDF  F027         	call	_I2C_Start	;wreg free
 12000                           
 12001                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12002  0043EE  5015               	movf	DS3231_Read_Time@Device,w,c
 12003  0043F0  2415               	addwf	DS3231_Read_Time@Device,w,c
 12004  0043F2  EC0B  F025         	call	_I2C_Write
 12005                           
 12006                           ;I2C_Support.c: 52: I2C_Write(Address);
 12007  0043F6  5014               	movf	DS3231_Read_Time@Address,w,c
 12008  0043F8  EC0B  F025         	call	_I2C_Write
 12009                           
 12010                           ;I2C_Support.c: 53: I2C_ReStart();
 12011  0043FC  EC7F  F027         	call	_I2C_ReStart	;wreg free
 12012                           
 12013                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12014  004400  80D8               	bsf	status,0,c
 12015  004402  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12016  004404  EC0B  F025         	call	_I2C_Write
 12017                           
 12018                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12019  004408  0E01               	movlw	1
 12020  00440A  EC68  F024         	call	_I2C_Read
 12021  00440E  6E6D               	movwf	_second,c
 12022                           
 12023                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12024  004410  0E01               	movlw	1
 12025  004412  EC68  F024         	call	_I2C_Read
 12026  004416  6E6B               	movwf	_minute,c
 12027                           
 12028                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12029  004418  0E01               	movlw	1
 12030  00441A  EC68  F024         	call	_I2C_Read
 12031  00441E  6E6A               	movwf	_hour,c
 12032                           
 12033                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12034  004420  0E01               	movlw	1
 12035  004422  EC68  F024         	call	_I2C_Read
 12036  004426  0100               	movlb	0	; () banked
 12037  004428  6FAA               	movwf	_dow& (0+255),b
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12041  00442A  0E01               	movlw	1
 12042  00442C  EC68  F024         	call	_I2C_Read
 12043  004430  6E67               	movwf	_day,c
 12044                           
 12045                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12046  004432  0E01               	movlw	1
 12047  004434  EC68  F024         	call	_I2C_Read
 12048  004438  6E6C               	movwf	_month,c
 12049                           
 12050                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12051  00443A  0E00               	movlw	0
 12052  00443C  EC68  F024         	call	_I2C_Read
 12053  004440  0100               	movlb	0	; () banked
 12054  004442  6FB4               	movwf	_year& (0+255),b
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;I2C_Support.c: 62: I2C_Stop();
 12058  004444  ECD6  F027         	call	_I2C_Stop	;wreg free
 12059  004448  0012               	return		;funcret
 12060  00444A                     __end_of_DS3231_Read_Time:
 12061                           	opt stack 0
 12062                           tblptru	equ	0xFF8
 12063                           tblptrh	equ	0xFF7
 12064                           tblptrl	equ	0xFF6
 12065                           tablat	equ	0xFF5
 12066                           prodh	equ	0xFF4
 12067                           prodl	equ	0xFF3
 12068                           intcon	equ	0xFF2
 12069                           intcon2	equ	0xFF1
 12070                           postinc0	equ	0xFEE
 12071                           wreg	equ	0xFE8
 12072                           postdec1	equ	0xFE5
 12073                           fsr1l	equ	0xFE1
 12074                           indf2	equ	0xFDF
 12075                           postinc2	equ	0xFDE
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12081 ;; Defined at:
 12082 ;;		line 139 in file "I2C_Support.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;		None
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;  Device          1   20[COMRAM] unsigned char 
 12087 ;;  Address         1   19[COMRAM] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;		None               void
 12090 ;; Registers used:
 12091 ;;		wreg, status,2, status,0, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;Total ram usage:        2 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; Hardware stack levels required when called:    5
 12104 ;; This function calls:
 12105 ;;		_I2C_ReStart
 12106 ;;		_I2C_Read
 12107 ;;		_I2C_Start
 12108 ;;		_I2C_Stop
 12109 ;;		_I2C_Write
 12110 ;; This function is called by:
 12111 ;;		_main
 12112 ;;		_Do_Setup_Alarm_Time
 12113 ;;		_Do_Save_New_Alarm_Time
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           	psect	text59
 12118  004838                     __ptext59:
 12119                           	opt stack 0
 12120  004838                     _DS3231_Read_Alarm_Time:
 12121                           	opt stack 23
 12122                           
 12123                           ;I2C_Support.c: 141: char Device = 0x68;
 12124                           
 12125                           ;incstack = 0
 12126  004838  0E68               	movlw	104
 12127  00483A  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12128                           
 12129                           ;I2C_Support.c: 142: char Address = 0x07;
 12130  00483C  0E07               	movlw	7
 12131  00483E  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12132                           
 12133                           ;I2C_Support.c: 143: I2C_Start();
 12134  004840  ECDF  F027         	call	_I2C_Start	;wreg free
 12135                           
 12136                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
 12137  004844  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12138  004846  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12139  004848  EC0B  F025         	call	_I2C_Write
 12140                           
 12141                           ;I2C_Support.c: 145: I2C_Write(Address);
 12142  00484C  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12143  00484E  EC0B  F025         	call	_I2C_Write
 12144                           
 12145                           ;I2C_Support.c: 146: I2C_ReStart();
 12146  004852  EC7F  F027         	call	_I2C_ReStart	;wreg free
 12147                           
 12148                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
 12149  004856  80D8               	bsf	status,0,c
 12150  004858  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12151  00485A  EC0B  F025         	call	_I2C_Write
 12152                           
 12153                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
 12154  00485E  0E01               	movlw	1
 12155  004860  EC68  F024         	call	_I2C_Read
 12156  004864  6E66               	movwf	_alarm_second,c
 12157                           
 12158                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
 12159  004866  0E01               	movlw	1
 12160  004868  EC68  F024         	call	_I2C_Read
 12161  00486C  6E65               	movwf	_alarm_minute,c
 12162                           
 12163                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
 12164  00486E  0E01               	movlw	1
 12165  004870  EC68  F024         	call	_I2C_Read
 12166  004874  6E64               	movwf	_alarm_hour,c
 12167                           
 12168                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
 12169  004876  0E00               	movlw	0
 12170  004878  EC68  F024         	call	_I2C_Read
 12171  00487C  0100               	movlb	0	; () banked
 12172  00487E  6FA7               	movwf	_alarm_date& (0+255),b
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;I2C_Support.c: 152: I2C_Stop();
 12176  004880  ECD6  F027         	call	_I2C_Stop	;wreg free
 12177  004884  0012               	return		;funcret
 12178  004886                     __end_of_DS3231_Read_Alarm_Time:
 12179                           	opt stack 0
 12180                           tblptru	equ	0xFF8
 12181                           tblptrh	equ	0xFF7
 12182                           tblptrl	equ	0xFF6
 12183                           tablat	equ	0xFF5
 12184                           prodh	equ	0xFF4
 12185                           prodl	equ	0xFF3
 12186                           intcon	equ	0xFF2
 12187                           intcon2	equ	0xFF1
 12188                           postinc0	equ	0xFEE
 12189                           wreg	equ	0xFE8
 12190                           postdec1	equ	0xFE5
 12191                           fsr1l	equ	0xFE1
 12192                           indf2	equ	0xFDF
 12193                           postinc2	equ	0xFDE
 12194                           fsr2h	equ	0xFDA
 12195                           fsr2l	equ	0xFD9
 12196                           status	equ	0xFD8
 12197                           
 12198 ;; *************** function _Do_Beep_Good *****************
 12199 ;; Defined at:
 12200 ;;		line 70 in file "utils.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;		None
 12205 ;; Return value:  Size  Location     Type
 12206 ;;		None               void
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;Total ram usage:        0 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    5
 12221 ;; This function calls:
 12222 ;;		_Activate_Buzzer_2KHz
 12223 ;;		_Deactivate_Buzzer
 12224 ;;		_Wait_One_Sec
 12225 ;;		_do_update_pwm
 12226 ;; This function is called by:
 12227 ;;		_main
 12228 ;;		_Do_Setup_Alarm_Time
 12229 ;;		_Setup_Temp_Fan
 12230 ;;		_Do_Setup_Time
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           	psect	text60
 12235  004EA2                     __ptext60:
 12236                           	opt stack 0
 12237  004EA2                     _Do_Beep_Good:
 12238                           	opt stack 24
 12239                           
 12240                           ;utils.c: 73: Activate_Buzzer_2KHz();
 12241                           
 12242                           ;incstack = 0
 12243  004EA2  ECC4  F027         	call	_Activate_Buzzer_2KHz	;wreg free
 12244                           
 12245                           ;utils.c: 74: Wait_One_Sec();
 12246  004EA6  ECD1  F026         	call	_Wait_One_Sec	;wreg free
 12247                           
 12248                           ;utils.c: 75: Deactivate_Buzzer();
 12249  004EAA  EC4E  F028         	call	_Deactivate_Buzzer	;wreg free
 12250                           
 12251                           ;utils.c: 76: Wait_One_Sec();
 12252  004EAE  ECD1  F026         	call	_Wait_One_Sec	;wreg free
 12253                           
 12254                           ;utils.c: 77: do_update_pwm(duty_cycle);
 12255  004EB2  5068               	movf	_duty_cycle,w,c
 12256  004EB4  ECDD  F01D         	call	_do_update_pwm
 12257  004EB8  0012               	return		;funcret
 12258  004EBA                     __end_of_Do_Beep_Good:
 12259                           	opt stack 0
 12260                           tblptru	equ	0xFF8
 12261                           tblptrh	equ	0xFF7
 12262                           tblptrl	equ	0xFF6
 12263                           tablat	equ	0xFF5
 12264                           prodh	equ	0xFF4
 12265                           prodl	equ	0xFF3
 12266                           intcon	equ	0xFF2
 12267                           intcon2	equ	0xFF1
 12268                           postinc0	equ	0xFEE
 12269                           wreg	equ	0xFE8
 12270                           postdec1	equ	0xFE5
 12271                           fsr1l	equ	0xFE1
 12272                           indf2	equ	0xFDF
 12273                           postinc2	equ	0xFDE
 12274                           fsr2h	equ	0xFDA
 12275                           fsr2l	equ	0xFD9
 12276                           status	equ	0xFD8
 12277                           
 12278 ;; *************** function _Activate_Buzzer_2KHz *****************
 12279 ;; Defined at:
 12280 ;;		line 113 in file "utils.c"
 12281 ;; Parameters:    Size  Location     Type
 12282 ;;		None
 12283 ;; Auto vars:     Size  Location     Type
 12284 ;;		None
 12285 ;; Return value:  Size  Location     Type
 12286 ;;		None               void
 12287 ;; Registers used:
 12288 ;;		wreg, status,2
 12289 ;; Tracked objects:
 12290 ;;		On entry : 0/0
 12291 ;;		On exit  : 0/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;Total ram usage:        0 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; Hardware stack levels required when called:    2
 12301 ;; This function calls:
 12302 ;;		Nothing
 12303 ;; This function is called by:
 12304 ;;		_Do_Beep_Good
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           	psect	text61
 12309  004F88                     __ptext61:
 12310                           	opt stack 0
 12311  004F88                     _Activate_Buzzer_2KHz:
 12312                           	opt stack 26
 12313                           
 12314                           ;utils.c: 116: PR2 = 0b11111001 ;
 12315                           
 12316                           ;incstack = 0
 12317  004F88  0EF9               	movlw	249
 12318  004F8A  6ECB               	movwf	4043,c	;volatile
 12319                           
 12320                           ;utils.c: 117: T2CON = 0b00000101 ;
 12321  004F8C  0E05               	movlw	5
 12322  004F8E  6ECA               	movwf	4042,c	;volatile
 12323                           
 12324                           ;utils.c: 118: CCPR2L = 0b01111100 ;
 12325  004F90  0E7C               	movlw	124
 12326  004F92  6EBB               	movwf	4027,c	;volatile
 12327                           
 12328                           ;utils.c: 119: CCP2CON = 0b00111100 ;
 12329  004F94  0E3C               	movlw	60
 12330  004F96  6EBA               	movwf	4026,c	;volatile
 12331  004F98  0012               	return		;funcret
 12332  004F9A                     __end_of_Activate_Buzzer_2KHz:
 12333                           	opt stack 0
 12334                           tblptru	equ	0xFF8
 12335                           tblptrh	equ	0xFF7
 12336                           tblptrl	equ	0xFF6
 12337                           tablat	equ	0xFF5
 12338                           prodh	equ	0xFF4
 12339                           prodl	equ	0xFF3
 12340                           intcon	equ	0xFF2
 12341                           intcon2	equ	0xFF1
 12342                           postinc0	equ	0xFEE
 12343                           wreg	equ	0xFE8
 12344                           postdec1	equ	0xFE5
 12345                           fsr1l	equ	0xFE1
 12346                           indf2	equ	0xFDF
 12347                           postinc2	equ	0xFDE
 12348                           fsr2h	equ	0xFDA
 12349                           fsr2l	equ	0xFD9
 12350                           status	equ	0xFD8
 12351                           
 12352 ;; *************** function _Do_Beep_Bad *****************
 12353 ;; Defined at:
 12354 ;;		line 80 in file "utils.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;		None
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;		None
 12359 ;; Return value:  Size  Location     Type
 12360 ;;		None               void
 12361 ;; Registers used:
 12362 ;;		wreg, status,2, status,0, cstack
 12363 ;; Tracked objects:
 12364 ;;		On entry : 0/0
 12365 ;;		On exit  : 0/0
 12366 ;;		Unchanged: 0/0
 12367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;Total ram usage:        0 bytes
 12373 ;; Hardware stack levels used:    1
 12374 ;; Hardware stack levels required when called:    5
 12375 ;; This function calls:
 12376 ;;		_Activate_Buzzer_500Hz
 12377 ;;		_Deactivate_Buzzer
 12378 ;;		_Wait_One_Sec
 12379 ;;		_do_update_pwm
 12380 ;; This function is called by:
 12381 ;;		_main
 12382 ;;		_Do_Setup_Alarm_Time
 12383 ;;		_Setup_Temp_Fan
 12384 ;;		_Do_Setup_Time
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           	psect	text62
 12389  004EBA                     __ptext62:
 12390                           	opt stack 0
 12391  004EBA                     _Do_Beep_Bad:
 12392                           	opt stack 24
 12393                           
 12394                           ;utils.c: 83: Activate_Buzzer_500Hz();
 12395                           
 12396                           ;incstack = 0
 12397  004EBA  ECCD  F027         	call	_Activate_Buzzer_500Hz	;wreg free
 12398                           
 12399                           ;utils.c: 84: Wait_One_Sec();
 12400  004EBE  ECD1  F026         	call	_Wait_One_Sec	;wreg free
 12401                           
 12402                           ;utils.c: 85: Deactivate_Buzzer();
 12403  004EC2  EC4E  F028         	call	_Deactivate_Buzzer	;wreg free
 12404                           
 12405                           ;utils.c: 86: Wait_One_Sec();
 12406  004EC6  ECD1  F026         	call	_Wait_One_Sec	;wreg free
 12407                           
 12408                           ;utils.c: 87: do_update_pwm(duty_cycle);
 12409  004ECA  5068               	movf	_duty_cycle,w,c
 12410  004ECC  ECDD  F01D         	call	_do_update_pwm
 12411  004ED0  0012               	return		;funcret
 12412  004ED2                     __end_of_Do_Beep_Bad:
 12413                           	opt stack 0
 12414                           tblptru	equ	0xFF8
 12415                           tblptrh	equ	0xFF7
 12416                           tblptrl	equ	0xFF6
 12417                           tablat	equ	0xFF5
 12418                           prodh	equ	0xFF4
 12419                           prodl	equ	0xFF3
 12420                           intcon	equ	0xFF2
 12421                           intcon2	equ	0xFF1
 12422                           postinc0	equ	0xFEE
 12423                           wreg	equ	0xFE8
 12424                           postdec1	equ	0xFE5
 12425                           fsr1l	equ	0xFE1
 12426                           indf2	equ	0xFDF
 12427                           postinc2	equ	0xFDE
 12428                           fsr2h	equ	0xFDA
 12429                           fsr2l	equ	0xFD9
 12430                           status	equ	0xFD8
 12431                           
 12432 ;; *************** function _do_update_pwm *****************
 12433 ;; Defined at:
 12434 ;;		line 137 in file "utils.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;  duty_cycle      1    wreg     unsigned char 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 12439 ;;  dc_f            3   63[COMRAM] float 
 12440 ;;  dc_I            2   67[COMRAM] int 
 12441 ;; Return value:  Size  Location     Type
 12442 ;;		None               void
 12443 ;; Registers used:
 12444 ;;		wreg, status,2, status,0, cstack
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12451 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12452 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12453 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12454 ;;Total ram usage:        9 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    4
 12457 ;; This function calls:
 12458 ;;		___ftdiv
 12459 ;;		___ftmul
 12460 ;;		___fttol
 12461 ;;		___lbtoft
 12462 ;; This function is called by:
 12463 ;;		_Monitor_Fan
 12464 ;;		_Do_Beep_Good
 12465 ;;		_Do_Beep_Bad
 12466 ;;		_Turn_On_Fan
 12467 ;;		_Do_Beep
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           	psect	text63
 12472  003BBA                     __ptext63:
 12473                           	opt stack 0
 12474  003BBA                     _do_update_pwm:
 12475                           	opt stack 24
 12476                           
 12477                           ;incstack = 0
 12478                           ;do_update_pwm@duty_cycle stored from wreg
 12479  003BBA  6E43               	movwf	do_update_pwm@duty_cycle,c
 12480                           
 12481                           ;utils.c: 139: float dc_f;
 12482                           ;utils.c: 140: int dc_I;
 12483                           ;utils.c: 141: PR2 = 0b00000100 ;
 12484  003BBC  0E04               	movlw	4
 12485  003BBE  6ECB               	movwf	4043,c	;volatile
 12486                           
 12487                           ;utils.c: 142: T2CON = 0b00000111 ;
 12488  003BC0  0E07               	movlw	7
 12489  003BC2  6ECA               	movwf	4042,c	;volatile
 12490                           
 12491                           ;utils.c: 143: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 12492  003BC4  0E00               	movlw	0
 12493  003BC6  6E22               	movwf	___ftmul@f2,c
 12494  003BC8  0E80               	movlw	128
 12495  003BCA  6E23               	movwf	___ftmul@f2+1,c
 12496  003BCC  0E40               	movlw	64
 12497  003BCE  6E24               	movwf	___ftmul@f2+2,c
 12498  003BD0  5043               	movf	do_update_pwm@duty_cycle,w,c
 12499  003BD2  EC4B  F026         	call	___lbtoft
 12500  003BD6  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 12501  003BDA  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 12502  003BDE  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 12503  003BE2  ECE7  F017         	call	___ftmul	;wreg free
 12504  003BE6  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 12505  003BEA  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 12506  003BEE  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 12507  003BF2  0E00               	movlw	0
 12508  003BF4  6E31               	movwf	___ftdiv@f2,c
 12509  003BF6  0EA0               	movlw	160
 12510  003BF8  6E32               	movwf	___ftdiv@f2+1,c
 12511  003BFA  0E41               	movlw	65
 12512  003BFC  6E33               	movwf	___ftdiv@f2+2,c
 12513  003BFE  EC3A  F01A         	call	___ftdiv	;wreg free
 12514  003C02  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 12515  003C06  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 12516  003C0A  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 12517                           
 12518                           ;utils.c: 144: dc_I = (int) dc_f;
 12519  003C0E  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 12520  003C12  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 12521  003C16  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 12522  003C1A  ECC7  F019         	call	___fttol	;wreg free
 12523  003C1E  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 12524  003C22  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 12525                           
 12526                           ;utils.c: 145: if (dc_I > duty_cycle) dc_I++;
 12527  003C26  5043               	movf	do_update_pwm@duty_cycle,w,c
 12528  003C28  6E3D               	movwf	??_do_update_pwm& (0+255),c
 12529  003C2A  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 12530  003C2C  5044               	movf	do_update_pwm@dc_I,w,c
 12531  003C2E  5C3D               	subwf	??_do_update_pwm,w,c
 12532  003C30  503E               	movf	??_do_update_pwm+1,w,c
 12533  003C32  0A80               	xorlw	128
 12534  003C34  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 12535  003C36  5045               	movf	do_update_pwm@dc_I+1,w,c
 12536  003C38  0A80               	xorlw	128
 12537  003C3A  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 12538  003C3C  B0D8               	btfsc	status,0,c
 12539  003C3E  D003               	goto	l9936
 12540  003C40  4A44               	infsnz	do_update_pwm@dc_I,f,c
 12541  003C42  2A45               	incf	do_update_pwm@dc_I+1,f,c
 12542  003C44  D000               	goto	l9936
 12543  003C46                     l9936:
 12544                           
 12545                           ;utils.c: 146: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 12546  003C46  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12547  003C4A  0E03               	movlw	3
 12548  003C4C  163D               	andwf	??_do_update_pwm,f,c
 12549  003C4E  383D               	swapf	??_do_update_pwm,w,c
 12550  003C50  0BF0               	andlw	240
 12551  003C52  090C               	iorlw	12
 12552  003C54  6EBD               	movwf	4029,c	;volatile
 12553                           
 12554                           ;utils.c: 147: CCPR1L = (dc_I) >> 2;
 12555  003C56  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12556  003C5A  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 12557  003C5E  343E               	rlcf	??_do_update_pwm+1,w,c
 12558  003C60  323E               	rrcf	??_do_update_pwm+1,f,c
 12559  003C62  323D               	rrcf	??_do_update_pwm,f,c
 12560  003C64  343E               	rlcf	??_do_update_pwm+1,w,c
 12561  003C66  323E               	rrcf	??_do_update_pwm+1,f,c
 12562  003C68  323D               	rrcf	??_do_update_pwm,f,c
 12563  003C6A  503D               	movf	??_do_update_pwm,w,c
 12564  003C6C  6EBE               	movwf	4030,c	;volatile
 12565  003C6E  0012               	return		;funcret
 12566  003C70                     __end_of_do_update_pwm:
 12567                           	opt stack 0
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           intcon2	equ	0xFF1
 12576                           postinc0	equ	0xFEE
 12577                           wreg	equ	0xFE8
 12578                           postdec1	equ	0xFE5
 12579                           fsr1l	equ	0xFE1
 12580                           indf2	equ	0xFDF
 12581                           postinc2	equ	0xFDE
 12582                           fsr2h	equ	0xFDA
 12583                           fsr2l	equ	0xFD9
 12584                           status	equ	0xFD8
 12585                           
 12586 ;; *************** function ___lbtoft *****************
 12587 ;; Defined at:
 12588 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  c               1    wreg     unsigned char 
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;  c               1   27[COMRAM] unsigned char 
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  3   24[COMRAM] float 
 12595 ;; Registers used:
 12596 ;;		wreg, status,2, status,0, cstack
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12602 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12605 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;Total ram usage:        4 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    3
 12609 ;; This function calls:
 12610 ;;		___ftpack
 12611 ;; This function is called by:
 12612 ;;		_do_update_pwm
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616                           	psect	text64
 12617  004C96                     __ptext64:
 12618                           	opt stack 0
 12619  004C96                     ___lbtoft:
 12620                           	opt stack 24
 12621                           
 12622                           ;incstack = 0
 12623                           ;___lbtoft@c stored from wreg
 12624  004C96  6E1C               	movwf	___lbtoft@c,c
 12625  004C98  501C               	movf	___lbtoft@c,w,c
 12626  004C9A  6E11               	movwf	___ftpack@arg,c
 12627  004C9C  6A12               	clrf	___ftpack@arg+1,c
 12628  004C9E  6A13               	clrf	___ftpack@arg+2,c
 12629  004CA0  0E8E               	movlw	142
 12630  004CA2  6E14               	movwf	___ftpack@exp,c
 12631  004CA4  0E00               	movlw	0
 12632  004CA6  6E15               	movwf	___ftpack@sign,c
 12633  004CA8  EC5E  F01C         	call	___ftpack	;wreg free
 12634  004CAC  C011  F019         	movff	?___ftpack,?___lbtoft
 12635  004CB0  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 12636  004CB4  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 12637  004CB8  D000               	goto	l2063
 12638  004CBA                     l2063:
 12639  004CBA  0012               	return		;funcret
 12640  004CBC                     __end_of___lbtoft:
 12641                           	opt stack 0
 12642                           tblptru	equ	0xFF8
 12643                           tblptrh	equ	0xFF7
 12644                           tblptrl	equ	0xFF6
 12645                           tablat	equ	0xFF5
 12646                           prodh	equ	0xFF4
 12647                           prodl	equ	0xFF3
 12648                           intcon	equ	0xFF2
 12649                           intcon2	equ	0xFF1
 12650                           postinc0	equ	0xFEE
 12651                           wreg	equ	0xFE8
 12652                           postdec1	equ	0xFE5
 12653                           fsr1l	equ	0xFE1
 12654                           indf2	equ	0xFDF
 12655                           postinc2	equ	0xFDE
 12656                           fsr2h	equ	0xFDA
 12657                           fsr2l	equ	0xFD9
 12658                           status	equ	0xFD8
 12659                           
 12660 ;; *************** function ___ftdiv *****************
 12661 ;; Defined at:
 12662 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;  f1              3   45[COMRAM] float 
 12665 ;;  f2              3   48[COMRAM] float 
 12666 ;; Auto vars:     Size  Location     Type
 12667 ;;  f3              3   55[COMRAM] float 
 12668 ;;  sign            1   59[COMRAM] unsigned char 
 12669 ;;  exp             1   58[COMRAM] unsigned char 
 12670 ;;  cntr            1   54[COMRAM] unsigned char 
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  3   45[COMRAM] float 
 12673 ;; Registers used:
 12674 ;;		wreg, status,2, status,0, cstack
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12680 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12681 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12682 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12683 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12684 ;;Total ram usage:       15 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:    3
 12687 ;; This function calls:
 12688 ;;		___ftpack
 12689 ;; This function is called by:
 12690 ;;		_do_update_pwm
 12691 ;;		_read_volt
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           	psect	text65
 12696  003474                     __ptext65:
 12697                           	opt stack 0
 12698  003474                     ___ftdiv:
 12699                           	opt stack 26
 12700                           
 12701                           ;incstack = 0
 12702  003474  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 12703  003478  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 12704  00347A  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 12705  00347C  342F               	rlcf	___ftdiv@f1+1,w,c
 12706  00347E  3634               	rlcf	??___ftdiv& (0+255),f,c
 12707  003480  E301               	bnc	u8351
 12708  003482  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 12709  003484                     u8351:
 12710  003484  5034               	movf	??___ftdiv,w,c
 12711  003486  6E3B               	movwf	___ftdiv@exp,c
 12712  003488  503B               	movf	___ftdiv@exp,w,c
 12713  00348A  A4D8               	btfss	status,2,c
 12714  00348C  D002               	goto	l9882
 12715  00348E  D00E               	goto	l9884
 12716  003490  D061               	goto	l1969
 12717  003492                     l9882:
 12718  003492  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 12719  003496  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 12720  003498  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 12721  00349A  3432               	rlcf	___ftdiv@f2+1,w,c
 12722  00349C  3634               	rlcf	??___ftdiv& (0+255),f,c
 12723  00349E  E301               	bnc	u8371
 12724  0034A0  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 12725  0034A2                     u8371:
 12726  0034A2  5034               	movf	??___ftdiv,w,c
 12727  0034A4  6E3C               	movwf	___ftdiv@sign,c
 12728  0034A6  503C               	movf	___ftdiv@sign,w,c
 12729  0034A8  A4D8               	btfss	status,2,c
 12730  0034AA  D007               	goto	l9888
 12731  0034AC                     l9884:
 12732  0034AC  0E00               	movlw	0
 12733  0034AE  6E2E               	movwf	?___ftdiv,c
 12734  0034B0  0E00               	movlw	0
 12735  0034B2  6E2F               	movwf	?___ftdiv+1,c
 12736  0034B4  0E00               	movlw	0
 12737  0034B6  6E30               	movwf	?___ftdiv+2,c
 12738  0034B8  D04D               	goto	l1969
 12739  0034BA                     l9888:
 12740  0034BA  0E00               	movlw	0
 12741  0034BC  6E38               	movwf	___ftdiv@f3,c
 12742  0034BE  0E00               	movlw	0
 12743  0034C0  6E39               	movwf	___ftdiv@f3+1,c
 12744  0034C2  0E00               	movlw	0
 12745  0034C4  6E3A               	movwf	___ftdiv@f3+2,c
 12746  0034C6  503C               	movf	___ftdiv@sign,w,c
 12747  0034C8  0F89               	addlw	137
 12748  0034CA  5E3B               	subwf	___ftdiv@exp,f,c
 12749  0034CC  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 12750  0034D0  5033               	movf	___ftdiv@f2+2,w,c
 12751  0034D2  1A3C               	xorwf	___ftdiv@sign,f,c
 12752  0034D4  0E80               	movlw	128
 12753  0034D6  163C               	andwf	___ftdiv@sign,f,c
 12754  0034D8  8E2F               	bsf	___ftdiv@f1+1,7,c
 12755  0034DA  0EFF               	movlw	255
 12756  0034DC  162E               	andwf	___ftdiv@f1,f,c
 12757  0034DE  0EFF               	movlw	255
 12758  0034E0  162F               	andwf	___ftdiv@f1+1,f,c
 12759  0034E2  0E00               	movlw	0
 12760  0034E4  1630               	andwf	___ftdiv@f1+2,f,c
 12761  0034E6  8E32               	bsf	___ftdiv@f2+1,7,c
 12762  0034E8  0EFF               	movlw	255
 12763  0034EA  1631               	andwf	___ftdiv@f2,f,c
 12764  0034EC  0EFF               	movlw	255
 12765  0034EE  1632               	andwf	___ftdiv@f2+1,f,c
 12766  0034F0  0E00               	movlw	0
 12767  0034F2  1633               	andwf	___ftdiv@f2+2,f,c
 12768  0034F4  0E18               	movlw	24
 12769  0034F6  6E37               	movwf	___ftdiv@cntr,c
 12770  0034F8  D000               	goto	l9908
 12771  0034FA                     l9908:
 12772  0034FA  90D8               	bcf	status,0,c
 12773  0034FC  3638               	rlcf	___ftdiv@f3,f,c
 12774  0034FE  3639               	rlcf	___ftdiv@f3+1,f,c
 12775  003500  363A               	rlcf	___ftdiv@f3+2,f,c
 12776  003502  5031               	movf	___ftdiv@f2,w,c
 12777  003504  5C2E               	subwf	___ftdiv@f1,w,c
 12778  003506  5032               	movf	___ftdiv@f2+1,w,c
 12779  003508  582F               	subwfb	___ftdiv@f1+1,w,c
 12780  00350A  5033               	movf	___ftdiv@f2+2,w,c
 12781  00350C  5830               	subwfb	___ftdiv@f1+2,w,c
 12782  00350E  A0D8               	btfss	status,0,c
 12783  003510  D007               	goto	l1972
 12784  003512  5031               	movf	___ftdiv@f2,w,c
 12785  003514  5E2E               	subwf	___ftdiv@f1,f,c
 12786  003516  5032               	movf	___ftdiv@f2+1,w,c
 12787  003518  5A2F               	subwfb	___ftdiv@f1+1,f,c
 12788  00351A  5033               	movf	___ftdiv@f2+2,w,c
 12789  00351C  5A30               	subwfb	___ftdiv@f1+2,f,c
 12790  00351E  8038               	bsf	___ftdiv@f3,0,c
 12791  003520                     l1972:
 12792  003520  90D8               	bcf	status,0,c
 12793  003522  362E               	rlcf	___ftdiv@f1,f,c
 12794  003524  362F               	rlcf	___ftdiv@f1+1,f,c
 12795  003526  3630               	rlcf	___ftdiv@f1+2,f,c
 12796  003528  2E37               	decfsz	___ftdiv@cntr,f,c
 12797  00352A  D7E7               	goto	l9908
 12798  00352C  D000               	goto	l9918
 12799  00352E                     l9918:
 12800  00352E  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 12801  003532  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12802  003536  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12803  00353A  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 12804  00353E  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 12805  003542  EC5E  F01C         	call	___ftpack	;wreg free
 12806  003546  C011  F02E         	movff	?___ftpack,?___ftdiv
 12807  00354A  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 12808  00354E  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 12809  003552  D000               	goto	l1969
 12810  003554                     l1969:
 12811  003554  0012               	return		;funcret
 12812  003556                     __end_of___ftdiv:
 12813                           	opt stack 0
 12814                           tblptru	equ	0xFF8
 12815                           tblptrh	equ	0xFF7
 12816                           tblptrl	equ	0xFF6
 12817                           tablat	equ	0xFF5
 12818                           prodh	equ	0xFF4
 12819                           prodl	equ	0xFF3
 12820                           intcon	equ	0xFF2
 12821                           intcon2	equ	0xFF1
 12822                           postinc0	equ	0xFEE
 12823                           wreg	equ	0xFE8
 12824                           postdec1	equ	0xFE5
 12825                           fsr1l	equ	0xFE1
 12826                           indf2	equ	0xFDF
 12827                           postinc2	equ	0xFDE
 12828                           fsr2h	equ	0xFDA
 12829                           fsr2l	equ	0xFD9
 12830                           status	equ	0xFD8
 12831                           
 12832 ;; *************** function _Wait_One_Sec *****************
 12833 ;; Defined at:
 12834 ;;		line 91 in file "utils.c"
 12835 ;; Parameters:    Size  Location     Type
 12836 ;;		None
 12837 ;; Auto vars:     Size  Location     Type
 12838 ;;  k               2   16[COMRAM] int 
 12839 ;; Return value:  Size  Location     Type
 12840 ;;		None               void
 12841 ;; Registers used:
 12842 ;;		wreg, status,2, status,0
 12843 ;; Tracked objects:
 12844 ;;		On entry : 0/0
 12845 ;;		On exit  : 0/0
 12846 ;;		Unchanged: 0/0
 12847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;Total ram usage:        2 bytes
 12853 ;; Hardware stack levels used:    1
 12854 ;; Hardware stack levels required when called:    2
 12855 ;; This function calls:
 12856 ;;		Nothing
 12857 ;; This function is called by:
 12858 ;;		_Do_Beep_Good
 12859 ;;		_Do_Beep_Bad
 12860 ;;		_Do_Beep
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           	psect	text66
 12865  004DA2                     __ptext66:
 12866                           	opt stack 0
 12867  004DA2                     _Wait_One_Sec:
 12868                           	opt stack 26
 12869                           
 12870                           ;utils.c: 93: for (int k=0;k<0xffff;k++);
 12871                           
 12872                           ;incstack = 0
 12873  004DA2  0E00               	movlw	0
 12874  004DA4  6E12               	movwf	Wait_One_Sec@k+1,c
 12875  004DA6  0E00               	movlw	0
 12876  004DA8  6E11               	movwf	Wait_One_Sec@k,c
 12877  004DAA                     l7322:
 12878  004DAA  2811               	incf	Wait_One_Sec@k,w,c
 12879  004DAC  E105               	bnz	l7326
 12880  004DAE  2812               	incf	Wait_One_Sec@k+1,w,c
 12881  004DB0  B4D8               	btfsc	status,2,c
 12882  004DB2  D006               	goto	l1359
 12883  004DB4  D001               	goto	l7326
 12884  004DB6  D004               	goto	l1359
 12885  004DB8                     l7326:
 12886  004DB8  4A11               	infsnz	Wait_One_Sec@k,f,c
 12887  004DBA  2A12               	incf	Wait_One_Sec@k+1,f,c
 12888  004DBC  D7F6               	goto	l7322
 12889  004DBE  D7FC               	goto	l7326
 12890  004DC0                     l1359:
 12891  004DC0  0012               	return		;funcret
 12892  004DC2                     __end_of_Wait_One_Sec:
 12893                           	opt stack 0
 12894                           tblptru	equ	0xFF8
 12895                           tblptrh	equ	0xFF7
 12896                           tblptrl	equ	0xFF6
 12897                           tablat	equ	0xFF5
 12898                           prodh	equ	0xFF4
 12899                           prodl	equ	0xFF3
 12900                           intcon	equ	0xFF2
 12901                           intcon2	equ	0xFF1
 12902                           postinc0	equ	0xFEE
 12903                           wreg	equ	0xFE8
 12904                           postdec1	equ	0xFE5
 12905                           fsr1l	equ	0xFE1
 12906                           indf2	equ	0xFDF
 12907                           postinc2	equ	0xFDE
 12908                           fsr2h	equ	0xFDA
 12909                           fsr2l	equ	0xFD9
 12910                           status	equ	0xFD8
 12911                           
 12912 ;; *************** function _Deactivate_Buzzer *****************
 12913 ;; Defined at:
 12914 ;;		line 131 in file "utils.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;		None
 12917 ;; Auto vars:     Size  Location     Type
 12918 ;;		None
 12919 ;; Return value:  Size  Location     Type
 12920 ;;		None               void
 12921 ;; Registers used:
 12922 ;;		wreg, status,2
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;Total ram usage:        0 bytes
 12933 ;; Hardware stack levels used:    1
 12934 ;; Hardware stack levels required when called:    2
 12935 ;; This function calls:
 12936 ;;		Nothing
 12937 ;; This function is called by:
 12938 ;;		_test_alarm
 12939 ;;		_Do_Beep_Good
 12940 ;;		_Do_Beep_Bad
 12941 ;;		_Do_Beep
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           	psect	text67
 12946  00509C                     __ptext67:
 12947                           	opt stack 0
 12948  00509C                     _Deactivate_Buzzer:
 12949                           	opt stack 27
 12950                           
 12951                           ;utils.c: 133: CCP2CON = 0x0;
 12952                           
 12953                           ;incstack = 0
 12954  00509C  0E00               	movlw	0
 12955  00509E  6EBA               	movwf	4026,c	;volatile
 12956                           
 12957                           ;utils.c: 134: PORTBbits.RB3 = 0;
 12958  0050A0  9681               	bcf	3969,3,c	;volatile
 12959  0050A2  0012               	return		;funcret
 12960  0050A4                     __end_of_Deactivate_Buzzer:
 12961                           	opt stack 0
 12962                           tblptru	equ	0xFF8
 12963                           tblptrh	equ	0xFF7
 12964                           tblptrl	equ	0xFF6
 12965                           tablat	equ	0xFF5
 12966                           prodh	equ	0xFF4
 12967                           prodl	equ	0xFF3
 12968                           intcon	equ	0xFF2
 12969                           intcon2	equ	0xFF1
 12970                           postinc0	equ	0xFEE
 12971                           wreg	equ	0xFE8
 12972                           postdec1	equ	0xFE5
 12973                           fsr1l	equ	0xFE1
 12974                           indf2	equ	0xFDF
 12975                           postinc2	equ	0xFDE
 12976                           fsr2h	equ	0xFDA
 12977                           fsr2l	equ	0xFD9
 12978                           status	equ	0xFD8
 12979                           
 12980 ;; *************** function _Activate_Buzzer_500Hz *****************
 12981 ;; Defined at:
 12982 ;;		line 104 in file "utils.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;		None
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;		None
 12987 ;; Return value:  Size  Location     Type
 12988 ;;		None               void
 12989 ;; Registers used:
 12990 ;;		wreg, status,2
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13000 ;;Total ram usage:        0 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:    2
 13003 ;; This function calls:
 13004 ;;		Nothing
 13005 ;; This function is called by:
 13006 ;;		_Do_Beep_Bad
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           	psect	text68
 13011  004F9A                     __ptext68:
 13012                           	opt stack 0
 13013  004F9A                     _Activate_Buzzer_500Hz:
 13014                           	opt stack 26
 13015                           
 13016                           ;utils.c: 107: PR2 = 0b11111001 ;
 13017                           
 13018                           ;incstack = 0
 13019  004F9A  0EF9               	movlw	249
 13020  004F9C  6ECB               	movwf	4043,c	;volatile
 13021                           
 13022                           ;utils.c: 108: T2CON = 0b00000111 ;
 13023  004F9E  0E07               	movlw	7
 13024  004FA0  6ECA               	movwf	4042,c	;volatile
 13025                           
 13026                           ;utils.c: 109: CCPR2L = 0b01111100 ;
 13027  004FA2  0E7C               	movlw	124
 13028  004FA4  6EBB               	movwf	4027,c	;volatile
 13029                           
 13030                           ;utils.c: 110: CCP2CON = 0b00111100 ;
 13031  004FA6  0E3C               	movlw	60
 13032  004FA8  6EBA               	movwf	4026,c	;volatile
 13033  004FAA  0012               	return		;funcret
 13034  004FAC                     __end_of_Activate_Buzzer_500Hz:
 13035                           	opt stack 0
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           intcon2	equ	0xFF1
 13044                           postinc0	equ	0xFEE
 13045                           wreg	equ	0xFE8
 13046                           postdec1	equ	0xFE5
 13047                           fsr1l	equ	0xFE1
 13048                           indf2	equ	0xFDF
 13049                           postinc2	equ	0xFDE
 13050                           fsr2h	equ	0xFDA
 13051                           fsr2l	equ	0xFD9
 13052                           status	equ	0xFD8
 13053                           
 13054 ;; *************** function _Decrease_Alarm_Time *****************
 13055 ;; Defined at:
 13056 ;;		line 89 in file "Setup_Alarm_Time.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;		None
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;		None
 13061 ;; Return value:  Size  Location     Type
 13062 ;;		None               void
 13063 ;; Registers used:
 13064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13074 ;;Total ram usage:        0 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:   10
 13077 ;; This function calls:
 13078 ;;		_Update_Setup_Alarm_Time_Screen
 13079 ;; This function is called by:
 13080 ;;		_Do_Setup_Alarm_Time
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           	psect	text69
 13085  004572                     __ptext69:
 13086                           	opt stack 0
 13087  004572                     _Decrease_Alarm_Time:
 13088                           	opt stack 19
 13089                           
 13090                           ;Setup_Alarm_Time.c: 91: switch (Select_Alarm_Field)
 13091                           
 13092                           ;incstack = 0
 13093  004572  D021               	goto	l10174
 13094  004574                     l10154:
 13095                           
 13096                           ;Setup_Alarm_Time.c: 94: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13097  004574  0100               	movlb	0	; () banked
 13098  004576  51AC               	movf	_setup_alarm_hour& (0+255),w,b
 13099  004578  A4D8               	btfss	status,2,c
 13100  00457A  D004               	goto	l10158
 13101                           
 13102                           ; BSR set to: 0
 13103  00457C  0E17               	movlw	23
 13104  00457E  0100               	movlb	0	; () banked
 13105  004580  6FAC               	movwf	_setup_alarm_hour& (0+255),b
 13106  004582  D025               	goto	l10176
 13107  004584                     l10158:
 13108                           
 13109                           ; BSR set to: 0
 13110                           ;Setup_Alarm_Time.c: 95: else --setup_alarm_hour;
 13111  004584  0100               	movlb	0	; () banked
 13112  004586  07AC               	decf	_setup_alarm_hour& (0+255),f,b
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;Setup_Alarm_Time.c: 96: break;
 13116  004588  D022               	goto	l10176
 13117  00458A                     l10160:
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;Setup_Alarm_Time.c: 99: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13121  00458A  0100               	movlb	0	; () banked
 13122  00458C  51AD               	movf	_setup_alarm_minute& (0+255),w,b
 13123  00458E  A4D8               	btfss	status,2,c
 13124  004590  D004               	goto	l10164
 13125                           
 13126                           ; BSR set to: 0
 13127  004592  0E3B               	movlw	59
 13128  004594  0100               	movlb	0	; () banked
 13129  004596  6FAD               	movwf	_setup_alarm_minute& (0+255),b
 13130  004598  D01A               	goto	l10176
 13131  00459A                     l10164:
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;Setup_Alarm_Time.c: 100: else --setup_alarm_minute;
 13135  00459A  0100               	movlb	0	; () banked
 13136  00459C  07AD               	decf	_setup_alarm_minute& (0+255),f,b
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;Setup_Alarm_Time.c: 101: break;
 13140  00459E  D017               	goto	l10176
 13141  0045A0                     l10166:
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;Setup_Alarm_Time.c: 106: if (setup_alarm_second == 0) setup_alarm_second = 59;
 13145  0045A0  0100               	movlb	0	; () banked
 13146  0045A2  51AE               	movf	_setup_alarm_second& (0+255),w,b
 13147  0045A4  A4D8               	btfss	status,2,c
 13148  0045A6  D004               	goto	l10170
 13149                           
 13150                           ; BSR set to: 0
 13151  0045A8  0E3B               	movlw	59
 13152  0045AA  0100               	movlb	0	; () banked
 13153  0045AC  6FAE               	movwf	_setup_alarm_second& (0+255),b
 13154  0045AE  D00F               	goto	l10176
 13155  0045B0                     l10170:
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;Setup_Alarm_Time.c: 107: else --setup_alarm_second;
 13159  0045B0  0100               	movlb	0	; () banked
 13160  0045B2  07AE               	decf	_setup_alarm_second& (0+255),f,b
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;Setup_Alarm_Time.c: 112: }
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;Setup_Alarm_Time.c: 111: break;
 13167                           
 13168                           ;Setup_Alarm_Time.c: 110: default:
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;Setup_Alarm_Time.c: 108: break;
 13172  0045B4  D00C               	goto	l10176
 13173  0045B6                     l10174:
 13174  0045B6  0100               	movlb	0	; () banked
 13175  0045B8  51A3               	movf	_Select_Alarm_Field& (0+255),w,b
 13176                           
 13177                           ; Switch size 1, requested type "space"
 13178                           ; Number of cases is 3, Range of values is 0 to 2
 13179                           ; switch strategies available:
 13180                           ; Name         Instructions Cycles
 13181                           ; simple_byte           10     6 (average)
 13182                           ;	Chosen strategy is simple_byte
 13183  0045BA  0A00               	xorlw	0	; case 0
 13184  0045BC  B4D8               	btfsc	status,2,c
 13185  0045BE  D7DA               	goto	l10154
 13186  0045C0  0A01               	xorlw	1	; case 1
 13187  0045C2  B4D8               	btfsc	status,2,c
 13188  0045C4  D7E2               	goto	l10160
 13189  0045C6  0A03               	xorlw	3	; case 2
 13190  0045C8  B4D8               	btfsc	status,2,c
 13191  0045CA  D7EA               	goto	l10166
 13192  0045CC  D000               	goto	l10176
 13193  0045CE                     l10176:
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;Setup_Alarm_Time.c: 113: Update_Setup_Alarm_Time_Screen();
 13197  0045CE  EC52  F019         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13198  0045D2  0012               	return		;funcret
 13199  0045D4                     __end_of_Decrease_Alarm_Time:
 13200                           	opt stack 0
 13201                           tblptru	equ	0xFF8
 13202                           tblptrh	equ	0xFF7
 13203                           tblptrl	equ	0xFF6
 13204                           tablat	equ	0xFF5
 13205                           prodh	equ	0xFF4
 13206                           prodl	equ	0xFF3
 13207                           intcon	equ	0xFF2
 13208                           intcon2	equ	0xFF1
 13209                           postinc0	equ	0xFEE
 13210                           wreg	equ	0xFE8
 13211                           postdec1	equ	0xFE5
 13212                           fsr1l	equ	0xFE1
 13213                           indf2	equ	0xFDF
 13214                           postinc2	equ	0xFDE
 13215                           fsr2h	equ	0xFDA
 13216                           fsr2l	equ	0xFD9
 13217                           status	equ	0xFD8
 13218                           
 13219 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13220 ;; Defined at:
 13221 ;;		line 165 in file "Setup_Alarm_Time.c"
 13222 ;; Parameters:    Size  Location     Type
 13223 ;;		None
 13224 ;; Auto vars:     Size  Location     Type
 13225 ;;		None
 13226 ;; Return value:  Size  Location     Type
 13227 ;;		None               void
 13228 ;; Registers used:
 13229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13230 ;; Tracked objects:
 13231 ;;		On entry : 0/0
 13232 ;;		On exit  : 0/0
 13233 ;;		Unchanged: 0/0
 13234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13239 ;;Total ram usage:        0 bytes
 13240 ;; Hardware stack levels used:    1
 13241 ;; Hardware stack levels required when called:    9
 13242 ;; This function calls:
 13243 ;;		___awdiv
 13244 ;;		___awmod
 13245 ;;		_drawtext
 13246 ;;		_printf
 13247 ;; This function is called by:
 13248 ;;		_Do_Setup_Alarm_Time
 13249 ;;		_Increase_Alarm_Time
 13250 ;;		_Decrease_Alarm_Time
 13251 ;; This function uses a non-reentrant model
 13252 ;;
 13253                           
 13254                           	psect	text70
 13255  0032A4                     __ptext70:
 13256                           	opt stack 0
 13257  0032A4                     _Update_Setup_Alarm_Time_Screen:
 13258                           	opt stack 20
 13259                           
 13260                           ;Setup_Alarm_Time.c: 167: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 13261                           
 13262                           ;incstack = 0
 13263  0032A4  0EAE               	movlw	low STR_27
 13264  0032A6  0100               	movlb	0	; () banked
 13265  0032A8  6FDD               	movwf	printf@f& (0+255),b
 13266  0032AA  0EFF               	movlw	high STR_27
 13267  0032AC  0100               	movlb	0	; () banked
 13268  0032AE  6FDE               	movwf	(printf@f+1)& (0+255),b
 13269  0032B0  C0AC  F0DF         	movff	_setup_alarm_hour,?_printf+2
 13270  0032B4  0100               	movlb	0	; () banked
 13271  0032B6  6BE0               	clrf	(?_printf+3)& (0+255),b
 13272  0032B8  C0AD  F0E1         	movff	_setup_alarm_minute,?_printf+4
 13273  0032BC  0100               	movlb	0	; () banked
 13274  0032BE  6BE2               	clrf	(?_printf+5)& (0+255),b
 13275  0032C0  C0AE  F0E3         	movff	_setup_alarm_second,?_printf+6
 13276  0032C4  0100               	movlb	0	; () banked
 13277  0032C6  6BE4               	clrf	(?_printf+7)& (0+255),b
 13278  0032C8  EC0E  F000         	call	_printf	;wreg free
 13279                           
 13280                           ;Setup_Alarm_Time.c: 168: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13281  0032CC  C0AC  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 13282  0032D0  6A18               	clrf	___awdiv@dividend+1,c
 13283  0032D2  0E00               	movlw	0
 13284  0032D4  6E1A               	movwf	___awdiv@divisor+1,c
 13285  0032D6  0E0A               	movlw	10
 13286  0032D8  6E19               	movwf	___awdiv@divisor,c
 13287  0032DA  ECD0  F01E         	call	___awdiv	;wreg free
 13288  0032DE  5017               	movf	?___awdiv,w,c
 13289  0032E0  0F30               	addlw	48
 13290  0032E2  0101               	movlb	1	; () banked
 13291  0032E4  6F46               	movwf	_setup_alarm_time& (0+255),b
 13292                           
 13293                           ; BSR set to: 1
 13294                           ;Setup_Alarm_Time.c: 169: setup_alarm_time[1] = (setup_alarm_hour%10)+'0';
 13295  0032E6  C0AC  F03D         	movff	_setup_alarm_hour,___awmod@dividend
 13296  0032EA  6A3E               	clrf	___awmod@dividend+1,c
 13297  0032EC  0E00               	movlw	0
 13298  0032EE  6E40               	movwf	___awmod@divisor+1,c
 13299  0032F0  0E0A               	movlw	10
 13300  0032F2  6E3F               	movwf	___awmod@divisor,c
 13301  0032F4  EC08  F021         	call	___awmod	;wreg free
 13302  0032F8  503D               	movf	?___awmod,w,c
 13303  0032FA  0F30               	addlw	48
 13304  0032FC  0101               	movlb	1	; () banked
 13305  0032FE  6F47               	movwf	(_setup_alarm_time+1)& (0+255),b
 13306                           
 13307                           ; BSR set to: 1
 13308                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[3] = (setup_alarm_minute/10)+'0';
 13309  003300  C0AD  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 13310  003304  6A18               	clrf	___awdiv@dividend+1,c
 13311  003306  0E00               	movlw	0
 13312  003308  6E1A               	movwf	___awdiv@divisor+1,c
 13313  00330A  0E0A               	movlw	10
 13314  00330C  6E19               	movwf	___awdiv@divisor,c
 13315  00330E  ECD0  F01E         	call	___awdiv	;wreg free
 13316  003312  5017               	movf	?___awdiv,w,c
 13317  003314  0F30               	addlw	48
 13318  003316  0101               	movlb	1	; () banked
 13319  003318  6F49               	movwf	(_setup_alarm_time+3)& (0+255),b
 13320                           
 13321                           ; BSR set to: 1
 13322                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[4] = (setup_alarm_minute%10)+'0';
 13323  00331A  C0AD  F03D         	movff	_setup_alarm_minute,___awmod@dividend
 13324  00331E  6A3E               	clrf	___awmod@dividend+1,c
 13325  003320  0E00               	movlw	0
 13326  003322  6E40               	movwf	___awmod@divisor+1,c
 13327  003324  0E0A               	movlw	10
 13328  003326  6E3F               	movwf	___awmod@divisor,c
 13329  003328  EC08  F021         	call	___awmod	;wreg free
 13330  00332C  503D               	movf	?___awmod,w,c
 13331  00332E  0F30               	addlw	48
 13332  003330  0101               	movlb	1	; () banked
 13333  003332  6F4A               	movwf	(_setup_alarm_time+4)& (0+255),b
 13334                           
 13335                           ; BSR set to: 1
 13336                           ;Setup_Alarm_Time.c: 172: setup_alarm_time[6] = (setup_alarm_second/10)+'0';
 13337  003334  C0AE  F017         	movff	_setup_alarm_second,___awdiv@dividend
 13338  003338  6A18               	clrf	___awdiv@dividend+1,c
 13339  00333A  0E00               	movlw	0
 13340  00333C  6E1A               	movwf	___awdiv@divisor+1,c
 13341  00333E  0E0A               	movlw	10
 13342  003340  6E19               	movwf	___awdiv@divisor,c
 13343  003342  ECD0  F01E         	call	___awdiv	;wreg free
 13344  003346  5017               	movf	?___awdiv,w,c
 13345  003348  0F30               	addlw	48
 13346  00334A  0101               	movlb	1	; () banked
 13347  00334C  6F4C               	movwf	(_setup_alarm_time+6)& (0+255),b
 13348                           
 13349                           ; BSR set to: 1
 13350                           ;Setup_Alarm_Time.c: 173: setup_alarm_time[7] = (setup_alarm_second%10)+'0';
 13351  00334E  C0AE  F03D         	movff	_setup_alarm_second,___awmod@dividend
 13352  003352  6A3E               	clrf	___awmod@dividend+1,c
 13353  003354  0E00               	movlw	0
 13354  003356  6E40               	movwf	___awmod@divisor+1,c
 13355  003358  0E0A               	movlw	10
 13356  00335A  6E3F               	movwf	___awmod@divisor,c
 13357  00335C  EC08  F021         	call	___awmod	;wreg free
 13358  003360  503D               	movf	?___awmod,w,c
 13359  003362  0F30               	addlw	48
 13360  003364  0101               	movlb	1	; () banked
 13361  003366  6F4D               	movwf	(_setup_alarm_time+7)& (0+255),b
 13362                           
 13363                           ;Setup_Alarm_Time.c: 174: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 13364  003368  0E34               	movlw	52
 13365  00336A  6E39               	movwf	drawtext@y,c
 13366  00336C  0E46               	movlw	low _setup_alarm_time
 13367  00336E  6E3A               	movwf	drawtext@_text,c
 13368  003370  0E01               	movlw	high _setup_alarm_time
 13369  003372  6E3B               	movwf	drawtext@_text+1,c
 13370  003374  0E07               	movlw	7
 13371  003376  6E3D               	movwf	drawtext@color+1,c
 13372  003378  683C               	setf	drawtext@color,c
 13373  00337A  0E00               	movlw	0
 13374  00337C  6E3F               	movwf	drawtext@bg+1,c
 13375  00337E  0E00               	movlw	0
 13376  003380  6E3E               	movwf	drawtext@bg,c
 13377  003382  0E02               	movlw	2
 13378  003384  6E40               	movwf	drawtext@size,c
 13379  003386  0E0F               	movlw	15
 13380  003388  ECAB  F01A         	call	_drawtext
 13381  00338C  0012               	return		;funcret
 13382  00338E                     __end_of_Update_Setup_Alarm_Time_Screen:
 13383                           	opt stack 0
 13384                           tblptru	equ	0xFF8
 13385                           tblptrh	equ	0xFF7
 13386                           tblptrl	equ	0xFF6
 13387                           tablat	equ	0xFF5
 13388                           prodh	equ	0xFF4
 13389                           prodl	equ	0xFF3
 13390                           intcon	equ	0xFF2
 13391                           intcon2	equ	0xFF1
 13392                           postinc0	equ	0xFEE
 13393                           wreg	equ	0xFE8
 13394                           postdec1	equ	0xFE5
 13395                           fsr1l	equ	0xFE1
 13396                           indf2	equ	0xFDF
 13397                           postinc2	equ	0xFDE
 13398                           fsr2h	equ	0xFDA
 13399                           fsr2l	equ	0xFD9
 13400                           status	equ	0xFD8
 13401                           
 13402 ;; *************** function _printf *****************
 13403 ;; Defined at:
 13404 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 13407 ;;		 -> STR_35(22), STR_27(11), STR_5(12), STR_4(19), 
 13408 ;;		 -> STR_3(23), STR_2(21), STR_1(30), 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;  idx             1    3[BANK1 ] unsigned char 
 13411 ;;  val             4   16[BANK1 ] unsigned long 
 13412 ;;  tmpval          4    8[BANK1 ] struct .
 13413 ;;  fval            3   22[BANK1 ] struct .
 13414 ;;  cp              3    0        PTR const unsigned char 
 13415 ;;  flag            2   20[BANK1 ] unsigned short 
 13416 ;;  exp             2   14[BANK1 ] int 
 13417 ;;  width           2   12[BANK1 ] int 
 13418 ;;  prec            2    6[BANK1 ] int 
 13419 ;;  ap              2    4[BANK1 ] PTR void [1]
 13420 ;;		 -> ?_printf(2), 
 13421 ;;  len             2    0        unsigned int 
 13422 ;;  c               1   25[BANK1 ] char 
 13423 ;;  d               1    0        unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;                  2    0[BANK0 ] int 
 13426 ;; Registers used:
 13427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13428 ;; Tracked objects:
 13429 ;;		On entry : 0/0
 13430 ;;		On exit  : 0/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13433 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13434 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;      Totals:         0      20      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;Total ram usage:       46 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    5
 13440 ;; This function calls:
 13441 ;;		___awdiv
 13442 ;;		___ftadd
 13443 ;;		___ftge
 13444 ;;		___ftmul
 13445 ;;		___ftneg
 13446 ;;		___ftsub
 13447 ;;		___fttol
 13448 ;;		___lldiv
 13449 ;;		___llmod
 13450 ;;		___lltoft
 13451 ;;		___wmul
 13452 ;;		__div_to_l_
 13453 ;;		__tdiv_to_l_
 13454 ;;		_fround
 13455 ;;		_isdigit
 13456 ;;		_putch
 13457 ;;		_scale
 13458 ;; This function is called by:
 13459 ;;		_main
 13460 ;;		_Update_Setup_Alarm_Time_Screen
 13461 ;;		_check_for_button_input
 13462 ;; This function uses a non-reentrant model
 13463 ;;
 13464                           
 13465                           	psect	text71
 13466  00001C                     __ptext71:
 13467                           	opt stack 0
 13468  00001C                     _printf:
 13469                           	opt stack 25
 13470                           
 13471                           ;doprnt.c: 466: va_list ap;
 13472                           ;doprnt.c: 499: signed char c;
 13473                           ;doprnt.c: 501: int width;
 13474                           ;doprnt.c: 504: int prec;
 13475                           ;doprnt.c: 508: unsigned short flag;
 13476                           ;doprnt.c: 515: char d;
 13477                           ;doprnt.c: 516: double fval;
 13478                           ;doprnt.c: 517: int exp;
 13479                           ;doprnt.c: 523: union {
 13480                           ;doprnt.c: 524: unsigned long vd;
 13481                           ;doprnt.c: 525: double integ;
 13482                           ;doprnt.c: 526: } tmpval;
 13483                           ;doprnt.c: 528: unsigned long val;
 13484                           ;doprnt.c: 529: unsigned len;
 13485                           ;doprnt.c: 530: const char * cp;
 13486                           ;doprnt.c: 533: *ap = __va_start();
 13487                           
 13488                           ;incstack = 0
 13489  00001C  0EDF               	movlw	low (?_printf+2)
 13490  00001E  0101               	movlb	1	; () banked
 13491  000020  6F74               	movwf	printf@ap& (0+255),b
 13492  000022  0E00               	movlw	high (?_printf+2)
 13493  000024  0101               	movlb	1	; () banked
 13494  000026  6F75               	movwf	(printf@ap+1)& (0+255),b
 13495                           
 13496                           ;doprnt.c: 536: while(c = *f++) {
 13497  000028  EF1E  F006         	goto	l9816
 13498  00002C                     l9530:
 13499                           
 13500                           ; BSR set to: 1
 13501                           ;doprnt.c: 538: if(c != '%')
 13502  00002C  0E25               	movlw	37
 13503  00002E  0101               	movlb	1	; () banked
 13504  000030  1989               	xorwf	printf@c& (0+255),w,b
 13505  000032  B4D8               	btfsc	status,2,c
 13506  000034  D006               	goto	l9534
 13507                           
 13508                           ; BSR set to: 1
 13509                           ;doprnt.c: 540: {
 13510                           ;doprnt.c: 541: (putch(c) );
 13511  000036  0101               	movlb	1	; () banked
 13512  000038  5189               	movf	printf@c& (0+255),w,b
 13513  00003A  EC19  F028         	call	_putch
 13514                           
 13515                           ;doprnt.c: 542: continue;
 13516  00003E  EF1E  F006         	goto	l9816
 13517  000042                     l9534:
 13518                           
 13519                           ;doprnt.c: 543: }
 13520                           ;doprnt.c: 546: width = 0;
 13521  000042  0E00               	movlw	0
 13522  000044  0101               	movlb	1	; () banked
 13523  000046  6F7D               	movwf	(printf@width+1)& (0+255),b
 13524  000048  0E00               	movlw	0
 13525  00004A  6F7C               	movwf	printf@width& (0+255),b
 13526                           
 13527                           ;doprnt.c: 548: flag = 0;
 13528  00004C  0E00               	movlw	0
 13529  00004E  0101               	movlb	1	; () banked
 13530  000050  6F85               	movwf	(printf@flag+1)& (0+255),b
 13531  000052  0E00               	movlw	0
 13532  000054  6F84               	movwf	printf@flag& (0+255),b
 13533                           
 13534                           ; BSR set to: 1
 13535                           ;doprnt.c: 551: switch(*f) {
 13536                           
 13537                           ;doprnt.c: 550: for(;;) {
 13538  000056  D007               	goto	l9540
 13539  000058                     l9536:
 13540                           
 13541                           ;doprnt.c: 580: flag |= 0x04;
 13542  000058  0101               	movlb	1	; () banked
 13543  00005A  8584               	bsf	printf@flag& (0+255),2,b
 13544                           
 13545                           ;doprnt.c: 581: f++;
 13546  00005C  0100               	movlb	0	; () banked
 13547  00005E  4BDD               	infsnz	printf@f& (0+255),f,b
 13548  000060  2BDE               	incf	(printf@f+1)& (0+255),f,b
 13549                           
 13550                           ;doprnt.c: 582: continue;
 13551  000062  D001               	goto	l9540
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;doprnt.c: 584: }
 13555  000064  D00B               	goto	l9542
 13556  000066                     l9540:
 13557  000066  C0DD  FFF6         	movff	printf@f,tblptrl
 13558  00006A  C0DE  FFF7         	movff	printf@f+1,tblptrh
 13559  00006E                     	if	0	;tblptru may be non-zero
 13560  00006E                     	endif
 13561  00006E                     	if	0	;tblptru may be non-zero
 13562  00006E                     	endif
 13563  00006E  0008               	tblrd		*
 13564  000070  50F5               	movf	tablat,w,c
 13565                           
 13566                           ; Switch size 1, requested type "space"
 13567                           ; Number of cases is 1, Range of values is 48 to 48
 13568                           ; switch strategies available:
 13569                           ; Name         Instructions Cycles
 13570                           ; simple_byte            4     3 (average)
 13571                           ;	Chosen strategy is simple_byte
 13572  000072  0A30               	xorlw	48	; case 48
 13573  000074  B4D8               	btfsc	status,2,c
 13574  000076  D7F0               	goto	l9536
 13575                           
 13576                           ;doprnt.c: 585: break;
 13577  000078  D001               	goto	l9542
 13578                           
 13579                           ;doprnt.c: 586: }
 13580  00007A  D7F5               	goto	l9540
 13581  00007C                     l9542:
 13582                           
 13583                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13584  00007C  C0DD  FFF6         	movff	printf@f,tblptrl
 13585  000080  C0DE  FFF7         	movff	printf@f+1,tblptrh
 13586  000084                     	if	0	;tblptru may be non-zero
 13587  000084                     	endif
 13588  000084                     	if	0	;tblptru may be non-zero
 13589  000084                     	endif
 13590  000084  0008               	tblrd		*
 13591  000086  50F5               	movf	tablat,w,c
 13592  000088  EC70  F026         	call	_isdigit
 13593  00008C  A0D8               	btfss	status,0,c
 13594  00008E  D04D               	goto	l9560
 13595                           
 13596                           ;doprnt.c: 598: width = 0;
 13597  000090  0E00               	movlw	0
 13598  000092  0101               	movlb	1	; () banked
 13599  000094  6F7D               	movwf	(printf@width+1)& (0+255),b
 13600  000096  0E00               	movlw	0
 13601  000098  6F7C               	movwf	printf@width& (0+255),b
 13602  00009A  D000               	goto	l9546
 13603  00009C                     l9546:
 13604                           
 13605                           ;doprnt.c: 600: width *= 10;
 13606  00009C  C17C  F011         	movff	printf@width,___wmul@multiplier
 13607  0000A0  C17D  F012         	movff	printf@width+1,___wmul@multiplier+1
 13608  0000A4  0E00               	movlw	0
 13609  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 13610  0000A8  0E0A               	movlw	10
 13611  0000AA  6E13               	movwf	___wmul@multiplicand,c
 13612  0000AC  EC24  F026         	call	___wmul	;wreg free
 13613  0000B0  C011  F17C         	movff	?___wmul,printf@width
 13614  0000B4  C012  F17D         	movff	?___wmul+1,printf@width+1
 13615                           
 13616                           ;doprnt.c: 601: width += *f++ - '0';
 13617  0000B8  0ED0               	movlw	208
 13618  0000BA  0100               	movlb	0	; () banked
 13619  0000BC  6FEB               	movwf	??_printf& (0+255),b
 13620  0000BE  0EFF               	movlw	255
 13621  0000C0  0100               	movlb	0	; () banked
 13622  0000C2  6FEC               	movwf	(??_printf+1)& (0+255),b
 13623  0000C4  C0DD  FFF6         	movff	printf@f,tblptrl
 13624  0000C8  C0DE  FFF7         	movff	printf@f+1,tblptrh
 13625  0000CC                     	if	0	;tblptru may be non-zero
 13626  0000CC                     	endif
 13627  0000CC                     	if	0	;tblptru may be non-zero
 13628  0000CC                     	endif
 13629  0000CC  0008               	tblrd		*
 13630  0000CE  50F5               	movf	tablat,w,c
 13631  0000D0  0100               	movlb	0	; () banked
 13632  0000D2  6FED               	movwf	(??_printf+2)& (0+255),b
 13633  0000D4  6BEE               	clrf	(??_printf+3)& (0+255),b
 13634  0000D6  0100               	movlb	0	; () banked
 13635  0000D8  51EB               	movf	??_printf& (0+255),w,b
 13636  0000DA  0100               	movlb	0	; () banked
 13637  0000DC  27ED               	addwf	(??_printf+2)& (0+255),f,b
 13638  0000DE  0100               	movlb	0	; () banked
 13639  0000E0  51EC               	movf	(??_printf+1)& (0+255),w,b
 13640  0000E2  0100               	movlb	0	; () banked
 13641  0000E4  23EE               	addwfc	(??_printf+3)& (0+255),f,b
 13642  0000E6  0100               	movlb	0	; () banked
 13643  0000E8  51ED               	movf	(??_printf+2)& (0+255),w,b
 13644  0000EA  0101               	movlb	1	; () banked
 13645  0000EC  277C               	addwf	printf@width& (0+255),f,b
 13646  0000EE  0100               	movlb	0	; () banked
 13647  0000F0  51EE               	movf	(??_printf+3)& (0+255),w,b
 13648  0000F2  0101               	movlb	1	; () banked
 13649  0000F4  237D               	addwfc	(printf@width+1)& (0+255),f,b
 13650                           
 13651                           ; BSR set to: 1
 13652  0000F6  0100               	movlb	0	; () banked
 13653  0000F8  4BDD               	infsnz	printf@f& (0+255),f,b
 13654  0000FA  2BDE               	incf	(printf@f+1)& (0+255),f,b
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13658  0000FC  C0DD  FFF6         	movff	printf@f,tblptrl
 13659  000100  C0DE  FFF7         	movff	printf@f+1,tblptrh
 13660  000104                     	if	0	;tblptru may be non-zero
 13661  000104                     	endif
 13662  000104                     	if	0	;tblptru may be non-zero
 13663  000104                     	endif
 13664  000104  0008               	tblrd		*
 13665  000106  50F5               	movf	tablat,w,c
 13666  000108  EC70  F026         	call	_isdigit
 13667  00010C  A0D8               	btfss	status,0,c
 13668  00010E  D00D               	goto	l9560
 13669  000110  D7C5               	goto	l9546
 13670                           
 13671                           ;doprnt.c: 608: }
 13672                           ;doprnt.c: 635: switch(c = *f++) {
 13673  000112  D00B               	goto	l9560
 13674                           
 13675                           ;doprnt.c: 638: goto alldone;
 13676                           
 13677                           ;doprnt.c: 637: case 0:
 13678  000114  EF2F  F006         	goto	l1536
 13679  000118                     l9554:
 13680                           
 13681                           ;doprnt.c: 663: flag |= 0x400;
 13682  000118  0101               	movlb	1	; () banked
 13683  00011A  8585               	bsf	(printf@flag+1)& (0+255),2,b
 13684                           
 13685                           ; BSR set to: 1
 13686                           ;doprnt.c: 698: case 'i':
 13687                           ;doprnt.c: 699: break;
 13688                           
 13689                           ; BSR set to: 1
 13690                           
 13691                           ;doprnt.c: 697: case 'd':
 13692                           
 13693                           ;doprnt.c: 664: break;
 13694  00011C  D024               	goto	l9562
 13695  00011E                     l9556:
 13696                           
 13697                           ; BSR set to: 1
 13698                           ;doprnt.c: 721: flag |= 0x80;
 13699  00011E  0101               	movlb	1	; () banked
 13700  000120  8F84               	bsf	printf@flag& (0+255),7,b
 13701                           
 13702                           ;doprnt.c: 723: break;
 13703  000122  D021               	goto	l9562
 13704                           
 13705                           ; BSR set to: 1
 13706                           ;doprnt.c: 813: continue;
 13707                           
 13708                           ;doprnt.c: 802: default:
 13709  000124  EF1E  F006         	goto	l9816
 13710                           
 13711                           ; BSR set to: 1
 13712                           ;doprnt.c: 822: }
 13713  000128  D01E               	goto	l9562
 13714  00012A                     l9560:
 13715  00012A  C0DD  FFF6         	movff	printf@f,tblptrl
 13716  00012E  C0DE  FFF7         	movff	printf@f+1,tblptrh
 13717  000132  0100               	movlb	0	; () banked
 13718  000134  4BDD               	infsnz	printf@f& (0+255),f,b
 13719  000136  2BDE               	incf	(printf@f+1)& (0+255),f,b
 13720  000138                     	if	0	;tblptru may be non-zero
 13721  000138                     	endif
 13722  000138                     	if	0	;tblptru may be non-zero
 13723  000138                     	endif
 13724  000138  0008               	tblrd		*
 13725  00013A  CFF5 F189          	movff	tablat,printf@c
 13726  00013E  0101               	movlb	1	; () banked
 13727  000140  5189               	movf	printf@c& (0+255),w,b
 13728                           
 13729                           ; Switch size 1, requested type "space"
 13730                           ; Number of cases is 5, Range of values is 0 to 120
 13731                           ; switch strategies available:
 13732                           ; Name         Instructions Cycles
 13733                           ; simple_byte           16     9 (average)
 13734                           ;	Chosen strategy is simple_byte
 13735  000142  0A00               	xorlw	0	; case 0
 13736  000144  B4D8               	btfsc	status,2,c
 13737  000146  EF2F  F006         	goto	l1536
 13738  00014A  0A64               	xorlw	100	; case 100
 13739  00014C  B4D8               	btfsc	status,2,c
 13740  00014E  D00B               	goto	l9562
 13741  000150  0A02               	xorlw	2	; case 102
 13742  000152  B4D8               	btfsc	status,2,c
 13743  000154  D7E1               	goto	l9554
 13744  000156  0A0F               	xorlw	15	; case 105
 13745  000158  B4D8               	btfsc	status,2,c
 13746  00015A  D005               	goto	l9562
 13747  00015C  0A11               	xorlw	17	; case 120
 13748  00015E  B4D8               	btfsc	status,2,c
 13749  000160  D7DE               	goto	l9556
 13750  000162  EF1E  F006         	goto	l9816
 13751  000166                     l9562:
 13752                           
 13753                           ; BSR set to: 1
 13754                           ;doprnt.c: 825: if(flag & (0x700)) {
 13755  000166  0E07               	movlw	7
 13756  000168  0101               	movlb	1	; () banked
 13757  00016A  1585               	andwf	(printf@flag+1)& (0+255),w,b
 13758  00016C  B4D8               	btfsc	status,2,c
 13759  00016E  D39A               	goto	l1454
 13760                           
 13761                           ; BSR set to: 1
 13762                           ;doprnt.c: 829: prec = 6;
 13763  000170  0E00               	movlw	0
 13764  000172  0101               	movlb	1	; () banked
 13765  000174  6F77               	movwf	(printf@prec+1)& (0+255),b
 13766  000176  0E06               	movlw	6
 13767  000178  6F76               	movwf	printf@prec& (0+255),b
 13768                           
 13769                           ; BSR set to: 1
 13770                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13771  00017A  C174  FFD9         	movff	printf@ap,fsr2l
 13772  00017E  C175  FFDA         	movff	printf@ap+1,fsr2h
 13773  000182  CFDE F186          	movff	postinc2,printf@fval
 13774  000186  CFDE F187          	movff	postinc2,printf@fval+1
 13775  00018A  CFDD F188          	movff	postdec2,printf@fval+2
 13776                           
 13777                           ; BSR set to: 1
 13778  00018E  0E03               	movlw	3
 13779  000190  0101               	movlb	1	; () banked
 13780  000192  2774               	addwf	printf@ap& (0+255),f,b
 13781  000194  0E00               	movlw	0
 13782  000196  2375               	addwfc	(printf@ap+1)& (0+255),f,b
 13783                           
 13784                           ; BSR set to: 1
 13785                           ;doprnt.c: 831: if(fval < 0.0) {
 13786  000198  0101               	movlb	1	; () banked
 13787  00019A  AF88               	btfss	(printf@fval+2)& (0+255),7,b
 13788  00019C  D012               	goto	l9576
 13789                           
 13790                           ; BSR set to: 1
 13791                           ;doprnt.c: 832: fval = -fval;
 13792  00019E  C186  F011         	movff	printf@fval,___ftneg@f1
 13793  0001A2  C187  F012         	movff	printf@fval+1,___ftneg@f1+1
 13794  0001A6  C188  F013         	movff	printf@fval+2,___ftneg@f1+2
 13795  0001AA  EC5E  F026         	call	___ftneg	;wreg free
 13796  0001AE  C011  F186         	movff	?___ftneg,printf@fval
 13797  0001B2  C012  F187         	movff	?___ftneg+1,printf@fval+1
 13798  0001B6  C013  F188         	movff	?___ftneg+2,printf@fval+2
 13799                           
 13800                           ;doprnt.c: 833: flag |= 0x03;
 13801  0001BA  0E03               	movlw	3
 13802  0001BC  0101               	movlb	1	; () banked
 13803  0001BE  1384               	iorwf	printf@flag& (0+255),f,b
 13804  0001C0  D000               	goto	l9576
 13805  0001C2                     l9576:
 13806                           
 13807                           ; BSR set to: 1
 13808                           ;doprnt.c: 834: }
 13809                           ;doprnt.c: 835: exp = 0;
 13810  0001C2  0E00               	movlw	0
 13811  0001C4  0101               	movlb	1	; () banked
 13812  0001C6  6F7F               	movwf	(printf@exp+1)& (0+255),b
 13813  0001C8  0E00               	movlw	0
 13814  0001CA  6F7E               	movwf	printf@exp& (0+255),b
 13815                           
 13816                           ; BSR set to: 1
 13817                           ;doprnt.c: 836: if( fval!=0) {
 13818  0001CC  0101               	movlb	1	; () banked
 13819  0001CE  5186               	movf	printf@fval& (0+255),w,b
 13820  0001D0  0101               	movlb	1	; () banked
 13821  0001D2  1187               	iorwf	(printf@fval+1)& (0+255),w,b
 13822  0001D4  0101               	movlb	1	; () banked
 13823  0001D6  1188               	iorwf	(printf@fval+2)& (0+255),w,b
 13824  0001D8  B4D8               	btfsc	status,2,c
 13825  0001DA  D093               	goto	l9604
 13826                           
 13827                           ; BSR set to: 1
 13828                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13829  0001DC  0E82               	movlw	130
 13830  0001DE  0100               	movlb	0	; () banked
 13831  0001E0  6FEB               	movwf	??_printf& (0+255),b
 13832  0001E2  0EFF               	movlw	255
 13833  0001E4  0100               	movlb	0	; () banked
 13834  0001E6  6FEC               	movwf	(??_printf+1)& (0+255),b
 13835  0001E8  C186  F0ED         	movff	printf@fval,??_printf+2
 13836  0001EC  C187  F0EE         	movff	printf@fval+1,??_printf+3
 13837  0001F0  C188  F0EF         	movff	printf@fval+2,??_printf+4
 13838  0001F4  C189  F0F0         	movff	printf@fval+3,??_printf+5
 13839  0001F8  0E10               	movlw	16
 13840  0001FA  D006               	goto	u7830
 13841  0001FC                     u7835:
 13842  0001FC  0100               	movlb	0	; () banked
 13843  0001FE  90D8               	bcf	status,0,c
 13844  000200  33F0               	rrcf	(??_printf+5)& (0+255),f,b
 13845  000202  33EF               	rrcf	(??_printf+4)& (0+255),f,b
 13846  000204  33EE               	rrcf	(??_printf+3)& (0+255),f,b
 13847  000206  33ED               	rrcf	(??_printf+2)& (0+255),f,b
 13848  000208                     u7830:
 13849  000208  2EE8               	decfsz	wreg,f,c
 13850  00020A  D7F8               	goto	u7835
 13851  00020C  0100               	movlb	0	; () banked
 13852  00020E  51ED               	movf	(??_printf+2)& (0+255),w,b
 13853  000210  0100               	movlb	0	; () banked
 13854  000212  25EB               	addwf	??_printf& (0+255),w,b
 13855  000214  0101               	movlb	1	; () banked
 13856  000216  6F7E               	movwf	printf@exp& (0+255),b
 13857  000218  0E00               	movlw	0
 13858  00021A  0100               	movlb	0	; () banked
 13859  00021C  21EC               	addwfc	(??_printf+1)& (0+255),w,b
 13860  00021E  0101               	movlb	1	; () banked
 13861  000220  6F7F               	movwf	(printf@exp+1)& (0+255),b
 13862                           
 13863                           ; BSR set to: 1
 13864                           ;doprnt.c: 838: exp--;
 13865  000222  0101               	movlb	1	; () banked
 13866  000224  077E               	decf	printf@exp& (0+255),f,b
 13867  000226  A0D8               	btfss	status,0,c
 13868  000228  077F               	decf	(printf@exp+1)& (0+255),f,b
 13869                           
 13870                           ; BSR set to: 1
 13871                           ;doprnt.c: 839: exp *= 3;
 13872  00022A  C17E  F011         	movff	printf@exp,___wmul@multiplier
 13873  00022E  C17F  F012         	movff	printf@exp+1,___wmul@multiplier+1
 13874  000232  0E00               	movlw	0
 13875  000234  6E14               	movwf	___wmul@multiplicand+1,c
 13876  000236  0E03               	movlw	3
 13877  000238  6E13               	movwf	___wmul@multiplicand,c
 13878  00023A  EC24  F026         	call	___wmul	;wreg free
 13879  00023E  C011  F17E         	movff	?___wmul,printf@exp
 13880  000242  C012  F17F         	movff	?___wmul+1,printf@exp+1
 13881                           
 13882                           ;doprnt.c: 840: exp /= 10;
 13883  000246  C17E  F017         	movff	printf@exp,___awdiv@dividend
 13884  00024A  C17F  F018         	movff	printf@exp+1,___awdiv@dividend+1
 13885  00024E  0E00               	movlw	0
 13886  000250  6E1A               	movwf	___awdiv@divisor+1,c
 13887  000252  0E0A               	movlw	10
 13888  000254  6E19               	movwf	___awdiv@divisor,c
 13889  000256  ECD0  F01E         	call	___awdiv	;wreg free
 13890  00025A  C017  F17E         	movff	?___awdiv,printf@exp
 13891  00025E  C018  F17F         	movff	?___awdiv+1,printf@exp+1
 13892                           
 13893                           ;doprnt.c: 841: if(exp < 0)
 13894  000262  0101               	movlb	1	; () banked
 13895  000264  AF7F               	btfss	(printf@exp+1)& (0+255),7,b
 13896  000266  D005               	goto	l9592
 13897                           
 13898                           ; BSR set to: 1
 13899                           ;doprnt.c: 842: exp--;
 13900  000268  0101               	movlb	1	; () banked
 13901  00026A  077E               	decf	printf@exp& (0+255),f,b
 13902  00026C  A0D8               	btfss	status,0,c
 13903  00026E  077F               	decf	(printf@exp+1)& (0+255),f,b
 13904  000270  D000               	goto	l9592
 13905  000272                     l9592:
 13906                           
 13907                           ; BSR set to: 1
 13908                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13909  000272  0101               	movlb	1	; () banked
 13910  000274  517E               	movf	printf@exp& (0+255),w,b
 13911  000276  0800               	sublw	0
 13912  000278  EC3A  F009         	call	_scale
 13913  00027C  C043  F178         	movff	?_scale,printf@tmpval
 13914  000280  C044  F179         	movff	?_scale+1,printf@tmpval+1
 13915  000284  C045  F17A         	movff	?_scale+2,printf@tmpval+2
 13916                           
 13917                           ;doprnt.c: 847: tmpval.integ *= fval;
 13918  000288  C178  F01F         	movff	printf@tmpval,___ftmul@f1
 13919  00028C  C179  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 13920  000290  C17A  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 13921  000294  C186  F022         	movff	printf@fval,___ftmul@f2
 13922  000298  C187  F023         	movff	printf@fval+1,___ftmul@f2+1
 13923  00029C  C188  F024         	movff	printf@fval+2,___ftmul@f2+2
 13924  0002A0  ECE7  F017         	call	___ftmul	;wreg free
 13925  0002A4  C01F  F178         	movff	?___ftmul,printf@tmpval
 13926  0002A8  C020  F179         	movff	?___ftmul+1,printf@tmpval+1
 13927  0002AC  C021  F17A         	movff	?___ftmul+2,printf@tmpval+2
 13928                           
 13929                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13930  0002B0  C178  F011         	movff	printf@tmpval,___ftge@ff1
 13931  0002B4  C179  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13932  0002B8  C17A  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13933  0002BC  0E00               	movlw	0
 13934  0002BE  6E14               	movwf	___ftge@ff2,c
 13935  0002C0  0E80               	movlw	128
 13936  0002C2  6E15               	movwf	___ftge@ff2+1,c
 13937  0002C4  0E3F               	movlw	63
 13938  0002C6  6E16               	movwf	___ftge@ff2+2,c
 13939  0002C8  EC1B  F01F         	call	___ftge	;wreg free
 13940  0002CC  B0D8               	btfsc	status,0,c
 13941  0002CE  D005               	goto	l9600
 13942                           
 13943                           ;doprnt.c: 849: exp--;
 13944  0002D0  0101               	movlb	1	; () banked
 13945  0002D2  077E               	decf	printf@exp& (0+255),f,b
 13946  0002D4  A0D8               	btfss	status,0,c
 13947  0002D6  077F               	decf	(printf@exp+1)& (0+255),f,b
 13948  0002D8  D014               	goto	l9604
 13949  0002DA                     l9600:
 13950                           
 13951                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13952  0002DA  C178  F011         	movff	printf@tmpval,___ftge@ff1
 13953  0002DE  C179  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13954  0002E2  C17A  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13955  0002E6  0E00               	movlw	0
 13956  0002E8  6E14               	movwf	___ftge@ff2,c
 13957  0002EA  0E20               	movlw	32
 13958  0002EC  6E15               	movwf	___ftge@ff2+1,c
 13959  0002EE  0E41               	movlw	65
 13960  0002F0  6E16               	movwf	___ftge@ff2+2,c
 13961  0002F2  EC1B  F01F         	call	___ftge	;wreg free
 13962  0002F6  A0D8               	btfss	status,0,c
 13963  0002F8  D004               	goto	l9604
 13964                           
 13965                           ;doprnt.c: 851: exp++;
 13966  0002FA  0101               	movlb	1	; () banked
 13967  0002FC  4B7E               	infsnz	printf@exp& (0+255),f,b
 13968  0002FE  2B7F               	incf	(printf@exp+1)& (0+255),f,b
 13969                           
 13970                           ; BSR set to: 1
 13971                           
 13972                           ; BSR set to: 1
 13973  000300  D000               	goto	l9604
 13974  000302                     l9604:
 13975                           
 13976                           ;doprnt.c: 852: }
 13977                           ;doprnt.c: 1112: if(prec <= 12)
 13978  000302  0101               	movlb	1	; () banked
 13979  000304  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
 13980  000306  D008               	goto	l9606
 13981  000308  0101               	movlb	1	; () banked
 13982  00030A  5177               	movf	(printf@prec+1)& (0+255),w,b
 13983  00030C  E11E               	bnz	l9608
 13984  00030E  0E0D               	movlw	13
 13985  000310  0101               	movlb	1	; () banked
 13986  000312  5D76               	subwf	printf@prec& (0+255),w,b
 13987  000314  B0D8               	btfsc	status,0,c
 13988  000316  D019               	goto	l9608
 13989  000318                     l9606:
 13990                           
 13991                           ; BSR set to: 1
 13992                           ;doprnt.c: 1113: fval += fround(prec);
 13993  000318  C186  F04D         	movff	printf@fval,___ftadd@f1
 13994  00031C  C187  F04E         	movff	printf@fval+1,___ftadd@f1+1
 13995  000320  C188  F04F         	movff	printf@fval+2,___ftadd@f1+2
 13996  000324  0101               	movlb	1	; () banked
 13997  000326  5176               	movf	printf@prec& (0+255),w,b
 13998  000328  ECEA  F00C         	call	_fround
 13999  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 14000  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 14001  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 14002  000338  EC0E  F00F         	call	___ftadd	;wreg free
 14003  00033C  C04D  F186         	movff	?___ftadd,printf@fval
 14004  000340  C04E  F187         	movff	?___ftadd+1,printf@fval+1
 14005  000344  C04F  F188         	movff	?___ftadd+2,printf@fval+2
 14006  000348  D000               	goto	l9608
 14007  00034A                     l9608:
 14008                           
 14009                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 14010  00034A  0101               	movlb	1	; () banked
 14011  00034C  BF7F               	btfsc	(printf@exp+1)& (0+255),7,b
 14012  00034E  D008               	goto	l9610
 14013  000350  0101               	movlb	1	; () banked
 14014  000352  517F               	movf	(printf@exp+1)& (0+255),w,b
 14015  000354  E128               	bnz	l9616
 14016  000356  0E0A               	movlw	10
 14017  000358  0101               	movlb	1	; () banked
 14018  00035A  5D7E               	subwf	printf@exp& (0+255),w,b
 14019  00035C  B0D8               	btfsc	status,0,c
 14020  00035E  D023               	goto	l9616
 14021  000360                     l9610:
 14022                           
 14023                           ; BSR set to: 1
 14024  000360  0101               	movlb	1	; () banked
 14025  000362  5186               	movf	printf@fval& (0+255),w,b
 14026  000364  0101               	movlb	1	; () banked
 14027  000366  1187               	iorwf	(printf@fval+1)& (0+255),w,b
 14028  000368  0101               	movlb	1	; () banked
 14029  00036A  1188               	iorwf	(printf@fval+2)& (0+255),w,b
 14030  00036C  B4D8               	btfsc	status,2,c
 14031  00036E  D077               	goto	l9630
 14032                           
 14033                           ; BSR set to: 1
 14034  000370  C186  F02E         	movff	printf@fval,___fttol@f1
 14035  000374  C187  F02F         	movff	printf@fval+1,___fttol@f1+1
 14036  000378  C188  F030         	movff	printf@fval+2,___fttol@f1+2
 14037  00037C  ECC7  F019         	call	___fttol	;wreg free
 14038  000380  502E               	movf	?___fttol,w,c
 14039  000382  102F               	iorwf	?___fttol+1,w,c
 14040  000384  1030               	iorwf	?___fttol+2,w,c
 14041  000386  1031               	iorwf	?___fttol+3,w,c
 14042  000388  A4D8               	btfss	status,2,c
 14043  00038A  D069               	goto	l9630
 14044  00038C  0101               	movlb	1	; () banked
 14045  00038E  BF7F               	btfsc	(printf@exp+1)& (0+255),7,b
 14046  000390  D066               	goto	l9630
 14047  000392  0101               	movlb	1	; () banked
 14048  000394  517F               	movf	(printf@exp+1)& (0+255),w,b
 14049  000396  E107               	bnz	l9616
 14050  000398  0E02               	movlw	2
 14051  00039A  0101               	movlb	1	; () banked
 14052  00039C  5D7E               	subwf	printf@exp& (0+255),w,b
 14053  00039E  B0D8               	btfsc	status,0,c
 14054  0003A0  D002               	goto	l9616
 14055  0003A2  D05D               	goto	l9630
 14056  0003A4  D000               	goto	l9616
 14057  0003A6                     l9616:
 14058                           
 14059                           ; BSR set to: 1
 14060                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 14061  0003A6  C178  F011         	movff	printf@tmpval,___ftge@ff1
 14062  0003AA  C179  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 14063  0003AE  C17A  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 14064  0003B2  0E70               	movlw	112
 14065  0003B4  6E14               	movwf	___ftge@ff2,c
 14066  0003B6  0E89               	movlw	137
 14067  0003B8  6E15               	movwf	___ftge@ff2+1,c
 14068  0003BA  0E40               	movlw	64
 14069  0003BC  6E16               	movwf	___ftge@ff2+2,c
 14070  0003BE  EC1B  F01F         	call	___ftge	;wreg free
 14071  0003C2  B0D8               	btfsc	status,0,c
 14072  0003C4  D003               	goto	l9620
 14073                           
 14074                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 14075  0003C6  0101               	movlb	1	; () banked
 14076  0003C8  0EF7               	movlw	247
 14077  0003CA  D002               	goto	L14
 14078  0003CC                     l9620:
 14079                           
 14080                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 14081  0003CC  0101               	movlb	1	; () banked
 14082  0003CE  0EF8               	movlw	248
 14083  0003D0                     L14:
 14084  0003D0  277E               	addwf	printf@exp& (0+255),f,b
 14085  0003D2  0EFF               	movlw	255
 14086  0003D4  237F               	addwfc	(printf@exp+1)& (0+255),f,b
 14087  0003D6  D000               	goto	l9622
 14088  0003D8                     l9622:
 14089                           
 14090                           ; BSR set to: 1
 14091                           ;doprnt.c: 1124: }
 14092                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 14093  0003D8  0101               	movlb	1	; () banked
 14094  0003DA  517E               	movf	printf@exp& (0+255),w,b
 14095  0003DC  EC3A  F009         	call	_scale
 14096  0003E0  C043  F178         	movff	?_scale,printf@tmpval
 14097  0003E4  C044  F179         	movff	?_scale+1,printf@tmpval+1
 14098  0003E8  C045  F17A         	movff	?_scale+2,printf@tmpval+2
 14099                           
 14100                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 14101  0003EC  D017               	goto	l9626
 14102  0003EE  C186  F011         	movff	printf@fval,__div_to_l_@f1
 14103  0003F2  C187  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 14104  0003F6  C188  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 14105  0003FA  C178  F014         	movff	printf@tmpval,__div_to_l_@f2
 14106  0003FE  C179  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 14107  000402  C17A  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 14108  000406  EC62  F017         	call	__div_to_l_	;wreg free
 14109  00040A  C011  F180         	movff	?__div_to_l_,printf@val
 14110  00040E  C012  F181         	movff	?__div_to_l_+1,printf@val+1
 14111  000412  C013  F182         	movff	?__div_to_l_+2,printf@val+2
 14112  000416  C014  F183         	movff	?__div_to_l_+3,printf@val+3
 14113  00041A  D017               	goto	l9628
 14114  00041C                     l9626:
 14115  00041C  C186  F011         	movff	printf@fval,__tdiv_to_l_@f1
 14116  000420  C187  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 14117  000424  C188  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 14118  000428  C178  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 14119  00042C  C179  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 14120  000430  C17A  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 14121  000434  EC54  F016         	call	__tdiv_to_l_	;wreg free
 14122  000438  C011  F180         	movff	?__tdiv_to_l_,printf@val
 14123  00043C  C012  F181         	movff	?__tdiv_to_l_+1,printf@val+1
 14124  000440  C013  F182         	movff	?__tdiv_to_l_+2,printf@val+2
 14125  000444  C014  F183         	movff	?__tdiv_to_l_+3,printf@val+3
 14126  000448  D000               	goto	l9628
 14127  00044A                     l9628:
 14128                           
 14129                           ;doprnt.c: 1129: fval = 0.0;
 14130  00044A  0E00               	movlw	0
 14131  00044C  0101               	movlb	1	; () banked
 14132  00044E  6F86               	movwf	printf@fval& (0+255),b
 14133  000450  0E00               	movlw	0
 14134  000452  0101               	movlb	1	; () banked
 14135  000454  6F87               	movwf	(printf@fval+1)& (0+255),b
 14136  000456  0E00               	movlw	0
 14137  000458  0101               	movlb	1	; () banked
 14138  00045A  6F88               	movwf	(printf@fval+2)& (0+255),b
 14139                           
 14140                           ;doprnt.c: 1130: } else {
 14141  00045C  D034               	goto	l9634
 14142  00045E                     l9630:
 14143                           
 14144                           ;doprnt.c: 1131: val = (unsigned long)fval;
 14145  00045E  C186  F02E         	movff	printf@fval,___fttol@f1
 14146  000462  C187  F02F         	movff	printf@fval+1,___fttol@f1+1
 14147  000466  C188  F030         	movff	printf@fval+2,___fttol@f1+2
 14148  00046A  ECC7  F019         	call	___fttol	;wreg free
 14149  00046E  C02E  F180         	movff	?___fttol,printf@val
 14150  000472  C02F  F181         	movff	?___fttol+1,printf@val+1
 14151  000476  C030  F182         	movff	?___fttol+2,printf@val+2
 14152  00047A  C031  F183         	movff	?___fttol+3,printf@val+3
 14153                           
 14154                           ;doprnt.c: 1132: fval -= (double)val;
 14155  00047E  C186  F059         	movff	printf@fval,___ftsub@f1
 14156  000482  C187  F05A         	movff	printf@fval+1,___ftsub@f1+1
 14157  000486  C188  F05B         	movff	printf@fval+2,___ftsub@f1+2
 14158  00048A  C180  F019         	movff	printf@val,___lltoft@c
 14159  00048E  C181  F01A         	movff	printf@val+1,___lltoft@c+1
 14160  000492  C182  F01B         	movff	printf@val+2,___lltoft@c+2
 14161  000496  C183  F01C         	movff	printf@val+3,___lltoft@c+3
 14162  00049A  ECEA  F022         	call	___lltoft	;wreg free
 14163  00049E  C019  F05C         	movff	?___lltoft,___ftsub@f2
 14164  0004A2  C01A  F05D         	movff	?___lltoft+1,___ftsub@f2+1
 14165  0004A6  C01B  F05E         	movff	?___lltoft+2,___ftsub@f2+2
 14166  0004AA  EC8C  F024         	call	___ftsub	;wreg free
 14167  0004AE  C059  F186         	movff	?___ftsub,printf@fval
 14168  0004B2  C05A  F187         	movff	?___ftsub+1,printf@fval+1
 14169  0004B6  C05B  F188         	movff	?___ftsub+2,printf@fval+2
 14170                           
 14171                           ;doprnt.c: 1133: exp = 0;
 14172  0004BA  0E00               	movlw	0
 14173  0004BC  0101               	movlb	1	; () banked
 14174  0004BE  6F7F               	movwf	(printf@exp+1)& (0+255),b
 14175  0004C0  0E00               	movlw	0
 14176  0004C2  6F7E               	movwf	printf@exp& (0+255),b
 14177  0004C4  D000               	goto	l9634
 14178  0004C6                     l9634:
 14179                           
 14180                           ; BSR set to: 1
 14181                           ;doprnt.c: 1134: }
 14182                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 14183  0004C6  0E01               	movlw	1
 14184  0004C8  0101               	movlb	1	; () banked
 14185  0004CA  6F89               	movwf	printf@c& (0+255),b
 14186  0004CC                     l9636:
 14187                           
 14188                           ; BSR set to: 1
 14189  0004CC  0E0A               	movlw	10
 14190  0004CE  0101               	movlb	1	; () banked
 14191  0004D0  1989               	xorwf	printf@c& (0+255),w,b
 14192  0004D2  B4D8               	btfsc	status,2,c
 14193  0004D4  D022               	goto	l9648
 14194  0004D6  D001               	goto	l9640
 14195                           
 14196                           ; BSR set to: 1
 14197  0004D8  D020               	goto	l9648
 14198  0004DA                     l9640:
 14199                           
 14200                           ; BSR set to: 1
 14201                           ;doprnt.c: 1137: if(val < dpowers[c])
 14202  0004DA  0101               	movlb	1	; () banked
 14203  0004DC  5189               	movf	printf@c& (0+255),w,b
 14204  0004DE  0D04               	mullw	4
 14205  0004E0  0E1E               	movlw	low _dpowers
 14206  0004E2  24F3               	addwf	prodl,w,c
 14207  0004E4  6EF6               	movwf	tblptrl,c
 14208  0004E6  0EFE               	movlw	high _dpowers
 14209  0004E8  20F4               	addwfc	prodh,w,c
 14210  0004EA  6EF7               	movwf	tblptrh,c
 14211  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 14212  0004EC                     	endif
 14213  0004EC  0009               	tblrd		*+
 14214  0004EE  50F5               	movf	tablat,w,c
 14215  0004F0  0101               	movlb	1	; () banked
 14216  0004F2  5D80               	subwf	printf@val& (0+255),w,b
 14217  0004F4  0009               	tblrd		*+
 14218  0004F6  50F5               	movf	tablat,w,c
 14219  0004F8  0101               	movlb	1	; () banked
 14220  0004FA  5981               	subwfb	(printf@val+1)& (0+255),w,b
 14221  0004FC  0009               	tblrd		*+
 14222  0004FE  50F5               	movf	tablat,w,c
 14223  000500  0101               	movlb	1	; () banked
 14224  000502  5982               	subwfb	(printf@val+2)& (0+255),w,b
 14225  000504  0009               	tblrd		*+
 14226  000506  50F5               	movf	tablat,w,c
 14227  000508  0101               	movlb	1	; () banked
 14228  00050A  5983               	subwfb	(printf@val+3)& (0+255),w,b
 14229  00050C  A0D8               	btfss	status,0,c
 14230  00050E  D005               	goto	l9648
 14231  000510  D001               	goto	l9644
 14232                           
 14233                           ; BSR set to: 1
 14234                           ;doprnt.c: 1138: break;
 14235  000512  D003               	goto	l9648
 14236  000514                     l9644:
 14237                           
 14238                           ; BSR set to: 1
 14239  000514  0101               	movlb	1	; () banked
 14240  000516  2B89               	incf	printf@c& (0+255),f,b
 14241  000518  D7D9               	goto	l9636
 14242  00051A                     l9648:
 14243                           
 14244                           ; BSR set to: 1
 14245                           ;doprnt.c: 1142: width -= prec + c + exp;
 14246  00051A  C189  F0EB         	movff	printf@c,??_printf
 14247  00051E  0100               	movlb	0	; () banked
 14248  000520  6BEC               	clrf	(??_printf+1)& (0+255),b
 14249  000522  BFEB               	btfsc	??_printf& (0+255),7,b
 14250  000524  07EC               	decf	(??_printf+1)& (0+255),f,b
 14251  000526  0101               	movlb	1	; () banked
 14252  000528  5176               	movf	printf@prec& (0+255),w,b
 14253  00052A  0100               	movlb	0	; () banked
 14254  00052C  27EB               	addwf	??_printf& (0+255),f,b
 14255  00052E  0101               	movlb	1	; () banked
 14256  000530  5177               	movf	(printf@prec+1)& (0+255),w,b
 14257  000532  0100               	movlb	0	; () banked
 14258  000534  23EC               	addwfc	(??_printf+1)& (0+255),f,b
 14259  000536  0101               	movlb	1	; () banked
 14260  000538  517E               	movf	printf@exp& (0+255),w,b
 14261  00053A  0100               	movlb	0	; () banked
 14262  00053C  27EB               	addwf	??_printf& (0+255),f,b
 14263  00053E  0101               	movlb	1	; () banked
 14264  000540  517F               	movf	(printf@exp+1)& (0+255),w,b
 14265  000542  0100               	movlb	0	; () banked
 14266  000544  23EC               	addwfc	(??_printf+1)& (0+255),f,b
 14267  000546  0100               	movlb	0	; () banked
 14268  000548  51EB               	movf	??_printf& (0+255),w,b
 14269  00054A  0101               	movlb	1	; () banked
 14270  00054C  5F7C               	subwf	printf@width& (0+255),f,b
 14271  00054E  0100               	movlb	0	; () banked
 14272  000550  51EC               	movf	(??_printf+1)& (0+255),w,b
 14273  000552  0101               	movlb	1	; () banked
 14274  000554  5B7D               	subwfb	(printf@width+1)& (0+255),f,b
 14275                           
 14276                           ;doprnt.c: 1143: if(
 14277                           ;doprnt.c: 1147: prec)
 14278  000556  0101               	movlb	1	; () banked
 14279  000558  5176               	movf	printf@prec& (0+255),w,b
 14280  00055A  0101               	movlb	1	; () banked
 14281  00055C  1177               	iorwf	(printf@prec+1)& (0+255),w,b
 14282  00055E  B4D8               	btfsc	status,2,c
 14283  000560  D005               	goto	l9652
 14284                           
 14285                           ; BSR set to: 1
 14286                           ;doprnt.c: 1148: width--;
 14287  000562  0101               	movlb	1	; () banked
 14288  000564  077C               	decf	printf@width& (0+255),f,b
 14289  000566  A0D8               	btfss	status,0,c
 14290  000568  077D               	decf	(printf@width+1)& (0+255),f,b
 14291  00056A  D000               	goto	l9652
 14292  00056C                     l9652:
 14293                           
 14294                           ; BSR set to: 1
 14295                           ;doprnt.c: 1149: if(flag & 0x03)
 14296  00056C  0E03               	movlw	3
 14297  00056E  0101               	movlb	1	; () banked
 14298  000570  1584               	andwf	printf@flag& (0+255),w,b
 14299  000572  0100               	movlb	0	; () banked
 14300  000574  6FEB               	movwf	??_printf& (0+255),b
 14301  000576  0E00               	movlw	0
 14302  000578  0101               	movlb	1	; () banked
 14303  00057A  1585               	andwf	(printf@flag+1)& (0+255),w,b
 14304  00057C  0100               	movlb	0	; () banked
 14305  00057E  6FEC               	movwf	(??_printf+1)& (0+255),b
 14306  000580  0100               	movlb	0	; () banked
 14307  000582  51EB               	movf	??_printf& (0+255),w,b
 14308  000584  0100               	movlb	0	; () banked
 14309  000586  11EC               	iorwf	(??_printf+1)& (0+255),w,b
 14310  000588  B4D8               	btfsc	status,2,c
 14311  00058A  D005               	goto	l9656
 14312                           
 14313                           ; BSR set to: 0
 14314                           ;doprnt.c: 1150: width--;
 14315  00058C  0101               	movlb	1	; () banked
 14316  00058E  077C               	decf	printf@width& (0+255),f,b
 14317  000590  A0D8               	btfss	status,0,c
 14318  000592  077D               	decf	(printf@width+1)& (0+255),f,b
 14319  000594  D000               	goto	l9656
 14320  000596                     l9656:
 14321                           
 14322                           ;doprnt.c: 1153: if(flag & 0x04) {
 14323  000596  0101               	movlb	1	; () banked
 14324  000598  A584               	btfss	printf@flag& (0+255),2,b
 14325  00059A  D031               	goto	l9672
 14326                           
 14327                           ; BSR set to: 1
 14328                           ;doprnt.c: 1157: if(flag & 0x03)
 14329  00059C  0E03               	movlw	3
 14330  00059E  0101               	movlb	1	; () banked
 14331  0005A0  1584               	andwf	printf@flag& (0+255),w,b
 14332  0005A2  0100               	movlb	0	; () banked
 14333  0005A4  6FEB               	movwf	??_printf& (0+255),b
 14334  0005A6  0E00               	movlw	0
 14335  0005A8  0101               	movlb	1	; () banked
 14336  0005AA  1585               	andwf	(printf@flag+1)& (0+255),w,b
 14337  0005AC  0100               	movlb	0	; () banked
 14338  0005AE  6FEC               	movwf	(??_printf+1)& (0+255),b
 14339  0005B0  0100               	movlb	0	; () banked
 14340  0005B2  51EB               	movf	??_printf& (0+255),w,b
 14341  0005B4  0100               	movlb	0	; () banked
 14342  0005B6  11EC               	iorwf	(??_printf+1)& (0+255),w,b
 14343  0005B8  B4D8               	btfsc	status,2,c
 14344  0005BA  D00C               	goto	l9666
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;doprnt.c: 1159: (putch('-') );
 14348  0005BC  0E2D               	movlw	45
 14349  0005BE  EC19  F028         	call	_putch
 14350                           
 14351                           ;doprnt.c: 1168: while(width > 0) {
 14352  0005C2  D008               	goto	l9666
 14353  0005C4                     l9662:
 14354                           
 14355                           ;doprnt.c: 1169: (putch('0') );
 14356  0005C4  0E30               	movlw	48
 14357  0005C6  EC19  F028         	call	_putch
 14358                           
 14359                           ;doprnt.c: 1170: width--;
 14360  0005CA  0101               	movlb	1	; () banked
 14361  0005CC  077C               	decf	printf@width& (0+255),f,b
 14362  0005CE  A0D8               	btfss	status,0,c
 14363  0005D0  077D               	decf	(printf@width+1)& (0+255),f,b
 14364  0005D2  D000               	goto	l9666
 14365  0005D4                     l9666:
 14366  0005D4  0101               	movlb	1	; () banked
 14367  0005D6  BF7D               	btfsc	(printf@width+1)& (0+255),7,b
 14368  0005D8  D077               	goto	l9684
 14369  0005DA  0101               	movlb	1	; () banked
 14370  0005DC  517D               	movf	(printf@width+1)& (0+255),w,b
 14371  0005DE  E1F2               	bnz	l9662
 14372  0005E0  0101               	movlb	1	; () banked
 14373  0005E2  057C               	decf	printf@width& (0+255),w,b
 14374  0005E4  A0D8               	btfss	status,0,c
 14375  0005E6  D070               	goto	l9684
 14376  0005E8  D7ED               	goto	l9662
 14377                           
 14378                           ; BSR set to: 1
 14379                           ;doprnt.c: 1171: }
 14380                           ;doprnt.c: 1173: } else
 14381  0005EA  D06E               	goto	l9684
 14382                           
 14383                           ; BSR set to: 1
 14384                           ;doprnt.c: 1175: {
 14385                           ;doprnt.c: 1180: while(width > 0) {
 14386  0005EC  D008               	goto	l9672
 14387  0005EE                     l9668:
 14388                           
 14389                           ; BSR set to: 1
 14390                           ;doprnt.c: 1181: (putch(' ') );
 14391  0005EE  0E20               	movlw	32
 14392  0005F0  EC19  F028         	call	_putch
 14393                           
 14394                           ;doprnt.c: 1182: width--;
 14395  0005F4  0101               	movlb	1	; () banked
 14396  0005F6  077C               	decf	printf@width& (0+255),f,b
 14397  0005F8  A0D8               	btfss	status,0,c
 14398  0005FA  077D               	decf	(printf@width+1)& (0+255),f,b
 14399  0005FC  D000               	goto	l9672
 14400  0005FE                     l9672:
 14401                           
 14402                           ; BSR set to: 1
 14403  0005FE  0101               	movlb	1	; () banked
 14404  000600  BF7D               	btfsc	(printf@width+1)& (0+255),7,b
 14405  000602  D007               	goto	l9674
 14406  000604  0101               	movlb	1	; () banked
 14407  000606  517D               	movf	(printf@width+1)& (0+255),w,b
 14408  000608  E1F2               	bnz	l9668
 14409  00060A  0101               	movlb	1	; () banked
 14410  00060C  057C               	decf	printf@width& (0+255),w,b
 14411  00060E  B0D8               	btfsc	status,0,c
 14412  000610  D7EE               	goto	l9668
 14413  000612                     l9674:
 14414                           
 14415                           ; BSR set to: 1
 14416                           ;doprnt.c: 1183: }
 14417                           ;doprnt.c: 1188: if(flag & 0x03)
 14418  000612  0E03               	movlw	3
 14419  000614  0101               	movlb	1	; () banked
 14420  000616  1584               	andwf	printf@flag& (0+255),w,b
 14421  000618  0100               	movlb	0	; () banked
 14422  00061A  6FEB               	movwf	??_printf& (0+255),b
 14423  00061C  0E00               	movlw	0
 14424  00061E  0101               	movlb	1	; () banked
 14425  000620  1585               	andwf	(printf@flag+1)& (0+255),w,b
 14426  000622  0100               	movlb	0	; () banked
 14427  000624  6FEC               	movwf	(??_printf+1)& (0+255),b
 14428  000626  0100               	movlb	0	; () banked
 14429  000628  51EB               	movf	??_printf& (0+255),w,b
 14430  00062A  0100               	movlb	0	; () banked
 14431  00062C  11EC               	iorwf	(??_printf+1)& (0+255),w,b
 14432  00062E  B4D8               	btfsc	status,2,c
 14433  000630  D04B               	goto	l9684
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;doprnt.c: 1190: (putch('-') );
 14437  000632  0E2D               	movlw	45
 14438  000634  EC19  F028         	call	_putch
 14439                           
 14440                           ;doprnt.c: 1195: }
 14441                           ;doprnt.c: 1196: while(c--) {
 14442  000638  D047               	goto	l9684
 14443  00063A                     l9678:
 14444                           
 14445                           ;doprnt.c: 1200: {
 14446                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14447  00063A  C180  F011         	movff	printf@val,___lldiv@dividend
 14448  00063E  C181  F012         	movff	printf@val+1,___lldiv@dividend+1
 14449  000642  C182  F013         	movff	printf@val+2,___lldiv@dividend+2
 14450  000646  C183  F014         	movff	printf@val+3,___lldiv@dividend+3
 14451  00064A  0101               	movlb	1	; () banked
 14452  00064C  5189               	movf	printf@c& (0+255),w,b
 14453  00064E  0D04               	mullw	4
 14454  000650  0E1E               	movlw	low _dpowers
 14455  000652  24F3               	addwf	prodl,w,c
 14456  000654  6EF6               	movwf	tblptrl,c
 14457  000656  0EFE               	movlw	high _dpowers
 14458  000658  20F4               	addwfc	prodh,w,c
 14459  00065A  6EF7               	movwf	tblptrh,c
 14460  00065C                     	if	0	;There are less than 3 active tblptr bytes
 14461  00065C                     	endif
 14462  00065C  0009               	tblrd		*+
 14463  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 14464  000662  0009               	tblrd		*+
 14465  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14466  000668  0009               	tblrd		*+
 14467  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14468  00066E  000A               	tblrd		*-
 14469  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14470  000674  ECFA  F01F         	call	___lldiv	;wreg free
 14471  000678  C011  F178         	movff	?___lldiv,printf@tmpval
 14472  00067C  C012  F179         	movff	?___lldiv+1,printf@tmpval+1
 14473  000680  C013  F17A         	movff	?___lldiv+2,printf@tmpval+2
 14474  000684  C014  F17B         	movff	?___lldiv+3,printf@tmpval+3
 14475                           
 14476                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14477  000688  C178  F01E         	movff	printf@tmpval,___llmod@dividend
 14478  00068C  C179  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14479  000690  C17A  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14480  000694  C17B  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14481  000698  0E0A               	movlw	10
 14482  00069A  6E22               	movwf	___llmod@divisor,c
 14483  00069C  0E00               	movlw	0
 14484  00069E  6E23               	movwf	___llmod@divisor+1,c
 14485  0006A0  0E00               	movlw	0
 14486  0006A2  6E24               	movwf	___llmod@divisor+2,c
 14487  0006A4  0E00               	movlw	0
 14488  0006A6  6E25               	movwf	___llmod@divisor+3,c
 14489  0006A8  EC81  F021         	call	___llmod	;wreg free
 14490  0006AC  C01E  F178         	movff	?___llmod,printf@tmpval
 14491  0006B0  C01F  F179         	movff	?___llmod+1,printf@tmpval+1
 14492  0006B4  C020  F17A         	movff	?___llmod+2,printf@tmpval+2
 14493  0006B8  C021  F17B         	movff	?___llmod+3,printf@tmpval+3
 14494                           
 14495                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14496  0006BC  0101               	movlb	1	; () banked
 14497  0006BE  5178               	movf	printf@tmpval& (0+255),w,b
 14498  0006C0  0F30               	addlw	48
 14499  0006C2  EC19  F028         	call	_putch
 14500  0006C6  D000               	goto	l9684
 14501  0006C8                     l9684:
 14502  0006C8  0101               	movlb	1	; () banked
 14503  0006CA  0789               	decf	printf@c& (0+255),f,b
 14504  0006CC  0101               	movlb	1	; () banked
 14505  0006CE  2989               	incf	printf@c& (0+255),w,b
 14506  0006D0  B4D8               	btfsc	status,2,c
 14507  0006D2  D00A               	goto	l9690
 14508  0006D4  D7B2               	goto	l9678
 14509                           
 14510                           ; BSR set to: 1
 14511                           ;doprnt.c: 1204: }
 14512                           ;doprnt.c: 1206: }
 14513                           ;doprnt.c: 1207: while(exp > 0) {
 14514  0006D6  D008               	goto	l9690
 14515  0006D8                     l9686:
 14516                           
 14517                           ; BSR set to: 1
 14518                           ;doprnt.c: 1208: (putch('0') );
 14519  0006D8  0E30               	movlw	48
 14520  0006DA  EC19  F028         	call	_putch
 14521                           
 14522                           ;doprnt.c: 1209: exp--;
 14523  0006DE  0101               	movlb	1	; () banked
 14524  0006E0  077E               	decf	printf@exp& (0+255),f,b
 14525  0006E2  A0D8               	btfss	status,0,c
 14526  0006E4  077F               	decf	(printf@exp+1)& (0+255),f,b
 14527  0006E6  D000               	goto	l9690
 14528  0006E8                     l9690:
 14529                           
 14530                           ; BSR set to: 1
 14531  0006E8  0101               	movlb	1	; () banked
 14532  0006EA  BF7F               	btfsc	(printf@exp+1)& (0+255),7,b
 14533  0006EC  D007               	goto	l9692
 14534  0006EE  0101               	movlb	1	; () banked
 14535  0006F0  517F               	movf	(printf@exp+1)& (0+255),w,b
 14536  0006F2  E1F2               	bnz	l9686
 14537  0006F4  0101               	movlb	1	; () banked
 14538  0006F6  057E               	decf	printf@exp& (0+255),w,b
 14539  0006F8  B0D8               	btfsc	status,0,c
 14540  0006FA  D7EE               	goto	l9686
 14541  0006FC                     l9692:
 14542                           
 14543                           ; BSR set to: 1
 14544                           ;doprnt.c: 1210: }
 14545                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14546  0006FC  0101               	movlb	1	; () banked
 14547  0006FE  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
 14548  000700  D00C               	goto	l1493
 14549  000702  0101               	movlb	1	; () banked
 14550  000704  5177               	movf	(printf@prec+1)& (0+255),w,b
 14551  000706  E105               	bnz	u8050
 14552  000708  0E09               	movlw	9
 14553  00070A  0101               	movlb	1	; () banked
 14554  00070C  5D76               	subwf	printf@prec& (0+255),w,b
 14555  00070E  A0D8               	btfss	status,0,c
 14556  000710  D004               	goto	l1493
 14557  000712                     u8050:
 14558                           
 14559                           ; BSR set to: 1
 14560                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14561  000712  0E08               	movlw	8
 14562  000714  0101               	movlb	1	; () banked
 14563  000716  6F89               	movwf	printf@c& (0+255),b
 14564  000718  D003               	goto	l9696
 14565  00071A                     l1493:
 14566                           
 14567                           ; BSR set to: 1
 14568                           ;doprnt.c: 1213: else
 14569                           ;doprnt.c: 1214: c = prec;
 14570  00071A  C176  F189         	movff	printf@prec,printf@c
 14571  00071E  D000               	goto	l9696
 14572  000720                     l9696:
 14573                           
 14574                           ; BSR set to: 1
 14575                           ;doprnt.c: 1215: prec -= c;
 14576  000720  0101               	movlb	1	; () banked
 14577  000722  5189               	movf	printf@c& (0+255),w,b
 14578  000724  0101               	movlb	1	; () banked
 14579  000726  5F76               	subwf	printf@prec& (0+255),f,b
 14580  000728  0E00               	movlw	0
 14581  00072A  0101               	movlb	1	; () banked
 14582  00072C  BF89               	btfsc	printf@c& (0+255),7,b
 14583  00072E  0EFF               	movlw	255
 14584  000730  0101               	movlb	1	; () banked
 14585  000732  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
 14586                           
 14587                           ; BSR set to: 1
 14588                           ;doprnt.c: 1219: if(c)
 14589  000734  0101               	movlb	1	; () banked
 14590  000736  5189               	movf	printf@c& (0+255),w,b
 14591  000738  0101               	movlb	1	; () banked
 14592  00073A  B4D8               	btfsc	status,2,c
 14593  00073C  D004               	goto	l9702
 14594                           
 14595                           ; BSR set to: 1
 14596                           ;doprnt.c: 1221: (putch('.') );
 14597  00073E  0E2E               	movlw	46
 14598  000740  EC19  F028         	call	_putch
 14599  000744  D000               	goto	l9702
 14600  000746                     l9702:
 14601                           
 14602                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14603  000746  0101               	movlb	1	; () banked
 14604  000748  5189               	movf	printf@c& (0+255),w,b
 14605  00074A  EC3A  F009         	call	_scale
 14606  00074E  C043  F170         	movff	?_scale,_printf$3057
 14607  000752  C044  F171         	movff	?_scale+1,_printf$3057+1
 14608  000756  C045  F172         	movff	?_scale+2,_printf$3057+2
 14609                           
 14610                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14611  00075A  C186  F022         	movff	printf@fval,___ftmul@f2
 14612  00075E  C187  F023         	movff	printf@fval+1,___ftmul@f2+1
 14613  000762  C188  F024         	movff	printf@fval+2,___ftmul@f2+2
 14614  000766  C170  F01F         	movff	_printf$3057,___ftmul@f1
 14615  00076A  C171  F020         	movff	_printf$3057+1,___ftmul@f1+1
 14616  00076E  C172  F021         	movff	_printf$3057+2,___ftmul@f1+2
 14617  000772  ECE7  F017         	call	___ftmul	;wreg free
 14618  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 14619  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 14620  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 14621  000782  ECC7  F019         	call	___fttol	;wreg free
 14622  000786  C02E  F180         	movff	?___fttol,printf@val
 14623  00078A  C02F  F181         	movff	?___fttol+1,printf@val+1
 14624  00078E  C030  F182         	movff	?___fttol+2,printf@val+2
 14625  000792  C031  F183         	movff	?___fttol+3,printf@val+3
 14626                           
 14627                           ;doprnt.c: 1228: while(c--) {
 14628  000796  D06E               	goto	l9712
 14629  000798                     l9706:
 14630                           
 14631                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14632  000798  C180  F011         	movff	printf@val,___lldiv@dividend
 14633  00079C  C181  F012         	movff	printf@val+1,___lldiv@dividend+1
 14634  0007A0  C182  F013         	movff	printf@val+2,___lldiv@dividend+2
 14635  0007A4  C183  F014         	movff	printf@val+3,___lldiv@dividend+3
 14636  0007A8  0101               	movlb	1	; () banked
 14637  0007AA  5189               	movf	printf@c& (0+255),w,b
 14638  0007AC  0D04               	mullw	4
 14639  0007AE  0E1E               	movlw	low _dpowers
 14640  0007B0  24F3               	addwf	prodl,w,c
 14641  0007B2  6EF6               	movwf	tblptrl,c
 14642  0007B4  0EFE               	movlw	high _dpowers
 14643  0007B6  20F4               	addwfc	prodh,w,c
 14644  0007B8  6EF7               	movwf	tblptrh,c
 14645  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 14646  0007BA                     	endif
 14647  0007BA  0009               	tblrd		*+
 14648  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 14649  0007C0  0009               	tblrd		*+
 14650  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14651  0007C6  0009               	tblrd		*+
 14652  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14653  0007CC  000A               	tblrd		*-
 14654  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14655  0007D2  ECFA  F01F         	call	___lldiv	;wreg free
 14656  0007D6  C011  F178         	movff	?___lldiv,printf@tmpval
 14657  0007DA  C012  F179         	movff	?___lldiv+1,printf@tmpval+1
 14658  0007DE  C013  F17A         	movff	?___lldiv+2,printf@tmpval+2
 14659  0007E2  C014  F17B         	movff	?___lldiv+3,printf@tmpval+3
 14660                           
 14661                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14662  0007E6  C178  F01E         	movff	printf@tmpval,___llmod@dividend
 14663  0007EA  C179  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14664  0007EE  C17A  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14665  0007F2  C17B  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14666  0007F6  0E0A               	movlw	10
 14667  0007F8  6E22               	movwf	___llmod@divisor,c
 14668  0007FA  0E00               	movlw	0
 14669  0007FC  6E23               	movwf	___llmod@divisor+1,c
 14670  0007FE  0E00               	movlw	0
 14671  000800  6E24               	movwf	___llmod@divisor+2,c
 14672  000802  0E00               	movlw	0
 14673  000804  6E25               	movwf	___llmod@divisor+3,c
 14674  000806  EC81  F021         	call	___llmod	;wreg free
 14675  00080A  C01E  F178         	movff	?___llmod,printf@tmpval
 14676  00080E  C01F  F179         	movff	?___llmod+1,printf@tmpval+1
 14677  000812  C020  F17A         	movff	?___llmod+2,printf@tmpval+2
 14678  000816  C021  F17B         	movff	?___llmod+3,printf@tmpval+3
 14679                           
 14680                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14681  00081A  0101               	movlb	1	; () banked
 14682  00081C  5178               	movf	printf@tmpval& (0+255),w,b
 14683  00081E  0F30               	addlw	48
 14684  000820  EC19  F028         	call	_putch
 14685                           
 14686                           ;doprnt.c: 1232: val %= dpowers[c];
 14687  000824  C180  F01E         	movff	printf@val,___llmod@dividend
 14688  000828  C181  F01F         	movff	printf@val+1,___llmod@dividend+1
 14689  00082C  C182  F020         	movff	printf@val+2,___llmod@dividend+2
 14690  000830  C183  F021         	movff	printf@val+3,___llmod@dividend+3
 14691  000834  0101               	movlb	1	; () banked
 14692  000836  5189               	movf	printf@c& (0+255),w,b
 14693  000838  0D04               	mullw	4
 14694  00083A  0E1E               	movlw	low _dpowers
 14695  00083C  24F3               	addwf	prodl,w,c
 14696  00083E  6EF6               	movwf	tblptrl,c
 14697  000840  0EFE               	movlw	high _dpowers
 14698  000842  20F4               	addwfc	prodh,w,c
 14699  000844  6EF7               	movwf	tblptrh,c
 14700  000846                     	if	0	;There are less than 3 active tblptr bytes
 14701  000846                     	endif
 14702  000846  0009               	tblrd		*+
 14703  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 14704  00084C  0009               	tblrd		*+
 14705  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 14706  000852  0009               	tblrd		*+
 14707  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 14708  000858  000A               	tblrd		*-
 14709  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 14710  00085E  EC81  F021         	call	___llmod	;wreg free
 14711  000862  C01E  F180         	movff	?___llmod,printf@val
 14712  000866  C01F  F181         	movff	?___llmod+1,printf@val+1
 14713  00086A  C020  F182         	movff	?___llmod+2,printf@val+2
 14714  00086E  C021  F183         	movff	?___llmod+3,printf@val+3
 14715  000872  D000               	goto	l9712
 14716  000874                     l9712:
 14717  000874  0101               	movlb	1	; () banked
 14718  000876  0789               	decf	printf@c& (0+255),f,b
 14719  000878  0101               	movlb	1	; () banked
 14720  00087A  2989               	incf	printf@c& (0+255),w,b
 14721  00087C  B4D8               	btfsc	status,2,c
 14722  00087E  D00A               	goto	l9718
 14723  000880  D78B               	goto	l9706
 14724                           
 14725                           ; BSR set to: 1
 14726                           ;doprnt.c: 1233: }
 14727                           ;doprnt.c: 1235: while(prec) {
 14728  000882  D008               	goto	l9718
 14729  000884                     l9714:
 14730                           
 14731                           ; BSR set to: 1
 14732                           ;doprnt.c: 1236: (putch('0') );
 14733  000884  0E30               	movlw	48
 14734  000886  EC19  F028         	call	_putch
 14735                           
 14736                           ;doprnt.c: 1237: prec--;
 14737  00088A  0101               	movlb	1	; () banked
 14738  00088C  0776               	decf	printf@prec& (0+255),f,b
 14739  00088E  A0D8               	btfss	status,0,c
 14740  000890  0777               	decf	(printf@prec+1)& (0+255),f,b
 14741  000892  D000               	goto	l9718
 14742  000894                     l9718:
 14743                           
 14744                           ; BSR set to: 1
 14745  000894  0101               	movlb	1	; () banked
 14746  000896  5176               	movf	printf@prec& (0+255),w,b
 14747  000898  0101               	movlb	1	; () banked
 14748  00089A  1177               	iorwf	(printf@prec+1)& (0+255),w,b
 14749  00089C  B4D8               	btfsc	status,2,c
 14750  00089E  D1CE               	goto	l9816
 14751  0008A0  D7F1               	goto	l9714
 14752                           
 14753                           ; BSR set to: 1
 14754                           ;doprnt.c: 1238: }
 14755                           ;doprnt.c: 1245: continue;
 14756  0008A2  D1CC               	goto	l9816
 14757  0008A4                     l1454:
 14758                           
 14759                           ; BSR set to: 1
 14760                           ;doprnt.c: 1246: }
 14761                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14762  0008A4  0101               	movlb	1	; () banked
 14763  0008A6  BF84               	btfsc	printf@flag& (0+255),7,b
 14764  0008A8  D023               	goto	l9730
 14765                           
 14766                           ; BSR set to: 1
 14767                           ;doprnt.c: 1253: {
 14768                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14769  0008AA  C174  FFD9         	movff	printf@ap,fsr2l
 14770  0008AE  C175  FFDA         	movff	printf@ap+1,fsr2h
 14771  0008B2  CFDE F180          	movff	postinc2,printf@val
 14772  0008B6  CFDD F181          	movff	postdec2,printf@val+1
 14773  0008BA  0101               	movlb	1	; () banked
 14774  0008BC  0E00               	movlw	0
 14775  0008BE  BF81               	btfsc	(printf@val+1)& (0+255),7,b
 14776  0008C0  0EFF               	movlw	-1
 14777  0008C2  6F82               	movwf	(printf@val+2)& (0+255),b
 14778  0008C4  6F83               	movwf	(printf@val+3)& (0+255),b
 14779                           
 14780                           ; BSR set to: 1
 14781  0008C6  0E02               	movlw	2
 14782  0008C8  0101               	movlb	1	; () banked
 14783  0008CA  2774               	addwf	printf@ap& (0+255),f,b
 14784  0008CC  0E00               	movlw	0
 14785  0008CE  2375               	addwfc	(printf@ap+1)& (0+255),f,b
 14786                           
 14787                           ; BSR set to: 1
 14788                           ;doprnt.c: 1261: if((long)val < 0) {
 14789  0008D0  0101               	movlb	1	; () banked
 14790  0008D2  AF83               	btfss	(printf@val+3)& (0+255),7,b
 14791  0008D4  D078               	goto	l9764
 14792                           
 14793                           ; BSR set to: 1
 14794                           ;doprnt.c: 1262: flag |= 0x03;
 14795  0008D6  0E03               	movlw	3
 14796  0008D8  0101               	movlb	1	; () banked
 14797  0008DA  1384               	iorwf	printf@flag& (0+255),f,b
 14798                           
 14799                           ; BSR set to: 1
 14800                           ;doprnt.c: 1263: val = -val;
 14801  0008DC  0101               	movlb	1	; () banked
 14802  0008DE  1F83               	comf	(printf@val+3)& (0+255),f,b
 14803  0008E0  1F82               	comf	(printf@val+2)& (0+255),f,b
 14804  0008E2  1F81               	comf	(printf@val+1)& (0+255),f,b
 14805  0008E4  6D80               	negf	printf@val& (0+255),b
 14806  0008E6  0E00               	movlw	0
 14807  0008E8  2381               	addwfc	(printf@val+1)& (0+255),f,b
 14808  0008EA  2382               	addwfc	(printf@val+2)& (0+255),f,b
 14809  0008EC  2383               	addwfc	(printf@val+3)& (0+255),f,b
 14810                           
 14811                           ; BSR set to: 1
 14812                           ;doprnt.c: 1264: }
 14813                           ;doprnt.c: 1266: }
 14814  0008EE  D06B               	goto	l9764
 14815  0008F0                     l9730:
 14816                           
 14817                           ; BSR set to: 1
 14818                           ;doprnt.c: 1268: else
 14819                           ;doprnt.c: 1273: {
 14820                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14821  0008F0  C174  FFD9         	movff	printf@ap,fsr2l
 14822  0008F4  C175  FFDA         	movff	printf@ap+1,fsr2h
 14823  0008F8  CFDE F0EB          	movff	postinc2,??_printf
 14824  0008FC  CFDD F0EC          	movff	postdec2,??_printf+1
 14825  000900  C0EB  F180         	movff	??_printf,printf@val
 14826  000904  C0EC  F181         	movff	??_printf+1,printf@val+1
 14827  000908  0101               	movlb	1	; () banked
 14828  00090A  6B82               	clrf	(printf@val+2)& (0+255),b
 14829  00090C  6B83               	clrf	(printf@val+3)& (0+255),b
 14830                           
 14831                           ; BSR set to: 1
 14832  00090E  0E02               	movlw	2
 14833  000910  0101               	movlb	1	; () banked
 14834  000912  2774               	addwf	printf@ap& (0+255),f,b
 14835  000914  0E00               	movlw	0
 14836  000916  2375               	addwfc	(printf@ap+1)& (0+255),f,b
 14837                           
 14838                           ; BSR set to: 1
 14839                           ;doprnt.c: 1287: }
 14840                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14841  000918  D056               	goto	l9764
 14842  00091A                     l9734:
 14843                           
 14844                           ; BSR set to: 1
 14845                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14846  00091A  0E01               	movlw	1
 14847  00091C  0101               	movlb	1	; () banked
 14848  00091E  6F89               	movwf	printf@c& (0+255),b
 14849  000920                     l9736:
 14850                           
 14851                           ; BSR set to: 1
 14852  000920  0E0A               	movlw	10
 14853  000922  0101               	movlb	1	; () banked
 14854  000924  1989               	xorwf	printf@c& (0+255),w,b
 14855  000926  B4D8               	btfsc	status,2,c
 14856  000928  D058               	goto	l9766
 14857  00092A  D001               	goto	l9740
 14858                           
 14859                           ; BSR set to: 1
 14860  00092C  D056               	goto	l9766
 14861  00092E                     l9740:
 14862                           
 14863                           ; BSR set to: 1
 14864                           ;doprnt.c: 1306: if(val < dpowers[c])
 14865  00092E  0101               	movlb	1	; () banked
 14866  000930  5189               	movf	printf@c& (0+255),w,b
 14867  000932  0D04               	mullw	4
 14868  000934  0E1E               	movlw	low _dpowers
 14869  000936  24F3               	addwf	prodl,w,c
 14870  000938  6EF6               	movwf	tblptrl,c
 14871  00093A  0EFE               	movlw	high _dpowers
 14872  00093C  20F4               	addwfc	prodh,w,c
 14873  00093E  6EF7               	movwf	tblptrh,c
 14874  000940                     	if	0	;There are less than 3 active tblptr bytes
 14875  000940                     	endif
 14876  000940  0009               	tblrd		*+
 14877  000942  50F5               	movf	tablat,w,c
 14878  000944  0101               	movlb	1	; () banked
 14879  000946  5D80               	subwf	printf@val& (0+255),w,b
 14880  000948  0009               	tblrd		*+
 14881  00094A  50F5               	movf	tablat,w,c
 14882  00094C  0101               	movlb	1	; () banked
 14883  00094E  5981               	subwfb	(printf@val+1)& (0+255),w,b
 14884  000950  0009               	tblrd		*+
 14885  000952  50F5               	movf	tablat,w,c
 14886  000954  0101               	movlb	1	; () banked
 14887  000956  5982               	subwfb	(printf@val+2)& (0+255),w,b
 14888  000958  0009               	tblrd		*+
 14889  00095A  50F5               	movf	tablat,w,c
 14890  00095C  0101               	movlb	1	; () banked
 14891  00095E  5983               	subwfb	(printf@val+3)& (0+255),w,b
 14892  000960  A0D8               	btfss	status,0,c
 14893  000962  D03B               	goto	l9766
 14894  000964  D001               	goto	l9744
 14895                           
 14896                           ; BSR set to: 1
 14897                           ;doprnt.c: 1307: break;
 14898  000966  D039               	goto	l9766
 14899  000968                     l9744:
 14900                           
 14901                           ; BSR set to: 1
 14902  000968  0101               	movlb	1	; () banked
 14903  00096A  2B89               	incf	printf@c& (0+255),f,b
 14904  00096C  D7D9               	goto	l9736
 14905                           
 14906                           ; BSR set to: 1
 14907                           ;doprnt.c: 1309: break;
 14908                           
 14909                           ; BSR set to: 1
 14910  00096E  D035               	goto	l9766
 14911  000970                     l9748:
 14912                           
 14913                           ; BSR set to: 1
 14914                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14915  000970  0E01               	movlw	1
 14916  000972  0101               	movlb	1	; () banked
 14917  000974  6F89               	movwf	printf@c& (0+255),b
 14918  000976                     l9750:
 14919                           
 14920                           ; BSR set to: 1
 14921  000976  0E08               	movlw	8
 14922  000978  0101               	movlb	1	; () banked
 14923  00097A  1989               	xorwf	printf@c& (0+255),w,b
 14924  00097C  B4D8               	btfsc	status,2,c
 14925  00097E  D02D               	goto	l9766
 14926  000980  D001               	goto	l9754
 14927                           
 14928                           ; BSR set to: 1
 14929  000982  D02B               	goto	l9766
 14930  000984                     l9754:
 14931                           
 14932                           ; BSR set to: 1
 14933                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14934  000984  0101               	movlb	1	; () banked
 14935  000986  5189               	movf	printf@c& (0+255),w,b
 14936  000988  0D04               	mullw	4
 14937  00098A  0E94               	movlw	low _hexpowers
 14938  00098C  24F3               	addwf	prodl,w,c
 14939  00098E  6EF6               	movwf	tblptrl,c
 14940  000990  0EFE               	movlw	high _hexpowers
 14941  000992  20F4               	addwfc	prodh,w,c
 14942  000994  6EF7               	movwf	tblptrh,c
 14943  000996                     	if	0	;There are less than 3 active tblptr bytes
 14944  000996                     	endif
 14945  000996  0009               	tblrd		*+
 14946  000998  50F5               	movf	tablat,w,c
 14947  00099A  0101               	movlb	1	; () banked
 14948  00099C  5D80               	subwf	printf@val& (0+255),w,b
 14949  00099E  0009               	tblrd		*+
 14950  0009A0  50F5               	movf	tablat,w,c
 14951  0009A2  0101               	movlb	1	; () banked
 14952  0009A4  5981               	subwfb	(printf@val+1)& (0+255),w,b
 14953  0009A6  0009               	tblrd		*+
 14954  0009A8  50F5               	movf	tablat,w,c
 14955  0009AA  0101               	movlb	1	; () banked
 14956  0009AC  5982               	subwfb	(printf@val+2)& (0+255),w,b
 14957  0009AE  0009               	tblrd		*+
 14958  0009B0  50F5               	movf	tablat,w,c
 14959  0009B2  0101               	movlb	1	; () banked
 14960  0009B4  5983               	subwfb	(printf@val+3)& (0+255),w,b
 14961  0009B6  A0D8               	btfss	status,0,c
 14962  0009B8  D010               	goto	l9766
 14963  0009BA  D001               	goto	l9758
 14964                           
 14965                           ; BSR set to: 1
 14966                           ;doprnt.c: 1318: break;
 14967  0009BC  D00E               	goto	l9766
 14968  0009BE                     l9758:
 14969                           
 14970                           ; BSR set to: 1
 14971  0009BE  0101               	movlb	1	; () banked
 14972  0009C0  2B89               	incf	printf@c& (0+255),f,b
 14973  0009C2  D7D9               	goto	l9750
 14974                           
 14975                           ; BSR set to: 1
 14976                           ;doprnt.c: 1336: }
 14977                           
 14978                           ; BSR set to: 1
 14979                           ;doprnt.c: 1320: break;
 14980                           
 14981                           ; BSR set to: 1
 14982  0009C4  D00A               	goto	l9766
 14983  0009C6                     l9764:
 14984                           
 14985                           ; BSR set to: 1
 14986  0009C6  0101               	movlb	1	; () banked
 14987  0009C8  5184               	movf	printf@flag& (0+255),w,b
 14988  0009CA  0B80               	andlw	128
 14989                           
 14990                           ; Switch size 1, requested type "space"
 14991                           ; Number of cases is 2, Range of values is 0 to 128
 14992                           ; switch strategies available:
 14993                           ; Name         Instructions Cycles
 14994                           ; simple_byte            7     4 (average)
 14995                           ;	Chosen strategy is simple_byte
 14996  0009CC  0A00               	xorlw	0	; case 0
 14997  0009CE  B4D8               	btfsc	status,2,c
 14998  0009D0  D7A4               	goto	l9734
 14999  0009D2  0A80               	xorlw	128	; case 128
 15000  0009D4  B4D8               	btfsc	status,2,c
 15001  0009D6  D7CC               	goto	l9748
 15002  0009D8  D000               	goto	l9766
 15003  0009DA                     l9766:
 15004                           
 15005                           ; BSR set to: 1
 15006                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15007  0009DA  0101               	movlb	1	; () banked
 15008  0009DC  517C               	movf	printf@width& (0+255),w,b
 15009  0009DE  0101               	movlb	1	; () banked
 15010  0009E0  117D               	iorwf	(printf@width+1)& (0+255),w,b
 15011  0009E2  B4D8               	btfsc	status,2,c
 15012  0009E4  D015               	goto	l9772
 15013                           
 15014                           ; BSR set to: 1
 15015  0009E6  0E03               	movlw	3
 15016  0009E8  0101               	movlb	1	; () banked
 15017  0009EA  1584               	andwf	printf@flag& (0+255),w,b
 15018  0009EC  0100               	movlb	0	; () banked
 15019  0009EE  6FEB               	movwf	??_printf& (0+255),b
 15020  0009F0  0E00               	movlw	0
 15021  0009F2  0101               	movlb	1	; () banked
 15022  0009F4  1585               	andwf	(printf@flag+1)& (0+255),w,b
 15023  0009F6  0100               	movlb	0	; () banked
 15024  0009F8  6FEC               	movwf	(??_printf+1)& (0+255),b
 15025  0009FA  0100               	movlb	0	; () banked
 15026  0009FC  51EB               	movf	??_printf& (0+255),w,b
 15027  0009FE  0100               	movlb	0	; () banked
 15028  000A00  11EC               	iorwf	(??_printf+1)& (0+255),w,b
 15029  000A02  B4D8               	btfsc	status,2,c
 15030  000A04  D005               	goto	l9772
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;doprnt.c: 1346: width--;
 15034  000A06  0101               	movlb	1	; () banked
 15035  000A08  077C               	decf	printf@width& (0+255),f,b
 15036  000A0A  A0D8               	btfss	status,0,c
 15037  000A0C  077D               	decf	(printf@width+1)& (0+255),f,b
 15038  000A0E  D000               	goto	l9772
 15039  000A10                     l9772:
 15040                           
 15041                           ;doprnt.c: 1381: if(width > c)
 15042  000A10  0E80               	movlw	128
 15043  000A12  0101               	movlb	1	; () banked
 15044  000A14  BF89               	btfsc	printf@c& (0+255),7,b
 15045  000A16  0E7F               	movlw	127
 15046  000A18  0100               	movlb	0	; () banked
 15047  000A1A  6FEB               	movwf	??_printf& (0+255),b
 15048  000A1C  0101               	movlb	1	; () banked
 15049  000A1E  517C               	movf	printf@width& (0+255),w,b
 15050  000A20  0101               	movlb	1	; () banked
 15051  000A22  5D89               	subwf	printf@c& (0+255),w,b
 15052  000A24  0101               	movlb	1	; () banked
 15053  000A26  517D               	movf	(printf@width+1)& (0+255),w,b
 15054  000A28  0A80               	xorlw	128
 15055  000A2A  0100               	movlb	0	; () banked
 15056  000A2C  59EB               	subwfb	??_printf& (0+255),w,b
 15057  000A2E  B0D8               	btfsc	status,0,c
 15058  000A30  D00B               	goto	l9776
 15059                           
 15060                           ; BSR set to: 0
 15061                           ;doprnt.c: 1382: width -= c;
 15062  000A32  0101               	movlb	1	; () banked
 15063  000A34  5189               	movf	printf@c& (0+255),w,b
 15064  000A36  0101               	movlb	1	; () banked
 15065  000A38  5F7C               	subwf	printf@width& (0+255),f,b
 15066  000A3A  0E00               	movlw	0
 15067  000A3C  0101               	movlb	1	; () banked
 15068  000A3E  BF89               	btfsc	printf@c& (0+255),7,b
 15069  000A40  0EFF               	movlw	255
 15070  000A42  0101               	movlb	1	; () banked
 15071  000A44  5B7D               	subwfb	(printf@width+1)& (0+255),f,b
 15072  000A46  D006               	goto	l9778
 15073  000A48                     l9776:
 15074                           
 15075                           ;doprnt.c: 1383: else
 15076                           ;doprnt.c: 1384: width = 0;
 15077  000A48  0E00               	movlw	0
 15078  000A4A  0101               	movlb	1	; () banked
 15079  000A4C  6F7D               	movwf	(printf@width+1)& (0+255),b
 15080  000A4E  0E00               	movlw	0
 15081  000A50  6F7C               	movwf	printf@width& (0+255),b
 15082  000A52  D000               	goto	l9778
 15083  000A54                     l9778:
 15084                           
 15085                           ; BSR set to: 1
 15086                           ;doprnt.c: 1387: if(flag & 0x04) {
 15087  000A54  0101               	movlb	1	; () banked
 15088  000A56  A584               	btfss	printf@flag& (0+255),2,b
 15089  000A58  D029               	goto	l9790
 15090                           
 15091                           ; BSR set to: 1
 15092                           ;doprnt.c: 1392: if(flag & 0x03)
 15093  000A5A  0E03               	movlw	3
 15094  000A5C  0101               	movlb	1	; () banked
 15095  000A5E  1584               	andwf	printf@flag& (0+255),w,b
 15096  000A60  0100               	movlb	0	; () banked
 15097  000A62  6FEB               	movwf	??_printf& (0+255),b
 15098  000A64  0E00               	movlw	0
 15099  000A66  0101               	movlb	1	; () banked
 15100  000A68  1585               	andwf	(printf@flag+1)& (0+255),w,b
 15101  000A6A  0100               	movlb	0	; () banked
 15102  000A6C  6FEC               	movwf	(??_printf+1)& (0+255),b
 15103  000A6E  0100               	movlb	0	; () banked
 15104  000A70  51EB               	movf	??_printf& (0+255),w,b
 15105  000A72  0100               	movlb	0	; () banked
 15106  000A74  11EC               	iorwf	(??_printf+1)& (0+255),w,b
 15107  000A76  B4D8               	btfsc	status,2,c
 15108  000A78  D004               	goto	l9784
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;doprnt.c: 1393: (putch('-') );
 15112  000A7A  0E2D               	movlw	45
 15113  000A7C  EC19  F028         	call	_putch
 15114  000A80  D000               	goto	l9784
 15115  000A82                     l9784:
 15116                           
 15117                           ;doprnt.c: 1415: if(width)
 15118  000A82  0101               	movlb	1	; () banked
 15119  000A84  517C               	movf	printf@width& (0+255),w,b
 15120  000A86  0101               	movlb	1	; () banked
 15121  000A88  117D               	iorwf	(printf@width+1)& (0+255),w,b
 15122  000A8A  B4D8               	btfsc	status,2,c
 15123  000A8C  D038               	goto	l9800
 15124  000A8E                     l9786:
 15125                           
 15126                           ; BSR set to: 1
 15127                           ;doprnt.c: 1417: (putch('0') );
 15128  000A8E  0E30               	movlw	48
 15129  000A90  EC19  F028         	call	_putch
 15130                           
 15131                           ;doprnt.c: 1418: while(--width);
 15132  000A94  0101               	movlb	1	; () banked
 15133  000A96  077C               	decf	printf@width& (0+255),f,b
 15134  000A98  A0D8               	btfss	status,0,c
 15135  000A9A  077D               	decf	(printf@width+1)& (0+255),f,b
 15136  000A9C  0101               	movlb	1	; () banked
 15137  000A9E  517C               	movf	printf@width& (0+255),w,b
 15138  000AA0  0101               	movlb	1	; () banked
 15139  000AA2  117D               	iorwf	(printf@width+1)& (0+255),w,b
 15140  000AA4  B4D8               	btfsc	status,2,c
 15141  000AA6  D02B               	goto	l9800
 15142  000AA8  D7F2               	goto	l9786
 15143                           
 15144                           ; BSR set to: 1
 15145                           ;doprnt.c: 1420: } else
 15146                           
 15147                           ; BSR set to: 1
 15148  000AAA  D029               	goto	l9800
 15149  000AAC                     l9790:
 15150                           
 15151                           ; BSR set to: 1
 15152                           ;doprnt.c: 1422: {
 15153                           ;doprnt.c: 1424: if(width
 15154                           ;doprnt.c: 1428: )
 15155  000AAC  0101               	movlb	1	; () banked
 15156  000AAE  517C               	movf	printf@width& (0+255),w,b
 15157  000AB0  0101               	movlb	1	; () banked
 15158  000AB2  117D               	iorwf	(printf@width+1)& (0+255),w,b
 15159  000AB4  B4D8               	btfsc	status,2,c
 15160  000AB6  D00F               	goto	l9796
 15161  000AB8                     l9792:
 15162                           
 15163                           ; BSR set to: 1
 15164                           ;doprnt.c: 1430: (putch(' ') );
 15165  000AB8  0E20               	movlw	32
 15166  000ABA  EC19  F028         	call	_putch
 15167                           
 15168                           ;doprnt.c: 1431: while(--width);
 15169  000ABE  0101               	movlb	1	; () banked
 15170  000AC0  077C               	decf	printf@width& (0+255),f,b
 15171  000AC2  A0D8               	btfss	status,0,c
 15172  000AC4  077D               	decf	(printf@width+1)& (0+255),f,b
 15173  000AC6  0101               	movlb	1	; () banked
 15174  000AC8  517C               	movf	printf@width& (0+255),w,b
 15175  000ACA  0101               	movlb	1	; () banked
 15176  000ACC  117D               	iorwf	(printf@width+1)& (0+255),w,b
 15177  000ACE  B4D8               	btfsc	status,2,c
 15178  000AD0  D002               	goto	l9796
 15179  000AD2  D7F2               	goto	l9792
 15180                           
 15181                           ; BSR set to: 1
 15182  000AD4  D000               	goto	l9796
 15183  000AD6                     l9796:
 15184                           
 15185                           ; BSR set to: 1
 15186                           ;doprnt.c: 1438: if(flag & 0x03)
 15187  000AD6  0E03               	movlw	3
 15188  000AD8  0101               	movlb	1	; () banked
 15189  000ADA  1584               	andwf	printf@flag& (0+255),w,b
 15190  000ADC  0100               	movlb	0	; () banked
 15191  000ADE  6FEB               	movwf	??_printf& (0+255),b
 15192  000AE0  0E00               	movlw	0
 15193  000AE2  0101               	movlb	1	; () banked
 15194  000AE4  1585               	andwf	(printf@flag+1)& (0+255),w,b
 15195  000AE6  0100               	movlb	0	; () banked
 15196  000AE8  6FEC               	movwf	(??_printf+1)& (0+255),b
 15197  000AEA  0100               	movlb	0	; () banked
 15198  000AEC  51EB               	movf	??_printf& (0+255),w,b
 15199  000AEE  0100               	movlb	0	; () banked
 15200  000AF0  11EC               	iorwf	(??_printf+1)& (0+255),w,b
 15201  000AF2  B4D8               	btfsc	status,2,c
 15202  000AF4  D004               	goto	l9800
 15203                           
 15204                           ; BSR set to: 0
 15205                           ;doprnt.c: 1439: (putch('-') );
 15206  000AF6  0E2D               	movlw	45
 15207  000AF8  EC19  F028         	call	_putch
 15208  000AFC  D000               	goto	l9800
 15209  000AFE                     l9800:
 15210                           
 15211                           ;doprnt.c: 1469: }
 15212                           ;doprnt.c: 1472: prec = c;
 15213  000AFE  0101               	movlb	1	; () banked
 15214  000B00  5189               	movf	printf@c& (0+255),w,b
 15215  000B02  0101               	movlb	1	; () banked
 15216  000B04  6F76               	movwf	printf@prec& (0+255),b
 15217  000B06  6B77               	clrf	(printf@prec+1)& (0+255),b
 15218  000B08  BF76               	btfsc	printf@prec& (0+255),7,b
 15219  000B0A  0777               	decf	(printf@prec+1)& (0+255),f,b
 15220                           
 15221                           ;doprnt.c: 1474: while(prec--) {
 15222  000B0C  D08A               	goto	l9814
 15223                           
 15224                           ; BSR set to: 1
 15225                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15226  000B0E  D07A               	goto	l9810
 15227  000B10                     l9802:
 15228                           
 15229                           ; BSR set to: 1
 15230                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15231  000B10  C176  F0EB         	movff	printf@prec,??_printf
 15232  000B14  C177  F0EC         	movff	printf@prec+1,??_printf+1
 15233  000B18  0100               	movlb	0	; () banked
 15234  000B1A  90D8               	bcf	status,0,c
 15235  000B1C  37EB               	rlcf	??_printf& (0+255),f,b
 15236  000B1E  37EC               	rlcf	(??_printf+1)& (0+255),f,b
 15237  000B20  0100               	movlb	0	; () banked
 15238  000B22  90D8               	bcf	status,0,c
 15239  000B24  37EB               	rlcf	??_printf& (0+255),f,b
 15240  000B26  37EC               	rlcf	(??_printf+1)& (0+255),f,b
 15241  000B28  0E1E               	movlw	low _dpowers
 15242  000B2A  0100               	movlb	0	; () banked
 15243  000B2C  25EB               	addwf	??_printf& (0+255),w,b
 15244  000B2E  6EF6               	movwf	tblptrl,c
 15245  000B30  0EFE               	movlw	high _dpowers
 15246  000B32  21EC               	addwfc	(??_printf+1)& (0+255),w,b
 15247  000B34  6EF7               	movwf	tblptrh,c
 15248  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15249  000B36                     	endif
 15250  000B36  0009               	tblrd		*+
 15251  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 15252  000B3C  0009               	tblrd		*+
 15253  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15254  000B42  0009               	tblrd		*+
 15255  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15256  000B48  000A               	tblrd		*-
 15257  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15258  000B4E  C180  F011         	movff	printf@val,___lldiv@dividend
 15259  000B52  C181  F012         	movff	printf@val+1,___lldiv@dividend+1
 15260  000B56  C182  F013         	movff	printf@val+2,___lldiv@dividend+2
 15261  000B5A  C183  F014         	movff	printf@val+3,___lldiv@dividend+3
 15262  000B5E  ECFA  F01F         	call	___lldiv	;wreg free
 15263  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 15264  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 15265  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 15266  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 15267  000B72  0E0A               	movlw	10
 15268  000B74  6E22               	movwf	___llmod@divisor,c
 15269  000B76  0E00               	movlw	0
 15270  000B78  6E23               	movwf	___llmod@divisor+1,c
 15271  000B7A  0E00               	movlw	0
 15272  000B7C  6E24               	movwf	___llmod@divisor+2,c
 15273  000B7E  0E00               	movlw	0
 15274  000B80  6E25               	movwf	___llmod@divisor+3,c
 15275  000B82  EC81  F021         	call	___llmod	;wreg free
 15276  000B86  501E               	movf	?___llmod,w,c
 15277  000B88  0F30               	addlw	48
 15278  000B8A  0101               	movlb	1	; () banked
 15279  000B8C  6F89               	movwf	printf@c& (0+255),b
 15280                           
 15281                           ;doprnt.c: 1491: break;
 15282  000B8E  D044               	goto	l9812
 15283  000B90                     l9804:
 15284                           
 15285                           ; BSR set to: 1
 15286                           ;doprnt.c: 1499: {
 15287                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15288  000B90  C180  F011         	movff	printf@val,___lldiv@dividend
 15289  000B94  C181  F012         	movff	printf@val+1,___lldiv@dividend+1
 15290  000B98  C182  F013         	movff	printf@val+2,___lldiv@dividend+2
 15291  000B9C  C183  F014         	movff	printf@val+3,___lldiv@dividend+3
 15292  000BA0  C176  F0EB         	movff	printf@prec,??_printf
 15293  000BA4  C177  F0EC         	movff	printf@prec+1,??_printf+1
 15294  000BA8  0100               	movlb	0	; () banked
 15295  000BAA  90D8               	bcf	status,0,c
 15296  000BAC  37EB               	rlcf	??_printf& (0+255),f,b
 15297  000BAE  37EC               	rlcf	(??_printf+1)& (0+255),f,b
 15298  000BB0  0100               	movlb	0	; () banked
 15299  000BB2  90D8               	bcf	status,0,c
 15300  000BB4  37EB               	rlcf	??_printf& (0+255),f,b
 15301  000BB6  37EC               	rlcf	(??_printf+1)& (0+255),f,b
 15302  000BB8  0E94               	movlw	low _hexpowers
 15303  000BBA  0100               	movlb	0	; () banked
 15304  000BBC  25EB               	addwf	??_printf& (0+255),w,b
 15305  000BBE  6EF6               	movwf	tblptrl,c
 15306  000BC0  0EFE               	movlw	high _hexpowers
 15307  000BC2  21EC               	addwfc	(??_printf+1)& (0+255),w,b
 15308  000BC4  6EF7               	movwf	tblptrh,c
 15309  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 15310  000BC6                     	endif
 15311  000BC6  0009               	tblrd		*+
 15312  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 15313  000BCC  0009               	tblrd		*+
 15314  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15315  000BD2  0009               	tblrd		*+
 15316  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15317  000BD8  000A               	tblrd		*-
 15318  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15319  000BDE  ECFA  F01F         	call	___lldiv	;wreg free
 15320  000BE2  5011               	movf	?___lldiv,w,c
 15321  000BE4  0B0F               	andlw	15
 15322  000BE6  0101               	movlb	1	; () banked
 15323  000BE8  6F73               	movwf	printf@idx& (0+255),b
 15324                           
 15325                           ; BSR set to: 1
 15326                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15327  000BEA  0101               	movlb	1	; () banked
 15328  000BEC  5173               	movf	printf@idx& (0+255),w,b
 15329  000BEE  0D01               	mullw	1
 15330  000BF0  0E50               	movlw	low STR_36
 15331  000BF2  24F3               	addwf	prodl,w,c
 15332  000BF4  6EF6               	movwf	tblptrl,c
 15333  000BF6  0EFF               	movlw	high STR_36
 15334  000BF8  20F4               	addwfc	prodh,w,c
 15335  000BFA  6EF7               	movwf	tblptrh,c
 15336  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 15337  000BFC                     	endif
 15338  000BFC  0008               	tblrd		*
 15339  000BFE  CFF5 F189          	movff	tablat,printf@c
 15340                           
 15341                           ; BSR set to: 1
 15342                           ;doprnt.c: 1523: }
 15343                           
 15344                           ;doprnt.c: 1508: }
 15345                           ;doprnt.c: 1510: break;
 15346  000C02  D00A               	goto	l9812
 15347  000C04                     l9810:
 15348                           
 15349                           ; BSR set to: 1
 15350  000C04  0101               	movlb	1	; () banked
 15351  000C06  5184               	movf	printf@flag& (0+255),w,b
 15352  000C08  0B80               	andlw	128
 15353                           
 15354                           ; Switch size 1, requested type "space"
 15355                           ; Number of cases is 2, Range of values is 0 to 128
 15356                           ; switch strategies available:
 15357                           ; Name         Instructions Cycles
 15358                           ; simple_byte            7     4 (average)
 15359                           ;	Chosen strategy is simple_byte
 15360  000C0A  0A00               	xorlw	0	; case 0
 15361  000C0C  B4D8               	btfsc	status,2,c
 15362  000C0E  D780               	goto	l9802
 15363  000C10  0A80               	xorlw	128	; case 128
 15364  000C12  B4D8               	btfsc	status,2,c
 15365  000C14  D7BD               	goto	l9804
 15366  000C16  D000               	goto	l9812
 15367  000C18                     l9812:
 15368                           
 15369                           ; BSR set to: 1
 15370                           ;doprnt.c: 1524: (putch(c) );
 15371  000C18  0101               	movlb	1	; () banked
 15372  000C1A  5189               	movf	printf@c& (0+255),w,b
 15373  000C1C  EC19  F028         	call	_putch
 15374  000C20  D000               	goto	l9814
 15375  000C22                     l9814:
 15376  000C22  0101               	movlb	1	; () banked
 15377  000C24  0776               	decf	printf@prec& (0+255),f,b
 15378  000C26  A0D8               	btfss	status,0,c
 15379  000C28  0777               	decf	(printf@prec+1)& (0+255),f,b
 15380  000C2A  0101               	movlb	1	; () banked
 15381  000C2C  2976               	incf	printf@prec& (0+255),w,b
 15382  000C2E  E1EA               	bnz	l9810
 15383  000C30  0101               	movlb	1	; () banked
 15384  000C32  2977               	incf	(printf@prec+1)& (0+255),w,b
 15385  000C34  B4D8               	btfsc	status,2,c
 15386  000C36  D002               	goto	l9816
 15387  000C38  D7E5               	goto	l9810
 15388                           
 15389                           ; BSR set to: 1
 15390  000C3A  D000               	goto	l9816
 15391  000C3C                     l9816:
 15392  000C3C  C0DD  FFF6         	movff	printf@f,tblptrl
 15393  000C40  C0DE  FFF7         	movff	printf@f+1,tblptrh
 15394  000C44  0100               	movlb	0	; () banked
 15395  000C46  4BDD               	infsnz	printf@f& (0+255),f,b
 15396  000C48  2BDE               	incf	(printf@f+1)& (0+255),f,b
 15397  000C4A                     	if	0	;tblptru may be non-zero
 15398  000C4A                     	endif
 15399  000C4A                     	if	0	;tblptru may be non-zero
 15400  000C4A                     	endif
 15401  000C4A  0008               	tblrd		*
 15402  000C4C  CFF5 F189          	movff	tablat,printf@c
 15403  000C50  0101               	movlb	1	; () banked
 15404  000C52  5189               	movf	printf@c& (0+255),w,b
 15405  000C54  B4D8               	btfsc	status,2,c
 15406  000C56  D003               	goto	l1536
 15407  000C58  EF16  F000         	goto	l9530
 15408                           
 15409                           ; BSR set to: 1
 15410  000C5C  D000               	goto	l1536
 15411  000C5E                     l1536:
 15412  000C5E  0012               	return		;funcret
 15413  000C60                     __end_of_printf:
 15414                           	opt stack 0
 15415                           tblptru	equ	0xFF8
 15416                           tblptrh	equ	0xFF7
 15417                           tblptrl	equ	0xFF6
 15418                           tablat	equ	0xFF5
 15419                           prodh	equ	0xFF4
 15420                           prodl	equ	0xFF3
 15421                           intcon	equ	0xFF2
 15422                           intcon2	equ	0xFF1
 15423                           postinc0	equ	0xFEE
 15424                           wreg	equ	0xFE8
 15425                           postdec1	equ	0xFE5
 15426                           fsr1l	equ	0xFE1
 15427                           indf2	equ	0xFDF
 15428                           postinc2	equ	0xFDE
 15429                           postdec2	equ	0xFDD
 15430                           fsr2h	equ	0xFDA
 15431                           fsr2l	equ	0xFD9
 15432                           status	equ	0xFD8
 15433                           
 15434 ;; *************** function _scale *****************
 15435 ;; Defined at:
 15436 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  scl             1    wreg     char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  scl             1   72[COMRAM] char 
 15441 ;; Return value:  Size  Location     Type
 15442 ;;                  3   66[COMRAM] char 
 15443 ;; Registers used:
 15444 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15450 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15453 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15454 ;;Total ram usage:        7 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    4
 15457 ;; This function calls:
 15458 ;;		___awdiv
 15459 ;;		___awmod
 15460 ;;		___ftmul
 15461 ;;		___wmul
 15462 ;; This function is called by:
 15463 ;;		_printf
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           	psect	text72
 15468  001274                     __ptext72:
 15469                           	opt stack 0
 15470  001274                     _scale:
 15471                           	opt stack 25
 15472                           
 15473                           ;incstack = 0
 15474                           ;scale@scl stored from wreg
 15475  001274  6E49               	movwf	scale@scl,c
 15476                           
 15477                           ;doprnt.c: 428: if(scl < 0) {
 15478  001276  AE49               	btfss	scale@scl,7,c
 15479  001278  D0EF               	goto	l9252
 15480                           
 15481                           ;doprnt.c: 429: scl = -scl;
 15482  00127A  6C49               	negf	scale@scl,c
 15483                           
 15484                           ;doprnt.c: 430: if(scl>=110)
 15485  00127C  5049               	movf	scale@scl,w,c
 15486  00127E  0A80               	xorlw	128
 15487  001280  0F12               	addlw	-238
 15488  001282  A0D8               	btfss	status,0,c
 15489  001284  D08D               	goto	l9242
 15490                           
 15491                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15492  001286  0E00               	movlw	0
 15493  001288  6E14               	movwf	___wmul@multiplicand+1,c
 15494  00128A  0E03               	movlw	3
 15495  00128C  6E13               	movwf	___wmul@multiplicand,c
 15496  00128E  0E00               	movlw	0
 15497  001290  6E1A               	movwf	___awdiv@divisor+1,c
 15498  001292  0E0A               	movlw	10
 15499  001294  6E19               	movwf	___awdiv@divisor,c
 15500  001296  0E00               	movlw	0
 15501  001298  6E40               	movwf	___awmod@divisor+1,c
 15502  00129A  0E64               	movlw	100
 15503  00129C  6E3F               	movwf	___awmod@divisor,c
 15504  00129E  5049               	movf	scale@scl,w,c
 15505  0012A0  6E3D               	movwf	___awmod@dividend,c
 15506  0012A2  6A3E               	clrf	___awmod@dividend+1,c
 15507  0012A4  BE3D               	btfsc	___awmod@dividend,7,c
 15508  0012A6  063E               	decf	___awmod@dividend+1,f,c
 15509  0012A8  EC08  F021         	call	___awmod	;wreg free
 15510  0012AC  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15511  0012B0  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15512  0012B4  ECD0  F01E         	call	___awdiv	;wreg free
 15513  0012B8  0E09               	movlw	9
 15514  0012BA  2417               	addwf	?___awdiv,w,c
 15515  0012BC  6E11               	movwf	___wmul@multiplier,c
 15516  0012BE  0E00               	movlw	0
 15517  0012C0  2018               	addwfc	?___awdiv+1,w,c
 15518  0012C2  6E12               	movwf	___wmul@multiplier+1,c
 15519  0012C4  EC24  F026         	call	___wmul	;wreg free
 15520  0012C8  0E46               	movlw	low __npowers_
 15521  0012CA  2411               	addwf	?___wmul,w,c
 15522  0012CC  6EF6               	movwf	tblptrl,c
 15523  0012CE  0EFE               	movlw	high __npowers_
 15524  0012D0  2012               	addwfc	?___wmul+1,w,c
 15525  0012D2  6EF7               	movwf	tblptrh,c
 15526  0012D4                     	if	0	;There are less than 3 active tblptr bytes
 15527  0012D4                     	endif
 15528  0012D4  0009               	tblrd		*+
 15529  0012D6  CFF5 F022          	movff	tablat,___ftmul@f2
 15530  0012DA  0009               	tblrd		*+
 15531  0012DC  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15532  0012E0  000A               	tblrd		*-
 15533  0012E2  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15534  0012E6  0E00               	movlw	0
 15535  0012E8  6E1A               	movwf	___awdiv@divisor+1,c
 15536  0012EA  0E64               	movlw	100
 15537  0012EC  6E19               	movwf	___awdiv@divisor,c
 15538  0012EE  5049               	movf	scale@scl,w,c
 15539  0012F0  6E17               	movwf	___awdiv@dividend,c
 15540  0012F2  6A18               	clrf	___awdiv@dividend+1,c
 15541  0012F4  BE17               	btfsc	___awdiv@dividend,7,c
 15542  0012F6  0618               	decf	___awdiv@dividend+1,f,c
 15543  0012F8  ECD0  F01E         	call	___awdiv	;wreg free
 15544  0012FC  0E12               	movlw	18
 15545  0012FE  2417               	addwf	?___awdiv,w,c
 15546  001300  6E11               	movwf	___wmul@multiplier,c
 15547  001302  0E00               	movlw	0
 15548  001304  2018               	addwfc	?___awdiv+1,w,c
 15549  001306  6E12               	movwf	___wmul@multiplier+1,c
 15550  001308  0E00               	movlw	0
 15551  00130A  6E14               	movwf	___wmul@multiplicand+1,c
 15552  00130C  0E03               	movlw	3
 15553  00130E  6E13               	movwf	___wmul@multiplicand,c
 15554  001310  EC24  F026         	call	___wmul	;wreg free
 15555  001314  0E46               	movlw	low __npowers_
 15556  001316  2411               	addwf	?___wmul,w,c
 15557  001318  6EF6               	movwf	tblptrl,c
 15558  00131A  0EFE               	movlw	high __npowers_
 15559  00131C  2012               	addwfc	?___wmul+1,w,c
 15560  00131E  6EF7               	movwf	tblptrh,c
 15561  001320                     	if	0	;There are less than 3 active tblptr bytes
 15562  001320                     	endif
 15563  001320  0009               	tblrd		*+
 15564  001322  CFF5 F01F          	movff	tablat,___ftmul@f1
 15565  001326  0009               	tblrd		*+
 15566  001328  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15567  00132C  000A               	tblrd		*-
 15568  00132E  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15569  001332  ECE7  F017         	call	___ftmul	;wreg free
 15570  001336  C01F  F046         	movff	?___ftmul,_scale$3056
 15571  00133A  C020  F047         	movff	?___ftmul+1,_scale$3056+1
 15572  00133E  C021  F048         	movff	?___ftmul+2,_scale$3056+2
 15573                           
 15574                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15575  001342  C046  F01F         	movff	_scale$3056,___ftmul@f1
 15576  001346  C047  F020         	movff	_scale$3056+1,___ftmul@f1+1
 15577  00134A  C048  F021         	movff	_scale$3056+2,___ftmul@f1+2
 15578  00134E  0E00               	movlw	0
 15579  001350  6E14               	movwf	___wmul@multiplicand+1,c
 15580  001352  0E03               	movlw	3
 15581  001354  6E13               	movwf	___wmul@multiplicand,c
 15582  001356  0E00               	movlw	0
 15583  001358  6E40               	movwf	___awmod@divisor+1,c
 15584  00135A  0E0A               	movlw	10
 15585  00135C  6E3F               	movwf	___awmod@divisor,c
 15586  00135E  5049               	movf	scale@scl,w,c
 15587  001360  6E3D               	movwf	___awmod@dividend,c
 15588  001362  6A3E               	clrf	___awmod@dividend+1,c
 15589  001364  BE3D               	btfsc	___awmod@dividend,7,c
 15590  001366  063E               	decf	___awmod@dividend+1,f,c
 15591  001368  EC08  F021         	call	___awmod	;wreg free
 15592  00136C  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15593  001370  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15594  001374  EC24  F026         	call	___wmul	;wreg free
 15595  001378  0E46               	movlw	low __npowers_
 15596  00137A  2411               	addwf	?___wmul,w,c
 15597  00137C  6EF6               	movwf	tblptrl,c
 15598  00137E  0EFE               	movlw	high __npowers_
 15599  001380  2012               	addwfc	?___wmul+1,w,c
 15600  001382  6EF7               	movwf	tblptrh,c
 15601  001384                     	if	0	;There are less than 3 active tblptr bytes
 15602  001384                     	endif
 15603  001384  0009               	tblrd		*+
 15604  001386  CFF5 F022          	movff	tablat,___ftmul@f2
 15605  00138A  0009               	tblrd		*+
 15606  00138C  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15607  001390  000A               	tblrd		*-
 15608  001392  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15609  001396  ECE7  F017         	call	___ftmul	;wreg free
 15610  00139A  D141               	goto	L18
 15611  00139C  D15A               	goto	l1425
 15612  00139E  D054               	goto	l9248
 15613  0013A0                     l9242:
 15614                           
 15615                           ;doprnt.c: 432: else if(scl > 10)
 15616  0013A0  5049               	movf	scale@scl,w,c
 15617  0013A2  0A80               	xorlw	128
 15618  0013A4  0F75               	addlw	-139
 15619  0013A6  A0D8               	btfss	status,0,c
 15620  0013A8  D04F               	goto	l9248
 15621                           
 15622                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15623  0013AA  0E00               	movlw	0
 15624  0013AC  6E1A               	movwf	___awdiv@divisor+1,c
 15625  0013AE  0E0A               	movlw	10
 15626  0013B0  6E19               	movwf	___awdiv@divisor,c
 15627  0013B2  5049               	movf	scale@scl,w,c
 15628  0013B4  6E17               	movwf	___awdiv@dividend,c
 15629  0013B6  6A18               	clrf	___awdiv@dividend+1,c
 15630  0013B8  BE17               	btfsc	___awdiv@dividend,7,c
 15631  0013BA  0618               	decf	___awdiv@dividend+1,f,c
 15632  0013BC  ECD0  F01E         	call	___awdiv	;wreg free
 15633  0013C0  0E09               	movlw	9
 15634  0013C2  2417               	addwf	?___awdiv,w,c
 15635  0013C4  6E11               	movwf	___wmul@multiplier,c
 15636  0013C6  0E00               	movlw	0
 15637  0013C8  2018               	addwfc	?___awdiv+1,w,c
 15638  0013CA  6E12               	movwf	___wmul@multiplier+1,c
 15639  0013CC  0E00               	movlw	0
 15640  0013CE  6E14               	movwf	___wmul@multiplicand+1,c
 15641  0013D0  0E03               	movlw	3
 15642  0013D2  6E13               	movwf	___wmul@multiplicand,c
 15643  0013D4  EC24  F026         	call	___wmul	;wreg free
 15644  0013D8  0E46               	movlw	low __npowers_
 15645  0013DA  2411               	addwf	?___wmul,w,c
 15646  0013DC  6EF6               	movwf	tblptrl,c
 15647  0013DE  0EFE               	movlw	high __npowers_
 15648  0013E0  2012               	addwfc	?___wmul+1,w,c
 15649  0013E2  6EF7               	movwf	tblptrh,c
 15650  0013E4                     	if	0	;There are less than 3 active tblptr bytes
 15651  0013E4                     	endif
 15652  0013E4  0009               	tblrd		*+
 15653  0013E6  CFF5 F01F          	movff	tablat,___ftmul@f1
 15654  0013EA  0009               	tblrd		*+
 15655  0013EC  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15656  0013F0  000A               	tblrd		*-
 15657  0013F2  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15658  0013F6  0E00               	movlw	0
 15659  0013F8  6E14               	movwf	___wmul@multiplicand+1,c
 15660  0013FA  0E03               	movlw	3
 15661  0013FC  6E13               	movwf	___wmul@multiplicand,c
 15662  0013FE  0E00               	movlw	0
 15663  001400  6E40               	movwf	___awmod@divisor+1,c
 15664  001402  0E0A               	movlw	10
 15665  001404  6E3F               	movwf	___awmod@divisor,c
 15666  001406  5049               	movf	scale@scl,w,c
 15667  001408  6E3D               	movwf	___awmod@dividend,c
 15668  00140A  6A3E               	clrf	___awmod@dividend+1,c
 15669  00140C  BE3D               	btfsc	___awmod@dividend,7,c
 15670  00140E  063E               	decf	___awmod@dividend+1,f,c
 15671  001410  EC08  F021         	call	___awmod	;wreg free
 15672  001414  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15673  001418  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15674  00141C  EC24  F026         	call	___wmul	;wreg free
 15675  001420  0E46               	movlw	low __npowers_
 15676  001422  2411               	addwf	?___wmul,w,c
 15677  001424  6EF6               	movwf	tblptrl,c
 15678  001426  0EFE               	movlw	high __npowers_
 15679  001428  2012               	addwfc	?___wmul+1,w,c
 15680  00142A  6EF7               	movwf	tblptrh,c
 15681  00142C                     	if	0	;There are less than 3 active tblptr bytes
 15682  00142C                     	endif
 15683  00142C  0009               	tblrd		*+
 15684  00142E  CFF5 F022          	movff	tablat,___ftmul@f2
 15685  001432  0009               	tblrd		*+
 15686  001434  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15687  001438  000A               	tblrd		*-
 15688  00143A  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15689  00143E  ECE7  F017         	call	___ftmul	;wreg free
 15690  001442  D0ED               	goto	L18
 15691  001444  D106               	goto	l1425
 15692  001446  D000               	goto	l9248
 15693  001448                     l9248:
 15694                           
 15695                           ;doprnt.c: 434: return _npowers_[scl];
 15696  001448  5049               	movf	scale@scl,w,c
 15697  00144A  0D03               	mullw	3
 15698  00144C  0E46               	movlw	low __npowers_
 15699  00144E  24F3               	addwf	prodl,w,c
 15700  001450  6EF6               	movwf	tblptrl,c
 15701  001452  0EFE               	movlw	high __npowers_
 15702  001454  D0F2               	goto	L17
 15703  001456  D0FD               	goto	l1425
 15704  001458                     l9252:
 15705                           
 15706                           ;doprnt.c: 435: }
 15707                           ;doprnt.c: 436: if(scl>=110)
 15708  001458  5049               	movf	scale@scl,w,c
 15709  00145A  0A80               	xorlw	128
 15710  00145C  0F12               	addlw	-238
 15711  00145E  A0D8               	btfss	status,0,c
 15712  001460  D08D               	goto	l9260
 15713                           
 15714                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15715  001462  0E00               	movlw	0
 15716  001464  6E14               	movwf	___wmul@multiplicand+1,c
 15717  001466  0E03               	movlw	3
 15718  001468  6E13               	movwf	___wmul@multiplicand,c
 15719  00146A  0E00               	movlw	0
 15720  00146C  6E1A               	movwf	___awdiv@divisor+1,c
 15721  00146E  0E0A               	movlw	10
 15722  001470  6E19               	movwf	___awdiv@divisor,c
 15723  001472  0E00               	movlw	0
 15724  001474  6E40               	movwf	___awmod@divisor+1,c
 15725  001476  0E64               	movlw	100
 15726  001478  6E3F               	movwf	___awmod@divisor,c
 15727  00147A  5049               	movf	scale@scl,w,c
 15728  00147C  6E3D               	movwf	___awmod@dividend,c
 15729  00147E  6A3E               	clrf	___awmod@dividend+1,c
 15730  001480  BE3D               	btfsc	___awmod@dividend,7,c
 15731  001482  063E               	decf	___awmod@dividend+1,f,c
 15732  001484  EC08  F021         	call	___awmod	;wreg free
 15733  001488  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15734  00148C  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15735  001490  ECD0  F01E         	call	___awdiv	;wreg free
 15736  001494  0E09               	movlw	9
 15737  001496  2417               	addwf	?___awdiv,w,c
 15738  001498  6E11               	movwf	___wmul@multiplier,c
 15739  00149A  0E00               	movlw	0
 15740  00149C  2018               	addwfc	?___awdiv+1,w,c
 15741  00149E  6E12               	movwf	___wmul@multiplier+1,c
 15742  0014A0  EC24  F026         	call	___wmul	;wreg free
 15743  0014A4  0E6D               	movlw	low __powers_
 15744  0014A6  2411               	addwf	?___wmul,w,c
 15745  0014A8  6EF6               	movwf	tblptrl,c
 15746  0014AA  0EFE               	movlw	high __powers_
 15747  0014AC  2012               	addwfc	?___wmul+1,w,c
 15748  0014AE  6EF7               	movwf	tblptrh,c
 15749  0014B0                     	if	0	;There are less than 3 active tblptr bytes
 15750  0014B0                     	endif
 15751  0014B0  0009               	tblrd		*+
 15752  0014B2  CFF5 F022          	movff	tablat,___ftmul@f2
 15753  0014B6  0009               	tblrd		*+
 15754  0014B8  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15755  0014BC  000A               	tblrd		*-
 15756  0014BE  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15757  0014C2  0E00               	movlw	0
 15758  0014C4  6E1A               	movwf	___awdiv@divisor+1,c
 15759  0014C6  0E64               	movlw	100
 15760  0014C8  6E19               	movwf	___awdiv@divisor,c
 15761  0014CA  5049               	movf	scale@scl,w,c
 15762  0014CC  6E17               	movwf	___awdiv@dividend,c
 15763  0014CE  6A18               	clrf	___awdiv@dividend+1,c
 15764  0014D0  BE17               	btfsc	___awdiv@dividend,7,c
 15765  0014D2  0618               	decf	___awdiv@dividend+1,f,c
 15766  0014D4  ECD0  F01E         	call	___awdiv	;wreg free
 15767  0014D8  0E12               	movlw	18
 15768  0014DA  2417               	addwf	?___awdiv,w,c
 15769  0014DC  6E11               	movwf	___wmul@multiplier,c
 15770  0014DE  0E00               	movlw	0
 15771  0014E0  2018               	addwfc	?___awdiv+1,w,c
 15772  0014E2  6E12               	movwf	___wmul@multiplier+1,c
 15773  0014E4  0E00               	movlw	0
 15774  0014E6  6E14               	movwf	___wmul@multiplicand+1,c
 15775  0014E8  0E03               	movlw	3
 15776  0014EA  6E13               	movwf	___wmul@multiplicand,c
 15777  0014EC  EC24  F026         	call	___wmul	;wreg free
 15778  0014F0  0E6D               	movlw	low __powers_
 15779  0014F2  2411               	addwf	?___wmul,w,c
 15780  0014F4  6EF6               	movwf	tblptrl,c
 15781  0014F6  0EFE               	movlw	high __powers_
 15782  0014F8  2012               	addwfc	?___wmul+1,w,c
 15783  0014FA  6EF7               	movwf	tblptrh,c
 15784  0014FC                     	if	0	;There are less than 3 active tblptr bytes
 15785  0014FC                     	endif
 15786  0014FC  0009               	tblrd		*+
 15787  0014FE  CFF5 F01F          	movff	tablat,___ftmul@f1
 15788  001502  0009               	tblrd		*+
 15789  001504  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15790  001508  000A               	tblrd		*-
 15791  00150A  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15792  00150E  ECE7  F017         	call	___ftmul	;wreg free
 15793  001512  C01F  F046         	movff	?___ftmul,_scale$3056
 15794  001516  C020  F047         	movff	?___ftmul+1,_scale$3056+1
 15795  00151A  C021  F048         	movff	?___ftmul+2,_scale$3056+2
 15796                           
 15797                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15798  00151E  C046  F01F         	movff	_scale$3056,___ftmul@f1
 15799  001522  C047  F020         	movff	_scale$3056+1,___ftmul@f1+1
 15800  001526  C048  F021         	movff	_scale$3056+2,___ftmul@f1+2
 15801  00152A  0E00               	movlw	0
 15802  00152C  6E14               	movwf	___wmul@multiplicand+1,c
 15803  00152E  0E03               	movlw	3
 15804  001530  6E13               	movwf	___wmul@multiplicand,c
 15805  001532  0E00               	movlw	0
 15806  001534  6E40               	movwf	___awmod@divisor+1,c
 15807  001536  0E0A               	movlw	10
 15808  001538  6E3F               	movwf	___awmod@divisor,c
 15809  00153A  5049               	movf	scale@scl,w,c
 15810  00153C  6E3D               	movwf	___awmod@dividend,c
 15811  00153E  6A3E               	clrf	___awmod@dividend+1,c
 15812  001540  BE3D               	btfsc	___awmod@dividend,7,c
 15813  001542  063E               	decf	___awmod@dividend+1,f,c
 15814  001544  EC08  F021         	call	___awmod	;wreg free
 15815  001548  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15816  00154C  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15817  001550  EC24  F026         	call	___wmul	;wreg free
 15818  001554  0E6D               	movlw	low __powers_
 15819  001556  2411               	addwf	?___wmul,w,c
 15820  001558  6EF6               	movwf	tblptrl,c
 15821  00155A  0EFE               	movlw	high __powers_
 15822  00155C  2012               	addwfc	?___wmul+1,w,c
 15823  00155E  6EF7               	movwf	tblptrh,c
 15824  001560                     	if	0	;There are less than 3 active tblptr bytes
 15825  001560                     	endif
 15826  001560  0009               	tblrd		*+
 15827  001562  CFF5 F022          	movff	tablat,___ftmul@f2
 15828  001566  0009               	tblrd		*+
 15829  001568  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15830  00156C  000A               	tblrd		*-
 15831  00156E  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15832  001572  ECE7  F017         	call	___ftmul	;wreg free
 15833  001576  D053               	goto	L18
 15834  001578  D06C               	goto	l1425
 15835  00157A  D059               	goto	l9266
 15836  00157C                     l9260:
 15837                           
 15838                           ;doprnt.c: 438: else if(scl > 10)
 15839  00157C  5049               	movf	scale@scl,w,c
 15840  00157E  0A80               	xorlw	128
 15841  001580  0F75               	addlw	-139
 15842  001582  A0D8               	btfss	status,0,c
 15843  001584  D054               	goto	l9266
 15844                           
 15845                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15846  001586  0E00               	movlw	0
 15847  001588  6E1A               	movwf	___awdiv@divisor+1,c
 15848  00158A  0E0A               	movlw	10
 15849  00158C  6E19               	movwf	___awdiv@divisor,c
 15850  00158E  5049               	movf	scale@scl,w,c
 15851  001590  6E17               	movwf	___awdiv@dividend,c
 15852  001592  6A18               	clrf	___awdiv@dividend+1,c
 15853  001594  BE17               	btfsc	___awdiv@dividend,7,c
 15854  001596  0618               	decf	___awdiv@dividend+1,f,c
 15855  001598  ECD0  F01E         	call	___awdiv	;wreg free
 15856  00159C  0E09               	movlw	9
 15857  00159E  2417               	addwf	?___awdiv,w,c
 15858  0015A0  6E11               	movwf	___wmul@multiplier,c
 15859  0015A2  0E00               	movlw	0
 15860  0015A4  2018               	addwfc	?___awdiv+1,w,c
 15861  0015A6  6E12               	movwf	___wmul@multiplier+1,c
 15862  0015A8  0E00               	movlw	0
 15863  0015AA  6E14               	movwf	___wmul@multiplicand+1,c
 15864  0015AC  0E03               	movlw	3
 15865  0015AE  6E13               	movwf	___wmul@multiplicand,c
 15866  0015B0  EC24  F026         	call	___wmul	;wreg free
 15867  0015B4  0E6D               	movlw	low __powers_
 15868  0015B6  2411               	addwf	?___wmul,w,c
 15869  0015B8  6EF6               	movwf	tblptrl,c
 15870  0015BA  0EFE               	movlw	high __powers_
 15871  0015BC  2012               	addwfc	?___wmul+1,w,c
 15872  0015BE  6EF7               	movwf	tblptrh,c
 15873  0015C0                     	if	0	;There are less than 3 active tblptr bytes
 15874  0015C0                     	endif
 15875  0015C0  0009               	tblrd		*+
 15876  0015C2  CFF5 F01F          	movff	tablat,___ftmul@f1
 15877  0015C6  0009               	tblrd		*+
 15878  0015C8  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15879  0015CC  000A               	tblrd		*-
 15880  0015CE  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15881  0015D2  0E00               	movlw	0
 15882  0015D4  6E14               	movwf	___wmul@multiplicand+1,c
 15883  0015D6  0E03               	movlw	3
 15884  0015D8  6E13               	movwf	___wmul@multiplicand,c
 15885  0015DA  0E00               	movlw	0
 15886  0015DC  6E40               	movwf	___awmod@divisor+1,c
 15887  0015DE  0E0A               	movlw	10
 15888  0015E0  6E3F               	movwf	___awmod@divisor,c
 15889  0015E2  5049               	movf	scale@scl,w,c
 15890  0015E4  6E3D               	movwf	___awmod@dividend,c
 15891  0015E6  6A3E               	clrf	___awmod@dividend+1,c
 15892  0015E8  BE3D               	btfsc	___awmod@dividend,7,c
 15893  0015EA  063E               	decf	___awmod@dividend+1,f,c
 15894  0015EC  EC08  F021         	call	___awmod	;wreg free
 15895  0015F0  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15896  0015F4  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15897  0015F8  EC24  F026         	call	___wmul	;wreg free
 15898  0015FC  0E6D               	movlw	low __powers_
 15899  0015FE  2411               	addwf	?___wmul,w,c
 15900  001600  6EF6               	movwf	tblptrl,c
 15901  001602  0EFE               	movlw	high __powers_
 15902  001604  2012               	addwfc	?___wmul+1,w,c
 15903  001606  6EF7               	movwf	tblptrh,c
 15904  001608                     	if	0	;There are less than 3 active tblptr bytes
 15905  001608                     	endif
 15906  001608  0009               	tblrd		*+
 15907  00160A  CFF5 F022          	movff	tablat,___ftmul@f2
 15908  00160E  0009               	tblrd		*+
 15909  001610  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15910  001614  000A               	tblrd		*-
 15911  001616  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15912  00161A  ECE7  F017         	call	___ftmul	;wreg free
 15913  00161E                     L18:
 15914  00161E  C01F  F043         	movff	?___ftmul,?_scale
 15915  001622  C020  F044         	movff	?___ftmul+1,?_scale+1
 15916  001626  C021  F045         	movff	?___ftmul+2,?_scale+2
 15917  00162A  D013               	goto	l1425
 15918  00162C  D000               	goto	l9266
 15919  00162E                     l9266:
 15920                           
 15921                           ;doprnt.c: 440: return _powers_[scl];
 15922  00162E  5049               	movf	scale@scl,w,c
 15923  001630  0D03               	mullw	3
 15924  001632  0E6D               	movlw	low __powers_
 15925  001634  24F3               	addwf	prodl,w,c
 15926  001636  6EF6               	movwf	tblptrl,c
 15927  001638  0EFE               	movlw	high __powers_
 15928  00163A                     L17:
 15929  00163A  20F4               	addwfc	prodh,w,c
 15930  00163C  6EF7               	movwf	tblptrh,c
 15931  00163E                     	if	0	;There are less than 3 active tblptr bytes
 15932  00163E                     	endif
 15933  00163E  0009               	tblrd		*+
 15934  001640  CFF5 F043          	movff	tablat,?_scale
 15935  001644  0009               	tblrd		*+
 15936  001646  CFF5 F044          	movff	tablat,?_scale+1
 15937  00164A  000A               	tblrd		*-
 15938  00164C  CFF5 F045          	movff	tablat,?_scale+2
 15939  001650  D000               	goto	l1425
 15940  001652                     l1425:
 15941  001652  0012               	return		;funcret
 15942  001654                     __end_of_scale:
 15943                           	opt stack 0
 15944                           tblptru	equ	0xFF8
 15945                           tblptrh	equ	0xFF7
 15946                           tblptrl	equ	0xFF6
 15947                           tablat	equ	0xFF5
 15948                           prodh	equ	0xFF4
 15949                           prodl	equ	0xFF3
 15950                           intcon	equ	0xFF2
 15951                           intcon2	equ	0xFF1
 15952                           postinc0	equ	0xFEE
 15953                           wreg	equ	0xFE8
 15954                           postdec1	equ	0xFE5
 15955                           fsr1l	equ	0xFE1
 15956                           indf2	equ	0xFDF
 15957                           postinc2	equ	0xFDE
 15958                           postdec2	equ	0xFDD
 15959                           fsr2h	equ	0xFDA
 15960                           fsr2l	equ	0xFD9
 15961                           status	equ	0xFD8
 15962                           
 15963 ;; *************** function _putch *****************
 15964 ;; Defined at:
 15965 ;;		line 78 in file "Main.c"
 15966 ;; Parameters:    Size  Location     Type
 15967 ;;  c               1    wreg     unsigned char 
 15968 ;; Auto vars:     Size  Location     Type
 15969 ;;  c               1   16[COMRAM] unsigned char 
 15970 ;; Return value:  Size  Location     Type
 15971 ;;		None               void
 15972 ;; Registers used:
 15973 ;;		wreg
 15974 ;; Tracked objects:
 15975 ;;		On entry : 0/0
 15976 ;;		On exit  : 0/0
 15977 ;;		Unchanged: 0/0
 15978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15983 ;;Total ram usage:        1 bytes
 15984 ;; Hardware stack levels used:    1
 15985 ;; Hardware stack levels required when called:    2
 15986 ;; This function calls:
 15987 ;;		Nothing
 15988 ;; This function is called by:
 15989 ;;		_printf
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           	psect	text73
 15994  005032                     __ptext73:
 15995                           	opt stack 0
 15996  005032                     _putch:
 15997                           	opt stack 27
 15998                           
 15999                           ;incstack = 0
 16000                           ;putch@c stored from wreg
 16001  005032  6E11               	movwf	putch@c,c
 16002                           
 16003                           ;Main.c: 80: while (!TRMT);
 16004  005034  D000               	goto	l515
 16005  005036                     l515:
 16006  005036  A2AC               	btfss	4012,1,c	;volatile
 16007  005038  D7FE               	goto	l515
 16008                           
 16009                           ;Main.c: 81: TXREG = c;
 16010  00503A  C011  FFAD         	movff	putch@c,4013	;volatile
 16011  00503E  0012               	return		;funcret
 16012  005040                     __end_of_putch:
 16013                           	opt stack 0
 16014                           tblptru	equ	0xFF8
 16015                           tblptrh	equ	0xFF7
 16016                           tblptrl	equ	0xFF6
 16017                           tablat	equ	0xFF5
 16018                           prodh	equ	0xFF4
 16019                           prodl	equ	0xFF3
 16020                           intcon	equ	0xFF2
 16021                           intcon2	equ	0xFF1
 16022                           postinc0	equ	0xFEE
 16023                           wreg	equ	0xFE8
 16024                           postdec1	equ	0xFE5
 16025                           fsr1l	equ	0xFE1
 16026                           indf2	equ	0xFDF
 16027                           postinc2	equ	0xFDE
 16028                           postdec2	equ	0xFDD
 16029                           fsr2h	equ	0xFDA
 16030                           fsr2l	equ	0xFD9
 16031                           status	equ	0xFD8
 16032                           
 16033 ;; *************** function _isdigit *****************
 16034 ;; Defined at:
 16035 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;  c               1    wreg     unsigned char 
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;  c               1   18[COMRAM] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;		None               void
 16042 ;; Registers used:
 16043 ;;		wreg, status,2, status,0
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16052 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16053 ;;Total ram usage:        3 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    2
 16056 ;; This function calls:
 16057 ;;		Nothing
 16058 ;; This function is called by:
 16059 ;;		_printf
 16060 ;; This function uses a non-reentrant model
 16061 ;;
 16062                           
 16063                           	psect	text74
 16064  004CE0                     __ptext74:
 16065                           	opt stack 0
 16066  004CE0                     _isdigit:
 16067                           	opt stack 27
 16068                           
 16069                           ;incstack = 0
 16070                           ;isdigit@c stored from wreg
 16071  004CE0  6E13               	movwf	isdigit@c,c
 16072  004CE2  0E00               	movlw	0
 16073  004CE4  6E12               	movwf	_isdigit$2691,c
 16074  004CE6  0E3A               	movlw	58
 16075  004CE8  6013               	cpfslt	isdigit@c,c
 16076  004CEA  D006               	goto	l9278
 16077  004CEC  0E2F               	movlw	47
 16078  004CEE  6413               	cpfsgt	isdigit@c,c
 16079  004CF0  D003               	goto	l9278
 16080  004CF2  0E01               	movlw	1
 16081  004CF4  6E12               	movwf	_isdigit$2691,c
 16082  004CF6  D000               	goto	l9278
 16083  004CF8                     l9278:
 16084  004CF8  C012  F011         	movff	_isdigit$2691,??_isdigit
 16085  004CFC  3011               	rrcf	??_isdigit,w,c
 16086  004CFE  D000               	goto	l2037
 16087  004D00                     l2037:
 16088  004D00  0012               	return		;funcret
 16089  004D02                     __end_of_isdigit:
 16090                           	opt stack 0
 16091                           tblptru	equ	0xFF8
 16092                           tblptrh	equ	0xFF7
 16093                           tblptrl	equ	0xFF6
 16094                           tablat	equ	0xFF5
 16095                           prodh	equ	0xFF4
 16096                           prodl	equ	0xFF3
 16097                           intcon	equ	0xFF2
 16098                           intcon2	equ	0xFF1
 16099                           postinc0	equ	0xFEE
 16100                           wreg	equ	0xFE8
 16101                           postdec1	equ	0xFE5
 16102                           fsr1l	equ	0xFE1
 16103                           indf2	equ	0xFDF
 16104                           postinc2	equ	0xFDE
 16105                           postdec2	equ	0xFDD
 16106                           fsr2h	equ	0xFDA
 16107                           fsr2l	equ	0xFD9
 16108                           status	equ	0xFD8
 16109                           
 16110 ;; *************** function _fround *****************
 16111 ;; Defined at:
 16112 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 16113 ;; Parameters:    Size  Location     Type
 16114 ;;  prec            1    wreg     unsigned char 
 16115 ;; Auto vars:     Size  Location     Type
 16116 ;;  prec            1   75[COMRAM] unsigned char 
 16117 ;; Return value:  Size  Location     Type
 16118 ;;                  3   66[COMRAM] unsigned char 
 16119 ;; Registers used:
 16120 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16121 ;; Tracked objects:
 16122 ;;		On entry : 0/0
 16123 ;;		On exit  : 0/0
 16124 ;;		Unchanged: 0/0
 16125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16126 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16127 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16129 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16130 ;;Total ram usage:       10 bytes
 16131 ;; Hardware stack levels used:    1
 16132 ;; Hardware stack levels required when called:    4
 16133 ;; This function calls:
 16134 ;;		___awdiv
 16135 ;;		___awmod
 16136 ;;		___ftmul
 16137 ;;		___wmul
 16138 ;; This function is called by:
 16139 ;;		_printf
 16140 ;; This function uses a non-reentrant model
 16141 ;;
 16142                           
 16143                           	psect	text75
 16144  0019D4                     __ptext75:
 16145                           	opt stack 0
 16146  0019D4                     _fround:
 16147                           	opt stack 25
 16148                           
 16149                           ;incstack = 0
 16150                           ;fround@prec stored from wreg
 16151  0019D4  6E4C               	movwf	fround@prec,c
 16152                           
 16153                           ;doprnt.c: 413: if(prec>=110)
 16154  0019D6  0E6D               	movlw	109
 16155  0019D8  644C               	cpfsgt	fround@prec,c
 16156  0019DA  D09B               	goto	l9220
 16157                           
 16158                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16159  0019DC  0E00               	movlw	0
 16160  0019DE  6E14               	movwf	___wmul@multiplicand+1,c
 16161  0019E0  0E03               	movlw	3
 16162  0019E2  6E13               	movwf	___wmul@multiplicand,c
 16163  0019E4  0E00               	movlw	0
 16164  0019E6  6E1A               	movwf	___awdiv@divisor+1,c
 16165  0019E8  0E0A               	movlw	10
 16166  0019EA  6E19               	movwf	___awdiv@divisor,c
 16167  0019EC  0E00               	movlw	0
 16168  0019EE  6E40               	movwf	___awmod@divisor+1,c
 16169  0019F0  0E64               	movlw	100
 16170  0019F2  6E3F               	movwf	___awmod@divisor,c
 16171  0019F4  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16172  0019F8  6A3E               	clrf	___awmod@dividend+1,c
 16173  0019FA  EC08  F021         	call	___awmod	;wreg free
 16174  0019FE  C03D  F017         	movff	?___awmod,___awdiv@dividend
 16175  001A02  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 16176  001A06  ECD0  F01E         	call	___awdiv	;wreg free
 16177  001A0A  0E09               	movlw	9
 16178  001A0C  2417               	addwf	?___awdiv,w,c
 16179  001A0E  6E11               	movwf	___wmul@multiplier,c
 16180  001A10  0E00               	movlw	0
 16181  001A12  2018               	addwfc	?___awdiv+1,w,c
 16182  001A14  6E12               	movwf	___wmul@multiplier+1,c
 16183  001A16  EC24  F026         	call	___wmul	;wreg free
 16184  001A1A  0E46               	movlw	low __npowers_
 16185  001A1C  2411               	addwf	?___wmul,w,c
 16186  001A1E  6EF6               	movwf	tblptrl,c
 16187  001A20  0EFE               	movlw	high __npowers_
 16188  001A22  2012               	addwfc	?___wmul+1,w,c
 16189  001A24  6EF7               	movwf	tblptrh,c
 16190  001A26                     	if	0	;There are less than 3 active tblptr bytes
 16191  001A26                     	endif
 16192  001A26  0009               	tblrd		*+
 16193  001A28  CFF5 F022          	movff	tablat,___ftmul@f2
 16194  001A2C  0009               	tblrd		*+
 16195  001A2E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16196  001A32  000A               	tblrd		*-
 16197  001A34  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16198  001A38  0E00               	movlw	0
 16199  001A3A  6E1A               	movwf	___awdiv@divisor+1,c
 16200  001A3C  0E64               	movlw	100
 16201  001A3E  6E19               	movwf	___awdiv@divisor,c
 16202  001A40  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16203  001A44  6A18               	clrf	___awdiv@dividend+1,c
 16204  001A46  ECD0  F01E         	call	___awdiv	;wreg free
 16205  001A4A  0E12               	movlw	18
 16206  001A4C  2417               	addwf	?___awdiv,w,c
 16207  001A4E  6E11               	movwf	___wmul@multiplier,c
 16208  001A50  0E00               	movlw	0
 16209  001A52  2018               	addwfc	?___awdiv+1,w,c
 16210  001A54  6E12               	movwf	___wmul@multiplier+1,c
 16211  001A56  0E00               	movlw	0
 16212  001A58  6E14               	movwf	___wmul@multiplicand+1,c
 16213  001A5A  0E03               	movlw	3
 16214  001A5C  6E13               	movwf	___wmul@multiplicand,c
 16215  001A5E  EC24  F026         	call	___wmul	;wreg free
 16216  001A62  0E46               	movlw	low __npowers_
 16217  001A64  2411               	addwf	?___wmul,w,c
 16218  001A66  6EF6               	movwf	tblptrl,c
 16219  001A68  0EFE               	movlw	high __npowers_
 16220  001A6A  2012               	addwfc	?___wmul+1,w,c
 16221  001A6C  6EF7               	movwf	tblptrh,c
 16222  001A6E                     	if	0	;There are less than 3 active tblptr bytes
 16223  001A6E                     	endif
 16224  001A6E  0009               	tblrd		*+
 16225  001A70  CFF5 F01F          	movff	tablat,___ftmul@f1
 16226  001A74  0009               	tblrd		*+
 16227  001A76  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16228  001A7A  000A               	tblrd		*-
 16229  001A7C  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16230  001A80  ECE7  F017         	call	___ftmul	;wreg free
 16231  001A84  C01F  F049         	movff	?___ftmul,_fround$3054
 16232  001A88  C020  F04A         	movff	?___ftmul+1,_fround$3054+1
 16233  001A8C  C021  F04B         	movff	?___ftmul+2,_fround$3054+2
 16234                           
 16235                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16236  001A90  0E00               	movlw	0
 16237  001A92  6E14               	movwf	___wmul@multiplicand+1,c
 16238  001A94  0E03               	movlw	3
 16239  001A96  6E13               	movwf	___wmul@multiplicand,c
 16240  001A98  0E00               	movlw	0
 16241  001A9A  6E40               	movwf	___awmod@divisor+1,c
 16242  001A9C  0E0A               	movlw	10
 16243  001A9E  6E3F               	movwf	___awmod@divisor,c
 16244  001AA0  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16245  001AA4  6A3E               	clrf	___awmod@dividend+1,c
 16246  001AA6  EC08  F021         	call	___awmod	;wreg free
 16247  001AAA  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16248  001AAE  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16249  001AB2  EC24  F026         	call	___wmul	;wreg free
 16250  001AB6  0E46               	movlw	low __npowers_
 16251  001AB8  2411               	addwf	?___wmul,w,c
 16252  001ABA  6EF6               	movwf	tblptrl,c
 16253  001ABC  0EFE               	movlw	high __npowers_
 16254  001ABE  2012               	addwfc	?___wmul+1,w,c
 16255  001AC0  6EF7               	movwf	tblptrh,c
 16256  001AC2                     	if	0	;There are less than 3 active tblptr bytes
 16257  001AC2                     	endif
 16258  001AC2  0009               	tblrd		*+
 16259  001AC4  CFF5 F022          	movff	tablat,___ftmul@f2
 16260  001AC8  0009               	tblrd		*+
 16261  001ACA  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16262  001ACE  000A               	tblrd		*-
 16263  001AD0  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16264  001AD4  C049  F01F         	movff	_fround$3054,___ftmul@f1
 16265  001AD8  C04A  F020         	movff	_fround$3054+1,___ftmul@f1+1
 16266  001ADC  C04B  F021         	movff	_fround$3054+2,___ftmul@f1+2
 16267  001AE0  ECE7  F017         	call	___ftmul	;wreg free
 16268  001AE4  C01F  F046         	movff	?___ftmul,_fround$3055
 16269  001AE8  C020  F047         	movff	?___ftmul+1,_fround$3055+1
 16270  001AEC  C021  F048         	movff	?___ftmul+2,_fround$3055+2
 16271                           
 16272                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16273  001AF0  C046  F01F         	movff	_fround$3055,___ftmul@f1
 16274  001AF4  C047  F020         	movff	_fround$3055+1,___ftmul@f1+1
 16275  001AF8  C048  F021         	movff	_fround$3055+2,___ftmul@f1+2
 16276  001AFC  0E00               	movlw	0
 16277  001AFE  6E22               	movwf	___ftmul@f2,c
 16278  001B00  0E00               	movlw	0
 16279  001B02  6E23               	movwf	___ftmul@f2+1,c
 16280  001B04  0E3F               	movlw	63
 16281  001B06  6E24               	movwf	___ftmul@f2+2,c
 16282  001B08  ECE7  F017         	call	___ftmul	;wreg free
 16283  001B0C  D07D               	goto	L20
 16284  001B0E  D083               	goto	l1418
 16285  001B10  D062               	goto	l9228
 16286  001B12                     l9220:
 16287                           
 16288                           ;doprnt.c: 415: else if(prec > 10)
 16289  001B12  0E0A               	movlw	10
 16290  001B14  644C               	cpfsgt	fround@prec,c
 16291  001B16  D05F               	goto	l9228
 16292                           
 16293                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16294  001B18  0E00               	movlw	0
 16295  001B1A  6E14               	movwf	___wmul@multiplicand+1,c
 16296  001B1C  0E03               	movlw	3
 16297  001B1E  6E13               	movwf	___wmul@multiplicand,c
 16298  001B20  0E00               	movlw	0
 16299  001B22  6E40               	movwf	___awmod@divisor+1,c
 16300  001B24  0E0A               	movlw	10
 16301  001B26  6E3F               	movwf	___awmod@divisor,c
 16302  001B28  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16303  001B2C  6A3E               	clrf	___awmod@dividend+1,c
 16304  001B2E  EC08  F021         	call	___awmod	;wreg free
 16305  001B32  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16306  001B36  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16307  001B3A  EC24  F026         	call	___wmul	;wreg free
 16308  001B3E  0E46               	movlw	low __npowers_
 16309  001B40  2411               	addwf	?___wmul,w,c
 16310  001B42  6EF6               	movwf	tblptrl,c
 16311  001B44  0EFE               	movlw	high __npowers_
 16312  001B46  2012               	addwfc	?___wmul+1,w,c
 16313  001B48  6EF7               	movwf	tblptrh,c
 16314  001B4A                     	if	0	;There are less than 3 active tblptr bytes
 16315  001B4A                     	endif
 16316  001B4A  0009               	tblrd		*+
 16317  001B4C  CFF5 F022          	movff	tablat,___ftmul@f2
 16318  001B50  0009               	tblrd		*+
 16319  001B52  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16320  001B56  000A               	tblrd		*-
 16321  001B58  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16322  001B5C  0E00               	movlw	0
 16323  001B5E  6E1A               	movwf	___awdiv@divisor+1,c
 16324  001B60  0E0A               	movlw	10
 16325  001B62  6E19               	movwf	___awdiv@divisor,c
 16326  001B64  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16327  001B68  6A18               	clrf	___awdiv@dividend+1,c
 16328  001B6A  ECD0  F01E         	call	___awdiv	;wreg free
 16329  001B6E  0E09               	movlw	9
 16330  001B70  2417               	addwf	?___awdiv,w,c
 16331  001B72  6E11               	movwf	___wmul@multiplier,c
 16332  001B74  0E00               	movlw	0
 16333  001B76  2018               	addwfc	?___awdiv+1,w,c
 16334  001B78  6E12               	movwf	___wmul@multiplier+1,c
 16335  001B7A  0E00               	movlw	0
 16336  001B7C  6E14               	movwf	___wmul@multiplicand+1,c
 16337  001B7E  0E03               	movlw	3
 16338  001B80  6E13               	movwf	___wmul@multiplicand,c
 16339  001B82  EC24  F026         	call	___wmul	;wreg free
 16340  001B86  0E46               	movlw	low __npowers_
 16341  001B88  2411               	addwf	?___wmul,w,c
 16342  001B8A  6EF6               	movwf	tblptrl,c
 16343  001B8C  0EFE               	movlw	high __npowers_
 16344  001B8E  2012               	addwfc	?___wmul+1,w,c
 16345  001B90  6EF7               	movwf	tblptrh,c
 16346  001B92                     	if	0	;There are less than 3 active tblptr bytes
 16347  001B92                     	endif
 16348  001B92  0009               	tblrd		*+
 16349  001B94  CFF5 F01F          	movff	tablat,___ftmul@f1
 16350  001B98  0009               	tblrd		*+
 16351  001B9A  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16352  001B9E  000A               	tblrd		*-
 16353  001BA0  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16354  001BA4  ECE7  F017         	call	___ftmul	;wreg free
 16355  001BA8  C01F  F049         	movff	?___ftmul,_fround$3054
 16356  001BAC  C020  F04A         	movff	?___ftmul+1,_fround$3054+1
 16357  001BB0  C021  F04B         	movff	?___ftmul+2,_fround$3054+2
 16358                           
 16359                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16360  001BB4  C049  F01F         	movff	_fround$3054,___ftmul@f1
 16361  001BB8  C04A  F020         	movff	_fround$3054+1,___ftmul@f1+1
 16362  001BBC  C04B  F021         	movff	_fround$3054+2,___ftmul@f1+2
 16363  001BC0  0E00               	movlw	0
 16364  001BC2  6E22               	movwf	___ftmul@f2,c
 16365  001BC4  0E00               	movlw	0
 16366  001BC6  6E23               	movwf	___ftmul@f2+1,c
 16367  001BC8  0E3F               	movlw	63
 16368  001BCA  6E24               	movwf	___ftmul@f2+2,c
 16369  001BCC  ECE7  F017         	call	___ftmul	;wreg free
 16370  001BD0  D01B               	goto	L20
 16371  001BD2  D021               	goto	l1418
 16372  001BD4  D000               	goto	l9228
 16373  001BD6                     l9228:
 16374                           
 16375                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16376  001BD6  504C               	movf	fround@prec,w,c
 16377  001BD8  0D03               	mullw	3
 16378  001BDA  0E46               	movlw	low __npowers_
 16379  001BDC  24F3               	addwf	prodl,w,c
 16380  001BDE  6EF6               	movwf	tblptrl,c
 16381  001BE0  0EFE               	movlw	high __npowers_
 16382  001BE2  20F4               	addwfc	prodh,w,c
 16383  001BE4  6EF7               	movwf	tblptrh,c
 16384  001BE6                     	if	0	;There are less than 3 active tblptr bytes
 16385  001BE6                     	endif
 16386  001BE6  0009               	tblrd		*+
 16387  001BE8  CFF5 F01F          	movff	tablat,___ftmul@f1
 16388  001BEC  0009               	tblrd		*+
 16389  001BEE  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16390  001BF2  000A               	tblrd		*-
 16391  001BF4  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16392  001BF8  0E00               	movlw	0
 16393  001BFA  6E22               	movwf	___ftmul@f2,c
 16394  001BFC  0E00               	movlw	0
 16395  001BFE  6E23               	movwf	___ftmul@f2+1,c
 16396  001C00  0E3F               	movlw	63
 16397  001C02  6E24               	movwf	___ftmul@f2+2,c
 16398  001C04  ECE7  F017         	call	___ftmul	;wreg free
 16399  001C08                     L20:
 16400  001C08  C01F  F043         	movff	?___ftmul,?_fround
 16401  001C0C  C020  F044         	movff	?___ftmul+1,?_fround+1
 16402  001C10  C021  F045         	movff	?___ftmul+2,?_fround+2
 16403  001C14  D000               	goto	l1418
 16404  001C16                     l1418:
 16405  001C16  0012               	return		;funcret
 16406  001C18                     __end_of_fround:
 16407                           	opt stack 0
 16408                           tblptru	equ	0xFF8
 16409                           tblptrh	equ	0xFF7
 16410                           tblptrl	equ	0xFF6
 16411                           tablat	equ	0xFF5
 16412                           prodh	equ	0xFF4
 16413                           prodl	equ	0xFF3
 16414                           intcon	equ	0xFF2
 16415                           intcon2	equ	0xFF1
 16416                           postinc0	equ	0xFEE
 16417                           wreg	equ	0xFE8
 16418                           postdec1	equ	0xFE5
 16419                           fsr1l	equ	0xFE1
 16420                           indf2	equ	0xFDF
 16421                           postinc2	equ	0xFDE
 16422                           postdec2	equ	0xFDD
 16423                           fsr2h	equ	0xFDA
 16424                           fsr2l	equ	0xFD9
 16425                           status	equ	0xFD8
 16426                           
 16427 ;; *************** function ___ftmul *****************
 16428 ;; Defined at:
 16429 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;  f1              3   30[COMRAM] float 
 16432 ;;  f2              3   33[COMRAM] float 
 16433 ;; Auto vars:     Size  Location     Type
 16434 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 16435 ;;  sign            1   44[COMRAM] unsigned char 
 16436 ;;  cntr            1   43[COMRAM] unsigned char 
 16437 ;;  exp             1   39[COMRAM] unsigned char 
 16438 ;; Return value:  Size  Location     Type
 16439 ;;                  3   30[COMRAM] float 
 16440 ;; Registers used:
 16441 ;;		wreg, status,2, status,0, cstack
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16447 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16448 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16449 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16450 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16451 ;;Total ram usage:       15 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    3
 16454 ;; This function calls:
 16455 ;;		___ftpack
 16456 ;; This function is called by:
 16457 ;;		_Update_Screen
 16458 ;;		_do_update_pwm
 16459 ;;		_fround
 16460 ;;		_scale
 16461 ;;		_printf
 16462 ;; This function uses a non-reentrant model
 16463 ;;
 16464                           
 16465                           	psect	text76
 16466  002FCE                     __ptext76:
 16467                           	opt stack 0
 16468  002FCE                     ___ftmul:
 16469                           	opt stack 25
 16470                           
 16471                           ;incstack = 0
 16472  002FCE  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 16473  002FD2  6A26               	clrf	(??___ftmul+1)& (0+255),c
 16474  002FD4  6A27               	clrf	(??___ftmul+2)& (0+255),c
 16475  002FD6  3420               	rlcf	___ftmul@f1+1,w,c
 16476  002FD8  3625               	rlcf	??___ftmul& (0+255),f,c
 16477  002FDA  E301               	bnc	u6991
 16478  002FDC  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 16479  002FDE                     u6991:
 16480  002FDE  5025               	movf	??___ftmul,w,c
 16481  002FE0  6E28               	movwf	___ftmul@exp,c
 16482  002FE2  5028               	movf	___ftmul@exp,w,c
 16483  002FE4  A4D8               	btfss	status,2,c
 16484  002FE6  D002               	goto	l8940
 16485  002FE8  D00E               	goto	l8942
 16486  002FEA  D06C               	goto	l2001
 16487  002FEC                     l8940:
 16488  002FEC  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 16489  002FF0  6A26               	clrf	(??___ftmul+1)& (0+255),c
 16490  002FF2  6A27               	clrf	(??___ftmul+2)& (0+255),c
 16491  002FF4  3423               	rlcf	___ftmul@f2+1,w,c
 16492  002FF6  3625               	rlcf	??___ftmul& (0+255),f,c
 16493  002FF8  E301               	bnc	u7011
 16494  002FFA  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 16495  002FFC                     u7011:
 16496  002FFC  5025               	movf	??___ftmul,w,c
 16497  002FFE  6E2D               	movwf	___ftmul@sign,c
 16498  003000  502D               	movf	___ftmul@sign,w,c
 16499  003002  A4D8               	btfss	status,2,c
 16500  003004  D007               	goto	l8946
 16501  003006                     l8942:
 16502  003006  0E00               	movlw	0
 16503  003008  6E1F               	movwf	?___ftmul,c
 16504  00300A  0E00               	movlw	0
 16505  00300C  6E20               	movwf	?___ftmul+1,c
 16506  00300E  0E00               	movlw	0
 16507  003010  6E21               	movwf	?___ftmul+2,c
 16508  003012  D058               	goto	l2001
 16509  003014                     l8946:
 16510  003014  502D               	movf	___ftmul@sign,w,c
 16511  003016  0F7B               	addlw	123
 16512  003018  2628               	addwf	___ftmul@exp,f,c
 16513  00301A  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 16514  00301E  5024               	movf	___ftmul@f2+2,w,c
 16515  003020  1A2D               	xorwf	___ftmul@sign,f,c
 16516  003022  0E80               	movlw	128
 16517  003024  162D               	andwf	___ftmul@sign,f,c
 16518  003026  8E20               	bsf	___ftmul@f1+1,7,c
 16519  003028  8E23               	bsf	___ftmul@f2+1,7,c
 16520  00302A  0EFF               	movlw	255
 16521  00302C  1622               	andwf	___ftmul@f2,f,c
 16522  00302E  0EFF               	movlw	255
 16523  003030  1623               	andwf	___ftmul@f2+1,f,c
 16524  003032  0E00               	movlw	0
 16525  003034  1624               	andwf	___ftmul@f2+2,f,c
 16526  003036  0E00               	movlw	0
 16527  003038  6E29               	movwf	___ftmul@f3_as_product,c
 16528  00303A  0E00               	movlw	0
 16529  00303C  6E2A               	movwf	___ftmul@f3_as_product+1,c
 16530  00303E  0E00               	movlw	0
 16531  003040  6E2B               	movwf	___ftmul@f3_as_product+2,c
 16532  003042  0E07               	movlw	7
 16533  003044  6E2C               	movwf	___ftmul@cntr,c
 16534  003046  D000               	goto	l8960
 16535  003048                     l8960:
 16536  003048  A01F               	btfss	___ftmul@f1,0,c
 16537  00304A  D007               	goto	l8964
 16538  00304C  5022               	movf	___ftmul@f2,w,c
 16539  00304E  2629               	addwf	___ftmul@f3_as_product,f,c
 16540  003050  5023               	movf	___ftmul@f2+1,w,c
 16541  003052  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 16542  003054  5024               	movf	___ftmul@f2+2,w,c
 16543  003056  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 16544  003058  D000               	goto	l8964
 16545  00305A                     l8964:
 16546  00305A  90D8               	bcf	status,0,c
 16547  00305C  3221               	rrcf	___ftmul@f1+2,f,c
 16548  00305E  3220               	rrcf	___ftmul@f1+1,f,c
 16549  003060  321F               	rrcf	___ftmul@f1,f,c
 16550  003062  90D8               	bcf	status,0,c
 16551  003064  3622               	rlcf	___ftmul@f2,f,c
 16552  003066  3623               	rlcf	___ftmul@f2+1,f,c
 16553  003068  3624               	rlcf	___ftmul@f2+2,f,c
 16554  00306A  2E2C               	decfsz	___ftmul@cntr,f,c
 16555  00306C  D7ED               	goto	l8960
 16556  00306E  D000               	goto	l8968
 16557  003070                     l8968:
 16558  003070  0E09               	movlw	9
 16559  003072  6E2C               	movwf	___ftmul@cntr,c
 16560  003074  D000               	goto	l8970
 16561  003076                     l8970:
 16562  003076  A01F               	btfss	___ftmul@f1,0,c
 16563  003078  D007               	goto	l8974
 16564  00307A  5022               	movf	___ftmul@f2,w,c
 16565  00307C  2629               	addwf	___ftmul@f3_as_product,f,c
 16566  00307E  5023               	movf	___ftmul@f2+1,w,c
 16567  003080  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 16568  003082  5024               	movf	___ftmul@f2+2,w,c
 16569  003084  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 16570  003086  D000               	goto	l8974
 16571  003088                     l8974:
 16572  003088  90D8               	bcf	status,0,c
 16573  00308A  3221               	rrcf	___ftmul@f1+2,f,c
 16574  00308C  3220               	rrcf	___ftmul@f1+1,f,c
 16575  00308E  321F               	rrcf	___ftmul@f1,f,c
 16576  003090  90D8               	bcf	status,0,c
 16577  003092  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 16578  003094  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 16579  003096  3229               	rrcf	___ftmul@f3_as_product,f,c
 16580  003098  2E2C               	decfsz	___ftmul@cntr,f,c
 16581  00309A  D7ED               	goto	l8970
 16582  00309C  D000               	goto	l8978
 16583  00309E                     l8978:
 16584  00309E  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 16585  0030A2  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16586  0030A6  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16587  0030AA  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 16588  0030AE  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 16589  0030B2  EC5E  F01C         	call	___ftpack	;wreg free
 16590  0030B6  C011  F01F         	movff	?___ftpack,?___ftmul
 16591  0030BA  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 16592  0030BE  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 16593  0030C2  D000               	goto	l2001
 16594  0030C4                     l2001:
 16595  0030C4  0012               	return		;funcret
 16596  0030C6                     __end_of___ftmul:
 16597                           	opt stack 0
 16598                           tblptru	equ	0xFF8
 16599                           tblptrh	equ	0xFF7
 16600                           tblptrl	equ	0xFF6
 16601                           tablat	equ	0xFF5
 16602                           prodh	equ	0xFF4
 16603                           prodl	equ	0xFF3
 16604                           intcon	equ	0xFF2
 16605                           intcon2	equ	0xFF1
 16606                           postinc0	equ	0xFEE
 16607                           wreg	equ	0xFE8
 16608                           postdec1	equ	0xFE5
 16609                           fsr1l	equ	0xFE1
 16610                           indf2	equ	0xFDF
 16611                           postinc2	equ	0xFDE
 16612                           postdec2	equ	0xFDD
 16613                           fsr2h	equ	0xFDA
 16614                           fsr2l	equ	0xFD9
 16615                           status	equ	0xFD8
 16616                           
 16617 ;; *************** function ___awmod *****************
 16618 ;; Defined at:
 16619 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16620 ;; Parameters:    Size  Location     Type
 16621 ;;  dividend        2   60[COMRAM] int 
 16622 ;;  divisor         2   62[COMRAM] int 
 16623 ;; Auto vars:     Size  Location     Type
 16624 ;;  sign            1   65[COMRAM] unsigned char 
 16625 ;;  counter         1   64[COMRAM] unsigned char 
 16626 ;; Return value:  Size  Location     Type
 16627 ;;                  2   60[COMRAM] int 
 16628 ;; Registers used:
 16629 ;;		wreg, status,2, status,0
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16639 ;;Total ram usage:        6 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    2
 16642 ;; This function calls:
 16643 ;;		Nothing
 16644 ;; This function is called by:
 16645 ;;		_Update_Screen
 16646 ;;		_Update_Setup_Alarm_Time_Screen
 16647 ;;		_Update_Setup_Fan_Screen
 16648 ;;		_Update_Setup_Time_Screen
 16649 ;;		_dec_2_bcd
 16650 ;;		_fround
 16651 ;;		_scale
 16652 ;; This function uses a non-reentrant model
 16653 ;;
 16654                           
 16655                           	psect	text77
 16656  004210                     __ptext77:
 16657                           	opt stack 0
 16658  004210                     ___awmod:
 16659                           	opt stack 26
 16660                           
 16661                           ;incstack = 0
 16662  004210  0E00               	movlw	0
 16663  004212  6E42               	movwf	___awmod@sign,c
 16664  004214  AE3E               	btfss	___awmod@dividend+1,7,c
 16665  004216  D007               	goto	l9034
 16666  004218  6C3D               	negf	___awmod@dividend,c
 16667  00421A  1E3E               	comf	___awmod@dividend+1,f,c
 16668  00421C  B0D8               	btfsc	status,0,c
 16669  00421E  2A3E               	incf	___awmod@dividend+1,f,c
 16670  004220  0E01               	movlw	1
 16671  004222  6E42               	movwf	___awmod@sign,c
 16672  004224  D000               	goto	l9034
 16673  004226                     l9034:
 16674  004226  AE40               	btfss	___awmod@divisor+1,7,c
 16675  004228  D005               	goto	l9038
 16676  00422A  6C3F               	negf	___awmod@divisor,c
 16677  00422C  1E40               	comf	___awmod@divisor+1,f,c
 16678  00422E  B0D8               	btfsc	status,0,c
 16679  004230  2A40               	incf	___awmod@divisor+1,f,c
 16680  004232  D000               	goto	l9038
 16681  004234                     l9038:
 16682  004234  503F               	movf	___awmod@divisor,w,c
 16683  004236  1040               	iorwf	___awmod@divisor+1,w,c
 16684  004238  B4D8               	btfsc	status,2,c
 16685  00423A  D01D               	goto	l9054
 16686  00423C  0E01               	movlw	1
 16687  00423E  6E41               	movwf	___awmod@counter,c
 16688  004240  D005               	goto	l9044
 16689  004242                     l9042:
 16690  004242  90D8               	bcf	status,0,c
 16691  004244  363F               	rlcf	___awmod@divisor,f,c
 16692  004246  3640               	rlcf	___awmod@divisor+1,f,c
 16693  004248  2A41               	incf	___awmod@counter,f,c
 16694  00424A  D000               	goto	l9044
 16695  00424C                     l9044:
 16696  00424C  BE40               	btfsc	___awmod@divisor+1,7,c
 16697  00424E  D002               	goto	l9046
 16698  004250  D7F8               	goto	l9042
 16699  004252  D000               	goto	l9046
 16700  004254                     l9046:
 16701  004254  503F               	movf	___awmod@divisor,w,c
 16702  004256  5C3D               	subwf	___awmod@dividend,w,c
 16703  004258  5040               	movf	___awmod@divisor+1,w,c
 16704  00425A  583E               	subwfb	___awmod@dividend+1,w,c
 16705  00425C  A0D8               	btfss	status,0,c
 16706  00425E  D005               	goto	l9050
 16707  004260  503F               	movf	___awmod@divisor,w,c
 16708  004262  5E3D               	subwf	___awmod@dividend,f,c
 16709  004264  5040               	movf	___awmod@divisor+1,w,c
 16710  004266  5A3E               	subwfb	___awmod@dividend+1,f,c
 16711  004268  D000               	goto	l9050
 16712  00426A                     l9050:
 16713  00426A  90D8               	bcf	status,0,c
 16714  00426C  3240               	rrcf	___awmod@divisor+1,f,c
 16715  00426E  323F               	rrcf	___awmod@divisor,f,c
 16716  004270  2E41               	decfsz	___awmod@counter,f,c
 16717  004272  D7F0               	goto	l9046
 16718  004274  D000               	goto	l9054
 16719  004276                     l9054:
 16720  004276  5042               	movf	___awmod@sign,w,c
 16721  004278  B4D8               	btfsc	status,2,c
 16722  00427A  D005               	goto	l9058
 16723  00427C  6C3D               	negf	___awmod@dividend,c
 16724  00427E  1E3E               	comf	___awmod@dividend+1,f,c
 16725  004280  B0D8               	btfsc	status,0,c
 16726  004282  2A3E               	incf	___awmod@dividend+1,f,c
 16727  004284  D000               	goto	l9058
 16728  004286                     l9058:
 16729  004286  C03D  F03D         	movff	___awmod@dividend,?___awmod
 16730  00428A  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 16731  00428E  D000               	goto	l1778
 16732  004290                     l1778:
 16733  004290  0012               	return		;funcret
 16734  004292                     __end_of___awmod:
 16735                           	opt stack 0
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           intcon2	equ	0xFF1
 16744                           postinc0	equ	0xFEE
 16745                           wreg	equ	0xFE8
 16746                           postdec1	equ	0xFE5
 16747                           fsr1l	equ	0xFE1
 16748                           indf2	equ	0xFDF
 16749                           postinc2	equ	0xFDE
 16750                           postdec2	equ	0xFDD
 16751                           fsr2h	equ	0xFDA
 16752                           fsr2l	equ	0xFD9
 16753                           status	equ	0xFD8
 16754                           
 16755 ;; *************** function ___awdiv *****************
 16756 ;; Defined at:
 16757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;  dividend        2   22[COMRAM] int 
 16760 ;;  divisor         2   24[COMRAM] int 
 16761 ;; Auto vars:     Size  Location     Type
 16762 ;;  quotient        2   28[COMRAM] int 
 16763 ;;  sign            1   27[COMRAM] unsigned char 
 16764 ;;  counter         1   26[COMRAM] unsigned char 
 16765 ;; Return value:  Size  Location     Type
 16766 ;;                  2   22[COMRAM] int 
 16767 ;; Registers used:
 16768 ;;		wreg, status,2, status,0
 16769 ;; Tracked objects:
 16770 ;;		On entry : 0/0
 16771 ;;		On exit  : 0/0
 16772 ;;		Unchanged: 0/0
 16773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16775 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16777 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16778 ;;Total ram usage:        8 bytes
 16779 ;; Hardware stack levels used:    1
 16780 ;; Hardware stack levels required when called:    2
 16781 ;; This function calls:
 16782 ;;		Nothing
 16783 ;; This function is called by:
 16784 ;;		_get_RPM
 16785 ;;		_main
 16786 ;;		_Update_Screen
 16787 ;;		_Update_Setup_Alarm_Time_Screen
 16788 ;;		_Update_Setup_Fan_Screen
 16789 ;;		_Update_Setup_Time_Screen
 16790 ;;		_dec_2_bcd
 16791 ;;		_fround
 16792 ;;		_scale
 16793 ;;		_printf
 16794 ;; This function uses a non-reentrant model
 16795 ;;
 16796                           
 16797                           	psect	text78
 16798  003DA0                     __ptext78:
 16799                           	opt stack 0
 16800  003DA0                     ___awdiv:
 16801                           	opt stack 26
 16802                           
 16803                           ;incstack = 0
 16804  003DA0  0E00               	movlw	0
 16805  003DA2  6E1C               	movwf	___awdiv@sign,c
 16806  003DA4  AE1A               	btfss	___awdiv@divisor+1,7,c
 16807  003DA6  D007               	goto	l8990
 16808  003DA8  6C19               	negf	___awdiv@divisor,c
 16809  003DAA  1E1A               	comf	___awdiv@divisor+1,f,c
 16810  003DAC  B0D8               	btfsc	status,0,c
 16811  003DAE  2A1A               	incf	___awdiv@divisor+1,f,c
 16812  003DB0  0E01               	movlw	1
 16813  003DB2  6E1C               	movwf	___awdiv@sign,c
 16814  003DB4  D000               	goto	l8990
 16815  003DB6                     l8990:
 16816  003DB6  AE18               	btfss	___awdiv@dividend+1,7,c
 16817  003DB8  D007               	goto	l8996
 16818  003DBA  6C17               	negf	___awdiv@dividend,c
 16819  003DBC  1E18               	comf	___awdiv@dividend+1,f,c
 16820  003DBE  B0D8               	btfsc	status,0,c
 16821  003DC0  2A18               	incf	___awdiv@dividend+1,f,c
 16822  003DC2  0E01               	movlw	1
 16823  003DC4  1A1C               	xorwf	___awdiv@sign,f,c
 16824  003DC6  D000               	goto	l8996
 16825  003DC8                     l8996:
 16826  003DC8  0E00               	movlw	0
 16827  003DCA  6E1E               	movwf	___awdiv@quotient+1,c
 16828  003DCC  0E00               	movlw	0
 16829  003DCE  6E1D               	movwf	___awdiv@quotient,c
 16830  003DD0  5019               	movf	___awdiv@divisor,w,c
 16831  003DD2  101A               	iorwf	___awdiv@divisor+1,w,c
 16832  003DD4  B4D8               	btfsc	status,2,c
 16833  003DD6  D021               	goto	l9018
 16834  003DD8  0E01               	movlw	1
 16835  003DDA  6E1B               	movwf	___awdiv@counter,c
 16836  003DDC  D005               	goto	l9004
 16837  003DDE                     l9002:
 16838  003DDE  90D8               	bcf	status,0,c
 16839  003DE0  3619               	rlcf	___awdiv@divisor,f,c
 16840  003DE2  361A               	rlcf	___awdiv@divisor+1,f,c
 16841  003DE4  2A1B               	incf	___awdiv@counter,f,c
 16842  003DE6  D000               	goto	l9004
 16843  003DE8                     l9004:
 16844  003DE8  BE1A               	btfsc	___awdiv@divisor+1,7,c
 16845  003DEA  D002               	goto	l9006
 16846  003DEC  D7F8               	goto	l9002
 16847  003DEE  D000               	goto	l9006
 16848  003DF0                     l9006:
 16849  003DF0  90D8               	bcf	status,0,c
 16850  003DF2  361D               	rlcf	___awdiv@quotient,f,c
 16851  003DF4  361E               	rlcf	___awdiv@quotient+1,f,c
 16852  003DF6  5019               	movf	___awdiv@divisor,w,c
 16853  003DF8  5C17               	subwf	___awdiv@dividend,w,c
 16854  003DFA  501A               	movf	___awdiv@divisor+1,w,c
 16855  003DFC  5818               	subwfb	___awdiv@dividend+1,w,c
 16856  003DFE  A0D8               	btfss	status,0,c
 16857  003E00  D006               	goto	l9014
 16858  003E02  5019               	movf	___awdiv@divisor,w,c
 16859  003E04  5E17               	subwf	___awdiv@dividend,f,c
 16860  003E06  501A               	movf	___awdiv@divisor+1,w,c
 16861  003E08  5A18               	subwfb	___awdiv@dividend+1,f,c
 16862  003E0A  801D               	bsf	___awdiv@quotient,0,c
 16863  003E0C  D000               	goto	l9014
 16864  003E0E                     l9014:
 16865  003E0E  90D8               	bcf	status,0,c
 16866  003E10  321A               	rrcf	___awdiv@divisor+1,f,c
 16867  003E12  3219               	rrcf	___awdiv@divisor,f,c
 16868  003E14  2E1B               	decfsz	___awdiv@counter,f,c
 16869  003E16  D7EC               	goto	l9006
 16870  003E18  D000               	goto	l9018
 16871  003E1A                     l9018:
 16872  003E1A  501C               	movf	___awdiv@sign,w,c
 16873  003E1C  B4D8               	btfsc	status,2,c
 16874  003E1E  D005               	goto	l9022
 16875  003E20  6C1D               	negf	___awdiv@quotient,c
 16876  003E22  1E1E               	comf	___awdiv@quotient+1,f,c
 16877  003E24  B0D8               	btfsc	status,0,c
 16878  003E26  2A1E               	incf	___awdiv@quotient+1,f,c
 16879  003E28  D000               	goto	l9022
 16880  003E2A                     l9022:
 16881  003E2A  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 16882  003E2E  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 16883  003E32  D000               	goto	l1765
 16884  003E34                     l1765:
 16885  003E34  0012               	return		;funcret
 16886  003E36                     __end_of___awdiv:
 16887                           	opt stack 0
 16888                           tblptru	equ	0xFF8
 16889                           tblptrh	equ	0xFF7
 16890                           tblptrl	equ	0xFF6
 16891                           tablat	equ	0xFF5
 16892                           prodh	equ	0xFF4
 16893                           prodl	equ	0xFF3
 16894                           intcon	equ	0xFF2
 16895                           intcon2	equ	0xFF1
 16896                           postinc0	equ	0xFEE
 16897                           wreg	equ	0xFE8
 16898                           postdec1	equ	0xFE5
 16899                           fsr1l	equ	0xFE1
 16900                           indf2	equ	0xFDF
 16901                           postinc2	equ	0xFDE
 16902                           postdec2	equ	0xFDD
 16903                           fsr2h	equ	0xFDA
 16904                           fsr2l	equ	0xFD9
 16905                           status	equ	0xFD8
 16906                           
 16907 ;; *************** function __tdiv_to_l_ *****************
 16908 ;; Defined at:
 16909 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 16910 ;; Parameters:    Size  Location     Type
 16911 ;;  f1              3   16[COMRAM] float 
 16912 ;;  f2              3   19[COMRAM] float 
 16913 ;; Auto vars:     Size  Location     Type
 16914 ;;  quot            4   25[COMRAM] unsigned long 
 16915 ;;  exp1            1   30[COMRAM] unsigned char 
 16916 ;;  cntr            1   29[COMRAM] unsigned char 
 16917 ;; Return value:  Size  Location     Type
 16918 ;;                  4   16[COMRAM] unsigned long 
 16919 ;; Registers used:
 16920 ;;		wreg, status,2, status,0
 16921 ;; Tracked objects:
 16922 ;;		On entry : 0/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16926 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16927 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16928 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16929 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16930 ;;Total ram usage:       15 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:    2
 16933 ;; This function calls:
 16934 ;;		Nothing
 16935 ;; This function is called by:
 16936 ;;		_printf
 16937 ;; This function uses a non-reentrant model
 16938 ;;
 16939                           
 16940                           	psect	text79
 16941  002CA8                     __ptext79:
 16942                           	opt stack 0
 16943  002CA8                     __tdiv_to_l_:
 16944                           	opt stack 27
 16945                           
 16946                           ;incstack = 0
 16947  002CA8  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16948  002CAC  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16949  002CAE  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16950  002CB0  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 16951  002CB2  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16952  002CB4  E301               	bnc	u7411
 16953  002CB6  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16954  002CB8                     u7411:
 16955  002CB8  5017               	movf	??__tdiv_to_l_,w,c
 16956  002CBA  6E1F               	movwf	__tdiv_to_l_@exp1,c
 16957  002CBC  501F               	movf	__tdiv_to_l_@exp1,w,c
 16958  002CBE  A4D8               	btfss	status,2,c
 16959  002CC0  D002               	goto	l9288
 16960  002CC2  D05D               	goto	l9330
 16961  002CC4  D078               	goto	l1977
 16962  002CC6                     l9288:
 16963  002CC6  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16964  002CCA  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16965  002CCC  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16966  002CCE  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 16967  002CD0  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16968  002CD2  E301               	bnc	u7431
 16969  002CD4  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16970  002CD6                     u7431:
 16971  002CD6  5017               	movf	??__tdiv_to_l_,w,c
 16972  002CD8  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16973  002CDA  501E               	movf	__tdiv_to_l_@cntr,w,c
 16974  002CDC  A4D8               	btfss	status,2,c
 16975  002CDE  D002               	goto	l9294
 16976  002CE0  D04E               	goto	l9330
 16977  002CE2  D069               	goto	l1977
 16978  002CE4                     l9294:
 16979  002CE4  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 16980  002CE6  0EFF               	movlw	255
 16981  002CE8  1611               	andwf	__tdiv_to_l_@f1,f,c
 16982  002CEA  0EFF               	movlw	255
 16983  002CEC  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 16984  002CEE  0E00               	movlw	0
 16985  002CF0  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 16986  002CF2  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 16987  002CF4  0EFF               	movlw	255
 16988  002CF6  1614               	andwf	__tdiv_to_l_@f2,f,c
 16989  002CF8  0EFF               	movlw	255
 16990  002CFA  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 16991  002CFC  0E00               	movlw	0
 16992  002CFE  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 16993  002D00  0E00               	movlw	0
 16994  002D02  6E1A               	movwf	__tdiv_to_l_@quot,c
 16995  002D04  0E00               	movlw	0
 16996  002D06  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 16997  002D08  0E00               	movlw	0
 16998  002D0A  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 16999  002D0C  0E00               	movlw	0
 17000  002D0E  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 17001  002D10  0E7F               	movlw	127
 17002  002D12  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 17003  002D14  501E               	movf	__tdiv_to_l_@cntr,w,c
 17004  002D16  0F98               	addlw	152
 17005  002D18  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 17006  002D1A  0E18               	movlw	24
 17007  002D1C  6E1E               	movwf	__tdiv_to_l_@cntr,c
 17008  002D1E                     l1979:
 17009  002D1E  90D8               	bcf	status,0,c
 17010  002D20  361A               	rlcf	__tdiv_to_l_@quot,f,c
 17011  002D22  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 17012  002D24  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 17013  002D26  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 17014  002D28  5014               	movf	__tdiv_to_l_@f2,w,c
 17015  002D2A  5C11               	subwf	__tdiv_to_l_@f1,w,c
 17016  002D2C  5015               	movf	__tdiv_to_l_@f2+1,w,c
 17017  002D2E  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 17018  002D30  5016               	movf	__tdiv_to_l_@f2+2,w,c
 17019  002D32  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 17020  002D34  A0D8               	btfss	status,0,c
 17021  002D36  D007               	goto	l1980
 17022  002D38  5014               	movf	__tdiv_to_l_@f2,w,c
 17023  002D3A  5E11               	subwf	__tdiv_to_l_@f1,f,c
 17024  002D3C  5015               	movf	__tdiv_to_l_@f2+1,w,c
 17025  002D3E  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 17026  002D40  5016               	movf	__tdiv_to_l_@f2+2,w,c
 17027  002D42  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 17028  002D44  801A               	bsf	__tdiv_to_l_@quot,0,c
 17029  002D46                     l1980:
 17030  002D46  90D8               	bcf	status,0,c
 17031  002D48  3611               	rlcf	__tdiv_to_l_@f1,f,c
 17032  002D4A  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 17033  002D4C  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 17034  002D4E  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 17035  002D50  D7E6               	goto	l1979
 17036  002D52  D000               	goto	l9316
 17037  002D54                     l9316:
 17038  002D54  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 17039  002D56  D010               	goto	l9328
 17040  002D58  501F               	movf	__tdiv_to_l_@exp1,w,c
 17041  002D5A  0A80               	xorlw	128
 17042  002D5C  0F97               	addlw	151
 17043  002D5E  B0D8               	btfsc	status,0,c
 17044  002D60  D003               	goto	l9324
 17045  002D62  D00D               	goto	l9330
 17046  002D64  D028               	goto	l1977
 17047  002D66  D000               	goto	l9324
 17048  002D68                     l9324:
 17049  002D68  90D8               	bcf	status,0,c
 17050  002D6A  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 17051  002D6C  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 17052  002D6E  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 17053  002D70  321A               	rrcf	__tdiv_to_l_@quot,f,c
 17054  002D72  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 17055  002D74  D7F9               	goto	l9324
 17056  002D76  D017               	goto	l1986
 17057  002D78                     l9328:
 17058  002D78  0E17               	movlw	23
 17059  002D7A  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 17060  002D7C  D011               	goto	l9336
 17061  002D7E                     l9330:
 17062  002D7E  0E00               	movlw	0
 17063  002D80  6E11               	movwf	?__tdiv_to_l_,c
 17064  002D82  0E00               	movlw	0
 17065  002D84  6E12               	movwf	?__tdiv_to_l_+1,c
 17066  002D86  0E00               	movlw	0
 17067  002D88  6E13               	movwf	?__tdiv_to_l_+2,c
 17068  002D8A  0E00               	movlw	0
 17069  002D8C  6E14               	movwf	?__tdiv_to_l_+3,c
 17070  002D8E  D013               	goto	l1977
 17071  002D90  D007               	goto	l9336
 17072  002D92                     l9334:
 17073  002D92  90D8               	bcf	status,0,c
 17074  002D94  361A               	rlcf	__tdiv_to_l_@quot,f,c
 17075  002D96  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 17076  002D98  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 17077  002D9A  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 17078  002D9C  061F               	decf	__tdiv_to_l_@exp1,f,c
 17079  002D9E  D000               	goto	l9336
 17080  002DA0                     l9336:
 17081  002DA0  501F               	movf	__tdiv_to_l_@exp1,w,c
 17082  002DA2  A4D8               	btfss	status,2,c
 17083  002DA4  D7F6               	goto	l9334
 17084  002DA6                     l1986:
 17085  002DA6  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 17086  002DAA  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 17087  002DAE  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 17088  002DB2  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 17089  002DB6                     l1977:
 17090  002DB6  0012               	return		;funcret
 17091  002DB8                     __end_of__tdiv_to_l_:
 17092                           	opt stack 0
 17093                           tblptru	equ	0xFF8
 17094                           tblptrh	equ	0xFF7
 17095                           tblptrl	equ	0xFF6
 17096                           tablat	equ	0xFF5
 17097                           prodh	equ	0xFF4
 17098                           prodl	equ	0xFF3
 17099                           intcon	equ	0xFF2
 17100                           intcon2	equ	0xFF1
 17101                           postinc0	equ	0xFEE
 17102                           wreg	equ	0xFE8
 17103                           postdec1	equ	0xFE5
 17104                           fsr1l	equ	0xFE1
 17105                           indf2	equ	0xFDF
 17106                           postinc2	equ	0xFDE
 17107                           postdec2	equ	0xFDD
 17108                           fsr2h	equ	0xFDA
 17109                           fsr2l	equ	0xFD9
 17110                           status	equ	0xFD8
 17111                           
 17112 ;; *************** function __div_to_l_ *****************
 17113 ;; Defined at:
 17114 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 17115 ;; Parameters:    Size  Location     Type
 17116 ;;  f1              3   16[COMRAM] unsigned long 
 17117 ;;  f2              3   19[COMRAM] unsigned long 
 17118 ;; Auto vars:     Size  Location     Type
 17119 ;;  quot            4   22[COMRAM] unsigned long 
 17120 ;;  exp1            1   27[COMRAM] unsigned char 
 17121 ;;  cntr            1   26[COMRAM] unsigned char 
 17122 ;; Return value:  Size  Location     Type
 17123 ;;                  4   16[COMRAM] unsigned long 
 17124 ;; Registers used:
 17125 ;;		wreg, status,2, status,0
 17126 ;; Tracked objects:
 17127 ;;		On entry : 0/0
 17128 ;;		On exit  : 0/0
 17129 ;;		Unchanged: 0/0
 17130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17131 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17132 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17134 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17135 ;;Total ram usage:       12 bytes
 17136 ;; Hardware stack levels used:    1
 17137 ;; Hardware stack levels required when called:    2
 17138 ;; This function calls:
 17139 ;;		Nothing
 17140 ;; This function is called by:
 17141 ;;		_printf
 17142 ;; This function uses a non-reentrant model
 17143 ;;
 17144                           
 17145                           	psect	text80
 17146  002EC4                     __ptext80:
 17147                           	opt stack 0
 17148  002EC4                     __div_to_l_:
 17149                           	opt stack 27
 17150                           
 17151                           ;incstack = 0
 17152  002EC4  3413               	rlcf	__div_to_l_@f1+2,w,c
 17153  002EC6  3414               	rlcf	__div_to_l_@f1+3,w,c
 17154  002EC8  6E1C               	movwf	__div_to_l_@exp1,c
 17155  002ECA  501C               	movf	__div_to_l_@exp1,w,c
 17156  002ECC  A4D8               	btfss	status,2,c
 17157  002ECE  D002               	goto	l9344
 17158  002ED0  D061               	goto	l9390
 17159  002ED2  D07C               	goto	l1856
 17160  002ED4                     l9344:
 17161  002ED4  3416               	rlcf	__div_to_l_@f2+2,w,c
 17162  002ED6  3417               	rlcf	__div_to_l_@f2+3,w,c
 17163  002ED8  6E1B               	movwf	__div_to_l_@cntr,c
 17164  002EDA  501B               	movf	__div_to_l_@cntr,w,c
 17165  002EDC  A4D8               	btfss	status,2,c
 17166  002EDE  D002               	goto	l9350
 17167  002EE0  D059               	goto	l9390
 17168  002EE2  D074               	goto	l1856
 17169  002EE4                     l9350:
 17170  002EE4  8E13               	bsf	__div_to_l_@f1+2,7,c
 17171  002EE6  0EFF               	movlw	255
 17172  002EE8  1611               	andwf	__div_to_l_@f1,f,c
 17173  002EEA  0EFF               	movlw	255
 17174  002EEC  1612               	andwf	__div_to_l_@f1+1,f,c
 17175  002EEE  0EFF               	movlw	255
 17176  002EF0  1613               	andwf	__div_to_l_@f1+2,f,c
 17177  002EF2  0E00               	movlw	0
 17178  002EF4  1614               	andwf	__div_to_l_@f1+3,f,c
 17179  002EF6  8E16               	bsf	__div_to_l_@f2+2,7,c
 17180  002EF8  0EFF               	movlw	255
 17181  002EFA  1614               	andwf	__div_to_l_@f2,f,c
 17182  002EFC  0EFF               	movlw	255
 17183  002EFE  1615               	andwf	__div_to_l_@f2+1,f,c
 17184  002F00  0EFF               	movlw	255
 17185  002F02  1616               	andwf	__div_to_l_@f2+2,f,c
 17186  002F04  0E00               	movlw	0
 17187  002F06  1617               	andwf	__div_to_l_@f2+3,f,c
 17188  002F08  0E00               	movlw	0
 17189  002F0A  6E17               	movwf	__div_to_l_@quot,c
 17190  002F0C  0E00               	movlw	0
 17191  002F0E  6E18               	movwf	__div_to_l_@quot+1,c
 17192  002F10  0E00               	movlw	0
 17193  002F12  6E19               	movwf	__div_to_l_@quot+2,c
 17194  002F14  0E00               	movlw	0
 17195  002F16  6E1A               	movwf	__div_to_l_@quot+3,c
 17196  002F18  0E7F               	movlw	127
 17197  002F1A  5E1C               	subwf	__div_to_l_@exp1,f,c
 17198  002F1C  501B               	movf	__div_to_l_@cntr,w,c
 17199  002F1E  0FA0               	addlw	160
 17200  002F20  5E1C               	subwf	__div_to_l_@exp1,f,c
 17201  002F22  0E20               	movlw	32
 17202  002F24  6E1B               	movwf	__div_to_l_@cntr,c
 17203  002F26  D000               	goto	l9364
 17204  002F28                     l9364:
 17205  002F28  90D8               	bcf	status,0,c
 17206  002F2A  3617               	rlcf	__div_to_l_@quot,f,c
 17207  002F2C  3618               	rlcf	__div_to_l_@quot+1,f,c
 17208  002F2E  3619               	rlcf	__div_to_l_@quot+2,f,c
 17209  002F30  361A               	rlcf	__div_to_l_@quot+3,f,c
 17210  002F32  5014               	movf	__div_to_l_@f2,w,c
 17211  002F34  5C11               	subwf	__div_to_l_@f1,w,c
 17212  002F36  5015               	movf	__div_to_l_@f2+1,w,c
 17213  002F38  5812               	subwfb	__div_to_l_@f1+1,w,c
 17214  002F3A  5016               	movf	__div_to_l_@f2+2,w,c
 17215  002F3C  5813               	subwfb	__div_to_l_@f1+2,w,c
 17216  002F3E  5017               	movf	__div_to_l_@f2+3,w,c
 17217  002F40  5814               	subwfb	__div_to_l_@f1+3,w,c
 17218  002F42  A0D8               	btfss	status,0,c
 17219  002F44  D00A               	goto	l9372
 17220  002F46  5014               	movf	__div_to_l_@f2,w,c
 17221  002F48  5E11               	subwf	__div_to_l_@f1,f,c
 17222  002F4A  5015               	movf	__div_to_l_@f2+1,w,c
 17223  002F4C  5A12               	subwfb	__div_to_l_@f1+1,f,c
 17224  002F4E  5016               	movf	__div_to_l_@f2+2,w,c
 17225  002F50  5A13               	subwfb	__div_to_l_@f1+2,f,c
 17226  002F52  5017               	movf	__div_to_l_@f2+3,w,c
 17227  002F54  5A14               	subwfb	__div_to_l_@f1+3,f,c
 17228  002F56  8017               	bsf	__div_to_l_@quot,0,c
 17229  002F58  D000               	goto	l9372
 17230  002F5A                     l9372:
 17231  002F5A  90D8               	bcf	status,0,c
 17232  002F5C  3611               	rlcf	__div_to_l_@f1,f,c
 17233  002F5E  3612               	rlcf	__div_to_l_@f1+1,f,c
 17234  002F60  3613               	rlcf	__div_to_l_@f1+2,f,c
 17235  002F62  3614               	rlcf	__div_to_l_@f1+3,f,c
 17236  002F64  2E1B               	decfsz	__div_to_l_@cntr,f,c
 17237  002F66  D7E0               	goto	l9364
 17238  002F68  D000               	goto	l9376
 17239  002F6A                     l9376:
 17240  002F6A  AE1C               	btfss	__div_to_l_@exp1,7,c
 17241  002F6C  D010               	goto	l9388
 17242  002F6E  501C               	movf	__div_to_l_@exp1,w,c
 17243  002F70  0A80               	xorlw	128
 17244  002F72  0F9F               	addlw	159
 17245  002F74  B0D8               	btfsc	status,0,c
 17246  002F76  D003               	goto	l9384
 17247  002F78  D00D               	goto	l9390
 17248  002F7A  D028               	goto	l1856
 17249  002F7C  D000               	goto	l9384
 17250  002F7E                     l9384:
 17251  002F7E  90D8               	bcf	status,0,c
 17252  002F80  321A               	rrcf	__div_to_l_@quot+3,f,c
 17253  002F82  3219               	rrcf	__div_to_l_@quot+2,f,c
 17254  002F84  3218               	rrcf	__div_to_l_@quot+1,f,c
 17255  002F86  3217               	rrcf	__div_to_l_@quot,f,c
 17256  002F88  3E1C               	incfsz	__div_to_l_@exp1,f,c
 17257  002F8A  D7F9               	goto	l9384
 17258  002F8C  D017               	goto	l1865
 17259  002F8E                     l9388:
 17260  002F8E  0E1F               	movlw	31
 17261  002F90  641C               	cpfsgt	__div_to_l_@exp1,c
 17262  002F92  D011               	goto	l9396
 17263  002F94                     l9390:
 17264  002F94  0E00               	movlw	0
 17265  002F96  6E11               	movwf	?__div_to_l_,c
 17266  002F98  0E00               	movlw	0
 17267  002F9A  6E12               	movwf	?__div_to_l_+1,c
 17268  002F9C  0E00               	movlw	0
 17269  002F9E  6E13               	movwf	?__div_to_l_+2,c
 17270  002FA0  0E00               	movlw	0
 17271  002FA2  6E14               	movwf	?__div_to_l_+3,c
 17272  002FA4  D013               	goto	l1856
 17273  002FA6  D007               	goto	l9396
 17274  002FA8                     l9394:
 17275  002FA8  90D8               	bcf	status,0,c
 17276  002FAA  3617               	rlcf	__div_to_l_@quot,f,c
 17277  002FAC  3618               	rlcf	__div_to_l_@quot+1,f,c
 17278  002FAE  3619               	rlcf	__div_to_l_@quot+2,f,c
 17279  002FB0  361A               	rlcf	__div_to_l_@quot+3,f,c
 17280  002FB2  061C               	decf	__div_to_l_@exp1,f,c
 17281  002FB4  D000               	goto	l9396
 17282  002FB6                     l9396:
 17283  002FB6  501C               	movf	__div_to_l_@exp1,w,c
 17284  002FB8  A4D8               	btfss	status,2,c
 17285  002FBA  D7F6               	goto	l9394
 17286  002FBC                     l1865:
 17287  002FBC  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 17288  002FC0  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 17289  002FC4  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 17290  002FC8  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 17291  002FCC                     l1856:
 17292  002FCC  0012               	return		;funcret
 17293  002FCE                     __end_of__div_to_l_:
 17294                           	opt stack 0
 17295                           tblptru	equ	0xFF8
 17296                           tblptrh	equ	0xFF7
 17297                           tblptrl	equ	0xFF6
 17298                           tablat	equ	0xFF5
 17299                           prodh	equ	0xFF4
 17300                           prodl	equ	0xFF3
 17301                           intcon	equ	0xFF2
 17302                           intcon2	equ	0xFF1
 17303                           postinc0	equ	0xFEE
 17304                           wreg	equ	0xFE8
 17305                           postdec1	equ	0xFE5
 17306                           fsr1l	equ	0xFE1
 17307                           indf2	equ	0xFDF
 17308                           postinc2	equ	0xFDE
 17309                           postdec2	equ	0xFDD
 17310                           fsr2h	equ	0xFDA
 17311                           fsr2l	equ	0xFD9
 17312                           status	equ	0xFD8
 17313                           
 17314 ;; *************** function ___lltoft *****************
 17315 ;; Defined at:
 17316 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 17317 ;; Parameters:    Size  Location     Type
 17318 ;;  c               4   24[COMRAM] unsigned long 
 17319 ;; Auto vars:     Size  Location     Type
 17320 ;;  exp             1   32[COMRAM] unsigned char 
 17321 ;; Return value:  Size  Location     Type
 17322 ;;                  3   24[COMRAM] float 
 17323 ;; Registers used:
 17324 ;;		wreg, status,2, status,0, cstack
 17325 ;; Tracked objects:
 17326 ;;		On entry : 0/0
 17327 ;;		On exit  : 0/0
 17328 ;;		Unchanged: 0/0
 17329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17332 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;Total ram usage:        9 bytes
 17335 ;; Hardware stack levels used:    1
 17336 ;; Hardware stack levels required when called:    3
 17337 ;; This function calls:
 17338 ;;		___ftpack
 17339 ;; This function is called by:
 17340 ;;		_printf
 17341 ;; This function uses a non-reentrant model
 17342 ;;
 17343                           
 17344                           	psect	text81
 17345  0045D4                     __ptext81:
 17346                           	opt stack 0
 17347  0045D4                     ___lltoft:
 17348                           	opt stack 26
 17349                           
 17350                           ;incstack = 0
 17351  0045D4  0E8E               	movlw	142
 17352  0045D6  6E21               	movwf	___lltoft@exp,c
 17353  0045D8  D007               	goto	l9516
 17354  0045DA                     l9514:
 17355  0045DA  90D8               	bcf	status,0,c
 17356  0045DC  321C               	rrcf	___lltoft@c+3,f,c
 17357  0045DE  321B               	rrcf	___lltoft@c+2,f,c
 17358  0045E0  321A               	rrcf	___lltoft@c+1,f,c
 17359  0045E2  3219               	rrcf	___lltoft@c,f,c
 17360  0045E4  2A21               	incf	___lltoft@exp,f,c
 17361  0045E6  D000               	goto	l9516
 17362  0045E8                     l9516:
 17363  0045E8  0E00               	movlw	0
 17364  0045EA  1419               	andwf	___lltoft@c,w,c
 17365  0045EC  6E1D               	movwf	??___lltoft& (0+255),c
 17366  0045EE  0E00               	movlw	0
 17367  0045F0  141A               	andwf	___lltoft@c+1,w,c
 17368  0045F2  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 17369  0045F4  0E00               	movlw	0
 17370  0045F6  141B               	andwf	___lltoft@c+2,w,c
 17371  0045F8  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 17372  0045FA  0EFF               	movlw	255
 17373  0045FC  141C               	andwf	___lltoft@c+3,w,c
 17374  0045FE  6E20               	movwf	(??___lltoft+3)& (0+255),c
 17375  004600  501D               	movf	??___lltoft,w,c
 17376  004602  101E               	iorwf	??___lltoft+1,w,c
 17377  004604  101F               	iorwf	??___lltoft+2,w,c
 17378  004606  1020               	iorwf	??___lltoft+3,w,c
 17379  004608  A4D8               	btfss	status,2,c
 17380  00460A  D7E7               	goto	l9514
 17381  00460C  C019  F011         	movff	___lltoft@c,___ftpack@arg
 17382  004610  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 17383  004614  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 17384  004618  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 17385  00461C  0E00               	movlw	0
 17386  00461E  6E15               	movwf	___ftpack@sign,c
 17387  004620  EC5E  F01C         	call	___ftpack	;wreg free
 17388  004624  C011  F019         	movff	?___ftpack,?___lltoft
 17389  004628  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 17390  00462C  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 17391  004630  D000               	goto	l2096
 17392  004632                     l2096:
 17393  004632  0012               	return		;funcret
 17394  004634                     __end_of___lltoft:
 17395                           	opt stack 0
 17396                           tblptru	equ	0xFF8
 17397                           tblptrh	equ	0xFF7
 17398                           tblptrl	equ	0xFF6
 17399                           tablat	equ	0xFF5
 17400                           prodh	equ	0xFF4
 17401                           prodl	equ	0xFF3
 17402                           intcon	equ	0xFF2
 17403                           intcon2	equ	0xFF1
 17404                           postinc0	equ	0xFEE
 17405                           wreg	equ	0xFE8
 17406                           postdec1	equ	0xFE5
 17407                           fsr1l	equ	0xFE1
 17408                           indf2	equ	0xFDF
 17409                           postinc2	equ	0xFDE
 17410                           postdec2	equ	0xFDD
 17411                           fsr2h	equ	0xFDA
 17412                           fsr2l	equ	0xFD9
 17413                           status	equ	0xFD8
 17414                           
 17415 ;; *************** function ___llmod *****************
 17416 ;; Defined at:
 17417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 17418 ;; Parameters:    Size  Location     Type
 17419 ;;  dividend        4   29[COMRAM] unsigned long 
 17420 ;;  divisor         4   33[COMRAM] unsigned long 
 17421 ;; Auto vars:     Size  Location     Type
 17422 ;;  counter         1   37[COMRAM] unsigned char 
 17423 ;; Return value:  Size  Location     Type
 17424 ;;                  4   29[COMRAM] unsigned long 
 17425 ;; Registers used:
 17426 ;;		wreg, status,2, status,0
 17427 ;; Tracked objects:
 17428 ;;		On entry : 0/0
 17429 ;;		On exit  : 0/0
 17430 ;;		Unchanged: 0/0
 17431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17432 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17433 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17435 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17436 ;;Total ram usage:        9 bytes
 17437 ;; Hardware stack levels used:    1
 17438 ;; Hardware stack levels required when called:    2
 17439 ;; This function calls:
 17440 ;;		Nothing
 17441 ;; This function is called by:
 17442 ;;		_printf
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           	psect	text82
 17447  004302                     __ptext82:
 17448                           	opt stack 0
 17449  004302                     ___llmod:
 17450                           	opt stack 27
 17451                           
 17452                           ;incstack = 0
 17453  004302  5022               	movf	___llmod@divisor,w,c
 17454  004304  1023               	iorwf	___llmod@divisor+1,w,c
 17455  004306  1024               	iorwf	___llmod@divisor+2,w,c
 17456  004308  1025               	iorwf	___llmod@divisor+3,w,c
 17457  00430A  B4D8               	btfsc	status,2,c
 17458  00430C  D029               	goto	l2076
 17459  00430E  0E01               	movlw	1
 17460  004310  6E26               	movwf	___llmod@counter,c
 17461  004312  D007               	goto	l9502
 17462  004314                     l9500:
 17463  004314  90D8               	bcf	status,0,c
 17464  004316  3622               	rlcf	___llmod@divisor,f,c
 17465  004318  3623               	rlcf	___llmod@divisor+1,f,c
 17466  00431A  3624               	rlcf	___llmod@divisor+2,f,c
 17467  00431C  3625               	rlcf	___llmod@divisor+3,f,c
 17468  00431E  2A26               	incf	___llmod@counter,f,c
 17469  004320  D000               	goto	l9502
 17470  004322                     l9502:
 17471  004322  BE25               	btfsc	___llmod@divisor+3,7,c
 17472  004324  D002               	goto	l9504
 17473  004326  D7F6               	goto	l9500
 17474  004328  D000               	goto	l9504
 17475  00432A                     l9504:
 17476  00432A  5022               	movf	___llmod@divisor,w,c
 17477  00432C  5C1E               	subwf	___llmod@dividend,w,c
 17478  00432E  5023               	movf	___llmod@divisor+1,w,c
 17479  004330  581F               	subwfb	___llmod@dividend+1,w,c
 17480  004332  5024               	movf	___llmod@divisor+2,w,c
 17481  004334  5820               	subwfb	___llmod@dividend+2,w,c
 17482  004336  5025               	movf	___llmod@divisor+3,w,c
 17483  004338  5821               	subwfb	___llmod@dividend+3,w,c
 17484  00433A  A0D8               	btfss	status,0,c
 17485  00433C  D009               	goto	l9508
 17486  00433E  5022               	movf	___llmod@divisor,w,c
 17487  004340  5E1E               	subwf	___llmod@dividend,f,c
 17488  004342  5023               	movf	___llmod@divisor+1,w,c
 17489  004344  5A1F               	subwfb	___llmod@dividend+1,f,c
 17490  004346  5024               	movf	___llmod@divisor+2,w,c
 17491  004348  5A20               	subwfb	___llmod@dividend+2,f,c
 17492  00434A  5025               	movf	___llmod@divisor+3,w,c
 17493  00434C  5A21               	subwfb	___llmod@dividend+3,f,c
 17494  00434E  D000               	goto	l9508
 17495  004350                     l9508:
 17496  004350  90D8               	bcf	status,0,c
 17497  004352  3225               	rrcf	___llmod@divisor+3,f,c
 17498  004354  3224               	rrcf	___llmod@divisor+2,f,c
 17499  004356  3223               	rrcf	___llmod@divisor+1,f,c
 17500  004358  3222               	rrcf	___llmod@divisor,f,c
 17501  00435A  2E26               	decfsz	___llmod@counter,f,c
 17502  00435C  D7E6               	goto	l9504
 17503  00435E  D000               	goto	l2076
 17504  004360                     l2076:
 17505  004360  C01E  F01E         	movff	___llmod@dividend,?___llmod
 17506  004364  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 17507  004368  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 17508  00436C  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 17509  004370  0012               	return		;funcret
 17510  004372                     __end_of___llmod:
 17511                           	opt stack 0
 17512                           tblptru	equ	0xFF8
 17513                           tblptrh	equ	0xFF7
 17514                           tblptrl	equ	0xFF6
 17515                           tablat	equ	0xFF5
 17516                           prodh	equ	0xFF4
 17517                           prodl	equ	0xFF3
 17518                           intcon	equ	0xFF2
 17519                           intcon2	equ	0xFF1
 17520                           postinc0	equ	0xFEE
 17521                           wreg	equ	0xFE8
 17522                           postdec1	equ	0xFE5
 17523                           fsr1l	equ	0xFE1
 17524                           indf2	equ	0xFDF
 17525                           postinc2	equ	0xFDE
 17526                           postdec2	equ	0xFDD
 17527                           fsr2h	equ	0xFDA
 17528                           fsr2l	equ	0xFD9
 17529                           status	equ	0xFD8
 17530                           
 17531 ;; *************** function ___lldiv *****************
 17532 ;; Defined at:
 17533 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 17534 ;; Parameters:    Size  Location     Type
 17535 ;;  dividend        4   16[COMRAM] unsigned long 
 17536 ;;  divisor         4   20[COMRAM] unsigned long 
 17537 ;; Auto vars:     Size  Location     Type
 17538 ;;  quotient        4   24[COMRAM] unsigned long 
 17539 ;;  counter         1   28[COMRAM] unsigned char 
 17540 ;; Return value:  Size  Location     Type
 17541 ;;                  4   16[COMRAM] unsigned long 
 17542 ;; Registers used:
 17543 ;;		wreg, status,2, status,0
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17549 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17550 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17552 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17553 ;;Total ram usage:       13 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    2
 17556 ;; This function calls:
 17557 ;;		Nothing
 17558 ;; This function is called by:
 17559 ;;		_printf
 17560 ;; This function uses a non-reentrant model
 17561 ;;
 17562                           
 17563                           	psect	text83
 17564  003FF4                     __ptext83:
 17565                           	opt stack 0
 17566  003FF4                     ___lldiv:
 17567                           	opt stack 27
 17568                           
 17569                           ;incstack = 0
 17570  003FF4  0E00               	movlw	0
 17571  003FF6  6E19               	movwf	___lldiv@quotient,c
 17572  003FF8  0E00               	movlw	0
 17573  003FFA  6E1A               	movwf	___lldiv@quotient+1,c
 17574  003FFC  0E00               	movlw	0
 17575  003FFE  6E1B               	movwf	___lldiv@quotient+2,c
 17576  004000  0E00               	movlw	0
 17577  004002  6E1C               	movwf	___lldiv@quotient+3,c
 17578  004004  5015               	movf	___lldiv@divisor,w,c
 17579  004006  1016               	iorwf	___lldiv@divisor+1,w,c
 17580  004008  1017               	iorwf	___lldiv@divisor+2,w,c
 17581  00400A  1018               	iorwf	___lldiv@divisor+3,w,c
 17582  00400C  B4D8               	btfsc	status,2,c
 17583  00400E  D02F               	goto	l2066
 17584  004010  0E01               	movlw	1
 17585  004012  6E1D               	movwf	___lldiv@counter,c
 17586  004014  D007               	goto	l9482
 17587  004016                     l9480:
 17588  004016  90D8               	bcf	status,0,c
 17589  004018  3615               	rlcf	___lldiv@divisor,f,c
 17590  00401A  3616               	rlcf	___lldiv@divisor+1,f,c
 17591  00401C  3617               	rlcf	___lldiv@divisor+2,f,c
 17592  00401E  3618               	rlcf	___lldiv@divisor+3,f,c
 17593  004020  2A1D               	incf	___lldiv@counter,f,c
 17594  004022  D000               	goto	l9482
 17595  004024                     l9482:
 17596  004024  BE18               	btfsc	___lldiv@divisor+3,7,c
 17597  004026  D002               	goto	l9484
 17598  004028  D7F6               	goto	l9480
 17599  00402A  D000               	goto	l9484
 17600  00402C                     l9484:
 17601  00402C  90D8               	bcf	status,0,c
 17602  00402E  3619               	rlcf	___lldiv@quotient,f,c
 17603  004030  361A               	rlcf	___lldiv@quotient+1,f,c
 17604  004032  361B               	rlcf	___lldiv@quotient+2,f,c
 17605  004034  361C               	rlcf	___lldiv@quotient+3,f,c
 17606  004036  5015               	movf	___lldiv@divisor,w,c
 17607  004038  5C11               	subwf	___lldiv@dividend,w,c
 17608  00403A  5016               	movf	___lldiv@divisor+1,w,c
 17609  00403C  5812               	subwfb	___lldiv@dividend+1,w,c
 17610  00403E  5017               	movf	___lldiv@divisor+2,w,c
 17611  004040  5813               	subwfb	___lldiv@dividend+2,w,c
 17612  004042  5018               	movf	___lldiv@divisor+3,w,c
 17613  004044  5814               	subwfb	___lldiv@dividend+3,w,c
 17614  004046  A0D8               	btfss	status,0,c
 17615  004048  D00A               	goto	l9492
 17616  00404A  5015               	movf	___lldiv@divisor,w,c
 17617  00404C  5E11               	subwf	___lldiv@dividend,f,c
 17618  00404E  5016               	movf	___lldiv@divisor+1,w,c
 17619  004050  5A12               	subwfb	___lldiv@dividend+1,f,c
 17620  004052  5017               	movf	___lldiv@divisor+2,w,c
 17621  004054  5A13               	subwfb	___lldiv@dividend+2,f,c
 17622  004056  5018               	movf	___lldiv@divisor+3,w,c
 17623  004058  5A14               	subwfb	___lldiv@dividend+3,f,c
 17624  00405A  8019               	bsf	___lldiv@quotient,0,c
 17625  00405C  D000               	goto	l9492
 17626  00405E                     l9492:
 17627  00405E  90D8               	bcf	status,0,c
 17628  004060  3218               	rrcf	___lldiv@divisor+3,f,c
 17629  004062  3217               	rrcf	___lldiv@divisor+2,f,c
 17630  004064  3216               	rrcf	___lldiv@divisor+1,f,c
 17631  004066  3215               	rrcf	___lldiv@divisor,f,c
 17632  004068  2E1D               	decfsz	___lldiv@counter,f,c
 17633  00406A  D7E0               	goto	l9484
 17634  00406C  D000               	goto	l2066
 17635  00406E                     l2066:
 17636  00406E  C019  F011         	movff	___lldiv@quotient,?___lldiv
 17637  004072  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 17638  004076  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 17639  00407A  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 17640  00407E  0012               	return		;funcret
 17641  004080                     __end_of___lldiv:
 17642                           	opt stack 0
 17643                           tblptru	equ	0xFF8
 17644                           tblptrh	equ	0xFF7
 17645                           tblptrl	equ	0xFF6
 17646                           tablat	equ	0xFF5
 17647                           prodh	equ	0xFF4
 17648                           prodl	equ	0xFF3
 17649                           intcon	equ	0xFF2
 17650                           intcon2	equ	0xFF1
 17651                           postinc0	equ	0xFEE
 17652                           wreg	equ	0xFE8
 17653                           postdec1	equ	0xFE5
 17654                           fsr1l	equ	0xFE1
 17655                           indf2	equ	0xFDF
 17656                           postinc2	equ	0xFDE
 17657                           postdec2	equ	0xFDD
 17658                           fsr2h	equ	0xFDA
 17659                           fsr2l	equ	0xFD9
 17660                           status	equ	0xFD8
 17661                           
 17662 ;; *************** function ___fttol *****************
 17663 ;; Defined at:
 17664 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;  f1              3   45[COMRAM] float 
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;  lval            4   55[COMRAM] unsigned long 
 17669 ;;  exp1            1   59[COMRAM] unsigned char 
 17670 ;;  sign1           1   54[COMRAM] unsigned char 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;                  4   45[COMRAM] long 
 17673 ;; Registers used:
 17674 ;;		wreg, status,2, status,0
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17681 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17682 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17683 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17684 ;;Total ram usage:       15 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:    2
 17687 ;; This function calls:
 17688 ;;		Nothing
 17689 ;; This function is called by:
 17690 ;;		_Update_Screen
 17691 ;;		_do_update_pwm
 17692 ;;		_printf
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           	psect	text84
 17697  00338E                     __ptext84:
 17698                           	opt stack 0
 17699  00338E                     ___fttol:
 17700                           	opt stack 27
 17701                           
 17702                           ;incstack = 0
 17703  00338E  C030  F032         	movff	___fttol@f1+2,??___fttol
 17704  003392  6A33               	clrf	(??___fttol+1)& (0+255),c
 17705  003394  6A34               	clrf	(??___fttol+2)& (0+255),c
 17706  003396  342F               	rlcf	___fttol@f1+1,w,c
 17707  003398  3632               	rlcf	??___fttol& (0+255),f,c
 17708  00339A  E301               	bnc	u7621
 17709  00339C  8033               	bsf	(??___fttol+1)& (0+255),0,c
 17710  00339E                     u7621:
 17711  00339E  5032               	movf	??___fttol,w,c
 17712  0033A0  6E3C               	movwf	___fttol@exp1,c
 17713  0033A2  503C               	movf	___fttol@exp1,w,c
 17714  0033A4  A4D8               	btfss	status,2,c
 17715  0033A6  D002               	goto	l9434
 17716  0033A8  D039               	goto	l9458
 17717  0033AA  D063               	goto	l2022
 17718  0033AC                     l9434:
 17719  0033AC  0E17               	movlw	23
 17720  0033AE  6E32               	movwf	??___fttol& (0+255),c
 17721  0033B0  C02E  F033         	movff	___fttol@f1,??___fttol+1
 17722  0033B4  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 17723  0033B8  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 17724  0033BC  2832               	incf	??___fttol,w,c
 17725  0033BE  6E36               	movwf	(??___fttol+4)& (0+255),c
 17726  0033C0  D004               	goto	u7640
 17727  0033C2                     u7645:
 17728  0033C2  90D8               	bcf	status,0,c
 17729  0033C4  3235               	rrcf	??___fttol+3,f,c
 17730  0033C6  3234               	rrcf	??___fttol+2,f,c
 17731  0033C8  3233               	rrcf	??___fttol+1,f,c
 17732  0033CA                     u7640:
 17733  0033CA  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 17734  0033CC  D7FA               	goto	u7645
 17735  0033CE  5033               	movf	??___fttol+1,w,c
 17736  0033D0  6E37               	movwf	___fttol@sign1,c
 17737  0033D2  8E2F               	bsf	___fttol@f1+1,7,c
 17738  0033D4  0EFF               	movlw	255
 17739  0033D6  162E               	andwf	___fttol@f1,f,c
 17740  0033D8  0EFF               	movlw	255
 17741  0033DA  162F               	andwf	___fttol@f1+1,f,c
 17742  0033DC  0E00               	movlw	0
 17743  0033DE  1630               	andwf	___fttol@f1+2,f,c
 17744  0033E0  502E               	movf	___fttol@f1,w,c
 17745  0033E2  6E38               	movwf	___fttol@lval,c
 17746  0033E4  502F               	movf	___fttol@f1+1,w,c
 17747  0033E6  6E39               	movwf	___fttol@lval+1,c
 17748  0033E8  5030               	movf	___fttol@f1+2,w,c
 17749  0033EA  6E3A               	movwf	___fttol@lval+2,c
 17750  0033EC  6A3B               	clrf	___fttol@lval+3,c
 17751  0033EE  0E8E               	movlw	142
 17752  0033F0  5E3C               	subwf	___fttol@exp1,f,c
 17753  0033F2  AE3C               	btfss	___fttol@exp1,7,c
 17754  0033F4  D010               	goto	l9456
 17755  0033F6  503C               	movf	___fttol@exp1,w,c
 17756  0033F8  0A80               	xorlw	128
 17757  0033FA  0F8F               	addlw	143
 17758  0033FC  B0D8               	btfsc	status,0,c
 17759  0033FE  D003               	goto	l9452
 17760  003400  D00D               	goto	l9458
 17761  003402  D037               	goto	l2022
 17762  003404  D000               	goto	l9452
 17763  003406                     l9452:
 17764  003406  90D8               	bcf	status,0,c
 17765  003408  323B               	rrcf	___fttol@lval+3,f,c
 17766  00340A  323A               	rrcf	___fttol@lval+2,f,c
 17767  00340C  3239               	rrcf	___fttol@lval+1,f,c
 17768  00340E  3238               	rrcf	___fttol@lval,f,c
 17769  003410  3E3C               	incfsz	___fttol@exp1,f,c
 17770  003412  D7F9               	goto	l9452
 17771  003414  D019               	goto	l9466
 17772  003416                     l9456:
 17773  003416  0E17               	movlw	23
 17774  003418  643C               	cpfsgt	___fttol@exp1,c
 17775  00341A  D011               	goto	l9464
 17776  00341C                     l9458:
 17777  00341C  0E00               	movlw	0
 17778  00341E  6E2E               	movwf	?___fttol,c
 17779  003420  0E00               	movlw	0
 17780  003422  6E2F               	movwf	?___fttol+1,c
 17781  003424  0E00               	movlw	0
 17782  003426  6E30               	movwf	?___fttol+2,c
 17783  003428  0E00               	movlw	0
 17784  00342A  6E31               	movwf	?___fttol+3,c
 17785  00342C  D022               	goto	l2022
 17786  00342E  D007               	goto	l9464
 17787  003430                     l9462:
 17788  003430  90D8               	bcf	status,0,c
 17789  003432  3638               	rlcf	___fttol@lval,f,c
 17790  003434  3639               	rlcf	___fttol@lval+1,f,c
 17791  003436  363A               	rlcf	___fttol@lval+2,f,c
 17792  003438  363B               	rlcf	___fttol@lval+3,f,c
 17793  00343A  063C               	decf	___fttol@exp1,f,c
 17794  00343C  D000               	goto	l9464
 17795  00343E                     l9464:
 17796  00343E  503C               	movf	___fttol@exp1,w,c
 17797  003440  B4D8               	btfsc	status,2,c
 17798  003442  D002               	goto	l9466
 17799  003444  D7F5               	goto	l9462
 17800  003446  D000               	goto	l9466
 17801  003448                     l9466:
 17802  003448  5037               	movf	___fttol@sign1,w,c
 17803  00344A  B4D8               	btfsc	status,2,c
 17804  00344C  D009               	goto	l9470
 17805  00344E  1E3B               	comf	___fttol@lval+3,f,c
 17806  003450  1E3A               	comf	___fttol@lval+2,f,c
 17807  003452  1E39               	comf	___fttol@lval+1,f,c
 17808  003454  6C38               	negf	___fttol@lval,c
 17809  003456  0E00               	movlw	0
 17810  003458  2239               	addwfc	___fttol@lval+1,f,c
 17811  00345A  223A               	addwfc	___fttol@lval+2,f,c
 17812  00345C  223B               	addwfc	___fttol@lval+3,f,c
 17813  00345E  D000               	goto	l9470
 17814  003460                     l9470:
 17815  003460  C038  F02E         	movff	___fttol@lval,?___fttol
 17816  003464  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 17817  003468  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 17818  00346C  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 17819  003470  D000               	goto	l2022
 17820  003472                     l2022:
 17821  003472  0012               	return		;funcret
 17822  003474                     __end_of___fttol:
 17823                           	opt stack 0
 17824                           tblptru	equ	0xFF8
 17825                           tblptrh	equ	0xFF7
 17826                           tblptrl	equ	0xFF6
 17827                           tablat	equ	0xFF5
 17828                           prodh	equ	0xFF4
 17829                           prodl	equ	0xFF3
 17830                           intcon	equ	0xFF2
 17831                           intcon2	equ	0xFF1
 17832                           postinc0	equ	0xFEE
 17833                           wreg	equ	0xFE8
 17834                           postdec1	equ	0xFE5
 17835                           fsr1l	equ	0xFE1
 17836                           indf2	equ	0xFDF
 17837                           postinc2	equ	0xFDE
 17838                           postdec2	equ	0xFDD
 17839                           fsr2h	equ	0xFDA
 17840                           fsr2l	equ	0xFD9
 17841                           status	equ	0xFD8
 17842                           
 17843 ;; *************** function ___ftsub *****************
 17844 ;; Defined at:
 17845 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;  f1              3   88[COMRAM] float 
 17848 ;;  f2              3   91[COMRAM] float 
 17849 ;; Auto vars:     Size  Location     Type
 17850 ;;		None
 17851 ;; Return value:  Size  Location     Type
 17852 ;;                  3   88[COMRAM] float 
 17853 ;; Registers used:
 17854 ;;		wreg, status,2, status,0, cstack
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17860 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;Total ram usage:        6 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    4
 17867 ;; This function calls:
 17868 ;;		___ftadd
 17869 ;; This function is called by:
 17870 ;;		_printf
 17871 ;; This function uses a non-reentrant model
 17872 ;;
 17873                           
 17874                           	psect	text85
 17875  004918                     __ptext85:
 17876                           	opt stack 0
 17877  004918                     ___ftsub:
 17878                           	opt stack 25
 17879                           
 17880                           ;incstack = 0
 17881  004918  505C               	movf	___ftsub@f2,w,c
 17882  00491A  105D               	iorwf	___ftsub@f2+1,w,c
 17883  00491C  105E               	iorwf	___ftsub@f2+2,w,c
 17884  00491E  B4D8               	btfsc	status,2,c
 17885  004920  D007               	goto	l9402
 17886  004922  0E00               	movlw	0
 17887  004924  1A5C               	xorwf	___ftsub@f2,f,c
 17888  004926  0E00               	movlw	0
 17889  004928  1A5D               	xorwf	___ftsub@f2+1,f,c
 17890  00492A  0E80               	movlw	128
 17891  00492C  1A5E               	xorwf	___ftsub@f2+2,f,c
 17892  00492E  D000               	goto	l9402
 17893  004930                     l9402:
 17894  004930  C059  F04D         	movff	___ftsub@f1,___ftadd@f1
 17895  004934  C05A  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 17896  004938  C05B  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 17897  00493C  C05C  F050         	movff	___ftsub@f2,___ftadd@f2
 17898  004940  C05D  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 17899  004944  C05E  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 17900  004948  EC0E  F00F         	call	___ftadd	;wreg free
 17901  00494C  C04D  F059         	movff	?___ftadd,?___ftsub
 17902  004950  C04E  F05A         	movff	?___ftadd+1,?___ftsub+1
 17903  004954  C04F  F05B         	movff	?___ftadd+2,?___ftsub+2
 17904  004958  D000               	goto	l2018
 17905  00495A                     l2018:
 17906  00495A  0012               	return		;funcret
 17907  00495C                     __end_of___ftsub:
 17908                           	opt stack 0
 17909                           tblptru	equ	0xFF8
 17910                           tblptrh	equ	0xFF7
 17911                           tblptrl	equ	0xFF6
 17912                           tablat	equ	0xFF5
 17913                           prodh	equ	0xFF4
 17914                           prodl	equ	0xFF3
 17915                           intcon	equ	0xFF2
 17916                           intcon2	equ	0xFF1
 17917                           postinc0	equ	0xFEE
 17918                           wreg	equ	0xFE8
 17919                           postdec1	equ	0xFE5
 17920                           fsr1l	equ	0xFE1
 17921                           indf2	equ	0xFDF
 17922                           postinc2	equ	0xFDE
 17923                           postdec2	equ	0xFDD
 17924                           fsr2h	equ	0xFDA
 17925                           fsr2l	equ	0xFD9
 17926                           status	equ	0xFD8
 17927                           
 17928 ;; *************** function ___ftadd *****************
 17929 ;; Defined at:
 17930 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 17931 ;; Parameters:    Size  Location     Type
 17932 ;;  f1              3   76[COMRAM] float 
 17933 ;;  f2              3   79[COMRAM] float 
 17934 ;; Auto vars:     Size  Location     Type
 17935 ;;  exp1            1   87[COMRAM] unsigned char 
 17936 ;;  exp2            1   86[COMRAM] unsigned char 
 17937 ;;  sign            1   85[COMRAM] unsigned char 
 17938 ;; Return value:  Size  Location     Type
 17939 ;;                  3   76[COMRAM] float 
 17940 ;; Registers used:
 17941 ;;		wreg, status,2, status,0, cstack
 17942 ;; Tracked objects:
 17943 ;;		On entry : 0/0
 17944 ;;		On exit  : 0/0
 17945 ;;		Unchanged: 0/0
 17946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17947 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17948 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17949 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17950 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;Total ram usage:       12 bytes
 17952 ;; Hardware stack levels used:    1
 17953 ;; Hardware stack levels required when called:    3
 17954 ;; This function calls:
 17955 ;;		___ftpack
 17956 ;; This function is called by:
 17957 ;;		_printf
 17958 ;;		___ftsub
 17959 ;; This function uses a non-reentrant model
 17960 ;;
 17961                           
 17962                           	psect	text86
 17963  001E1C                     __ptext86:
 17964                           	opt stack 0
 17965  001E1C                     ___ftadd:
 17966                           	opt stack 25
 17967                           
 17968                           ;incstack = 0
 17969  001E1C  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 17970  001E20  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17971  001E22  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17972  001E24  344E               	rlcf	___ftadd@f1+1,w,c
 17973  001E26  3653               	rlcf	??___ftadd& (0+255),f,c
 17974  001E28  E301               	bnc	u6781
 17975  001E2A  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17976  001E2C                     u6781:
 17977  001E2C  5053               	movf	??___ftadd,w,c
 17978  001E2E  6E58               	movwf	___ftadd@exp1,c
 17979  001E30  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 17980  001E34  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17981  001E36  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17982  001E38  3451               	rlcf	___ftadd@f2+1,w,c
 17983  001E3A  3653               	rlcf	??___ftadd& (0+255),f,c
 17984  001E3C  E301               	bnc	u6791
 17985  001E3E  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17986  001E40                     u6791:
 17987  001E40  5053               	movf	??___ftadd,w,c
 17988  001E42  6E57               	movwf	___ftadd@exp2,c
 17989  001E44  5058               	movf	___ftadd@exp1,w,c
 17990  001E46  B4D8               	btfsc	status,2,c
 17991  001E48  D00B               	goto	l1937
 17992  001E4A  5057               	movf	___ftadd@exp2,w,c
 17993  001E4C  5C58               	subwf	___ftadd@exp1,w,c
 17994  001E4E  B0D8               	btfsc	status,0,c
 17995  001E50  D00E               	goto	l8872
 17996  001E52  5058               	movf	___ftadd@exp1,w,c
 17997  001E54  0800               	sublw	0
 17998  001E56  2457               	addwf	___ftadd@exp2,w,c
 17999  001E58  6E53               	movwf	??___ftadd& (0+255),c
 18000  001E5A  0E18               	movlw	24
 18001  001E5C  6453               	cpfsgt	??___ftadd,c
 18002  001E5E  D007               	goto	l8872
 18003  001E60                     l1937:
 18004  001E60  C050  F04D         	movff	___ftadd@f2,?___ftadd
 18005  001E64  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 18006  001E68  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 18007  001E6C  D0B8               	goto	l1938
 18008  001E6E                     l8872:
 18009  001E6E  5057               	movf	___ftadd@exp2,w,c
 18010  001E70  B4D8               	btfsc	status,2,c
 18011  001E72  D00B               	goto	l1941
 18012  001E74  5058               	movf	___ftadd@exp1,w,c
 18013  001E76  5C57               	subwf	___ftadd@exp2,w,c
 18014  001E78  B0D8               	btfsc	status,0,c
 18015  001E7A  D00E               	goto	l8878
 18016  001E7C  5057               	movf	___ftadd@exp2,w,c
 18017  001E7E  0800               	sublw	0
 18018  001E80  2458               	addwf	___ftadd@exp1,w,c
 18019  001E82  6E53               	movwf	??___ftadd& (0+255),c
 18020  001E84  0E18               	movlw	24
 18021  001E86  6453               	cpfsgt	??___ftadd,c
 18022  001E88  D007               	goto	l8878
 18023  001E8A                     l1941:
 18024  001E8A  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 18025  001E8E  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 18026  001E92  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 18027  001E96  D0A3               	goto	l1938
 18028  001E98                     l8878:
 18029  001E98  0E06               	movlw	6
 18030  001E9A  6E56               	movwf	___ftadd@sign,c
 18031  001E9C  AE4F               	btfss	___ftadd@f1+2,7,c
 18032  001E9E  D002               	goto	l8884
 18033  001EA0  8E56               	bsf	___ftadd@sign,7,c
 18034  001EA2  D000               	goto	l8884
 18035  001EA4                     l8884:
 18036  001EA4  BE52               	btfsc	___ftadd@f2+2,7,c
 18037  001EA6  8C56               	bsf	___ftadd@sign,6,c
 18038  001EA8  8E4E               	bsf	___ftadd@f1+1,7,c
 18039  001EAA  0EFF               	movlw	255
 18040  001EAC  164D               	andwf	___ftadd@f1,f,c
 18041  001EAE  0EFF               	movlw	255
 18042  001EB0  164E               	andwf	___ftadd@f1+1,f,c
 18043  001EB2  0E00               	movlw	0
 18044  001EB4  164F               	andwf	___ftadd@f1+2,f,c
 18045  001EB6  8E51               	bsf	___ftadd@f2+1,7,c
 18046  001EB8  0EFF               	movlw	255
 18047  001EBA  1650               	andwf	___ftadd@f2,f,c
 18048  001EBC  0EFF               	movlw	255
 18049  001EBE  1651               	andwf	___ftadd@f2+1,f,c
 18050  001EC0  0E00               	movlw	0
 18051  001EC2  1652               	andwf	___ftadd@f2+2,f,c
 18052  001EC4  5057               	movf	___ftadd@exp2,w,c
 18053  001EC6  5C58               	subwf	___ftadd@exp1,w,c
 18054  001EC8  B0D8               	btfsc	status,0,c
 18055  001ECA  D01E               	goto	l8904
 18056  001ECC                     l8894:
 18057  001ECC  90D8               	bcf	status,0,c
 18058  001ECE  3650               	rlcf	___ftadd@f2,f,c
 18059  001ED0  3651               	rlcf	___ftadd@f2+1,f,c
 18060  001ED2  3652               	rlcf	___ftadd@f2+2,f,c
 18061  001ED4  0657               	decf	___ftadd@exp2,f,c
 18062  001ED6  5058               	movf	___ftadd@exp1,w,c
 18063  001ED8  1857               	xorwf	___ftadd@exp2,w,c
 18064  001EDA  B4D8               	btfsc	status,2,c
 18065  001EDC  D00F               	goto	l8902
 18066  001EDE  0656               	decf	___ftadd@sign,f,c
 18067  001EE0  C056  F053         	movff	___ftadd@sign,??___ftadd
 18068  001EE4  0E07               	movlw	7
 18069  001EE6  1653               	andwf	??___ftadd,f,c
 18070  001EE8  B4D8               	btfsc	status,2,c
 18071  001EEA  D008               	goto	l8902
 18072  001EEC  D7EF               	goto	l8894
 18073  001EEE  D006               	goto	l8902
 18074  001EF0                     l8900:
 18075  001EF0  90D8               	bcf	status,0,c
 18076  001EF2  324F               	rrcf	___ftadd@f1+2,f,c
 18077  001EF4  324E               	rrcf	___ftadd@f1+1,f,c
 18078  001EF6  324D               	rrcf	___ftadd@f1,f,c
 18079  001EF8  2A58               	incf	___ftadd@exp1,f,c
 18080  001EFA  D000               	goto	l8902
 18081  001EFC                     l8902:
 18082  001EFC  5057               	movf	___ftadd@exp2,w,c
 18083  001EFE  1858               	xorwf	___ftadd@exp1,w,c
 18084  001F00  B4D8               	btfsc	status,2,c
 18085  001F02  D024               	goto	l1952
 18086  001F04  D7F5               	goto	l8900
 18087  001F06  D022               	goto	l1952
 18088  001F08                     l8904:
 18089  001F08  5058               	movf	___ftadd@exp1,w,c
 18090  001F0A  5C57               	subwf	___ftadd@exp2,w,c
 18091  001F0C  B0D8               	btfsc	status,0,c
 18092  001F0E  D01E               	goto	l1952
 18093  001F10                     l8906:
 18094  001F10  90D8               	bcf	status,0,c
 18095  001F12  364D               	rlcf	___ftadd@f1,f,c
 18096  001F14  364E               	rlcf	___ftadd@f1+1,f,c
 18097  001F16  364F               	rlcf	___ftadd@f1+2,f,c
 18098  001F18  0658               	decf	___ftadd@exp1,f,c
 18099  001F1A  5058               	movf	___ftadd@exp1,w,c
 18100  001F1C  1857               	xorwf	___ftadd@exp2,w,c
 18101  001F1E  B4D8               	btfsc	status,2,c
 18102  001F20  D00F               	goto	l8914
 18103  001F22  0656               	decf	___ftadd@sign,f,c
 18104  001F24  C056  F053         	movff	___ftadd@sign,??___ftadd
 18105  001F28  0E07               	movlw	7
 18106  001F2A  1653               	andwf	??___ftadd,f,c
 18107  001F2C  B4D8               	btfsc	status,2,c
 18108  001F2E  D008               	goto	l8914
 18109  001F30  D7EF               	goto	l8906
 18110  001F32  D006               	goto	l8914
 18111  001F34                     l8912:
 18112  001F34  90D8               	bcf	status,0,c
 18113  001F36  3252               	rrcf	___ftadd@f2+2,f,c
 18114  001F38  3251               	rrcf	___ftadd@f2+1,f,c
 18115  001F3A  3250               	rrcf	___ftadd@f2,f,c
 18116  001F3C  2A57               	incf	___ftadd@exp2,f,c
 18117  001F3E  D000               	goto	l8914
 18118  001F40                     l8914:
 18119  001F40  5057               	movf	___ftadd@exp2,w,c
 18120  001F42  1858               	xorwf	___ftadd@exp1,w,c
 18121  001F44  B4D8               	btfsc	status,2,c
 18122  001F46  D002               	goto	l1952
 18123  001F48  D7F5               	goto	l8912
 18124  001F4A  D000               	goto	l1952
 18125  001F4C                     l1952:
 18126  001F4C  AE56               	btfss	___ftadd@sign,7,c
 18127  001F4E  D00C               	goto	l1961
 18128  001F50  0EFF               	movlw	255
 18129  001F52  1A4D               	xorwf	___ftadd@f1,f,c
 18130  001F54  0EFF               	movlw	255
 18131  001F56  1A4E               	xorwf	___ftadd@f1+1,f,c
 18132  001F58  0EFF               	movlw	255
 18133  001F5A  1A4F               	xorwf	___ftadd@f1+2,f,c
 18134  001F5C  0E01               	movlw	1
 18135  001F5E  264D               	addwf	___ftadd@f1,f,c
 18136  001F60  0E00               	movlw	0
 18137  001F62  224E               	addwfc	___ftadd@f1+1,f,c
 18138  001F64  0E00               	movlw	0
 18139  001F66  224F               	addwfc	___ftadd@f1+2,f,c
 18140  001F68                     l1961:
 18141  001F68  AC56               	btfss	___ftadd@sign,6,c
 18142  001F6A  D00D               	goto	l8920
 18143  001F6C  0EFF               	movlw	255
 18144  001F6E  1A50               	xorwf	___ftadd@f2,f,c
 18145  001F70  0EFF               	movlw	255
 18146  001F72  1A51               	xorwf	___ftadd@f2+1,f,c
 18147  001F74  0EFF               	movlw	255
 18148  001F76  1A52               	xorwf	___ftadd@f2+2,f,c
 18149  001F78  0E01               	movlw	1
 18150  001F7A  2650               	addwf	___ftadd@f2,f,c
 18151  001F7C  0E00               	movlw	0
 18152  001F7E  2251               	addwfc	___ftadd@f2+1,f,c
 18153  001F80  0E00               	movlw	0
 18154  001F82  2252               	addwfc	___ftadd@f2+2,f,c
 18155  001F84  D000               	goto	l8920
 18156  001F86                     l8920:
 18157  001F86  0E00               	movlw	0
 18158  001F88  6E56               	movwf	___ftadd@sign,c
 18159  001F8A  504D               	movf	___ftadd@f1,w,c
 18160  001F8C  2650               	addwf	___ftadd@f2,f,c
 18161  001F8E  504E               	movf	___ftadd@f1+1,w,c
 18162  001F90  2251               	addwfc	___ftadd@f2+1,f,c
 18163  001F92  504F               	movf	___ftadd@f1+2,w,c
 18164  001F94  2252               	addwfc	___ftadd@f2+2,f,c
 18165  001F96  AE52               	btfss	___ftadd@f2+2,7,c
 18166  001F98  D00F               	goto	l8930
 18167  001F9A  0EFF               	movlw	255
 18168  001F9C  1A50               	xorwf	___ftadd@f2,f,c
 18169  001F9E  0EFF               	movlw	255
 18170  001FA0  1A51               	xorwf	___ftadd@f2+1,f,c
 18171  001FA2  0EFF               	movlw	255
 18172  001FA4  1A52               	xorwf	___ftadd@f2+2,f,c
 18173  001FA6  0E01               	movlw	1
 18174  001FA8  2650               	addwf	___ftadd@f2,f,c
 18175  001FAA  0E00               	movlw	0
 18176  001FAC  2251               	addwfc	___ftadd@f2+1,f,c
 18177  001FAE  0E00               	movlw	0
 18178  001FB0  2252               	addwfc	___ftadd@f2+2,f,c
 18179  001FB2  0E01               	movlw	1
 18180  001FB4  6E56               	movwf	___ftadd@sign,c
 18181  001FB6  D000               	goto	l8930
 18182  001FB8                     l8930:
 18183  001FB8  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 18184  001FBC  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 18185  001FC0  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 18186  001FC4  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 18187  001FC8  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 18188  001FCC  EC5E  F01C         	call	___ftpack	;wreg free
 18189  001FD0  C011  F04D         	movff	?___ftpack,?___ftadd
 18190  001FD4  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 18191  001FD8  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 18192  001FDC  D000               	goto	l1938
 18193  001FDE                     l1938:
 18194  001FDE  0012               	return		;funcret
 18195  001FE0                     __end_of___ftadd:
 18196                           	opt stack 0
 18197                           tblptru	equ	0xFF8
 18198                           tblptrh	equ	0xFF7
 18199                           tblptrl	equ	0xFF6
 18200                           tablat	equ	0xFF5
 18201                           prodh	equ	0xFF4
 18202                           prodl	equ	0xFF3
 18203                           intcon	equ	0xFF2
 18204                           intcon2	equ	0xFF1
 18205                           postinc0	equ	0xFEE
 18206                           wreg	equ	0xFE8
 18207                           postdec1	equ	0xFE5
 18208                           fsr1l	equ	0xFE1
 18209                           indf2	equ	0xFDF
 18210                           postinc2	equ	0xFDE
 18211                           postdec2	equ	0xFDD
 18212                           fsr2h	equ	0xFDA
 18213                           fsr2l	equ	0xFD9
 18214                           status	equ	0xFD8
 18215                           
 18216 ;; *************** function ___ftpack *****************
 18217 ;; Defined at:
 18218 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 18219 ;; Parameters:    Size  Location     Type
 18220 ;;  arg             3   16[COMRAM] unsigned um
 18221 ;;  exp             1   19[COMRAM] unsigned char 
 18222 ;;  sign            1   20[COMRAM] unsigned char 
 18223 ;; Auto vars:     Size  Location     Type
 18224 ;;		None
 18225 ;; Return value:  Size  Location     Type
 18226 ;;                  3   16[COMRAM] float 
 18227 ;; Registers used:
 18228 ;;		wreg, status,2, status,0
 18229 ;; Tracked objects:
 18230 ;;		On entry : 0/0
 18231 ;;		On exit  : 0/0
 18232 ;;		Unchanged: 0/0
 18233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18234 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18236 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18237 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18238 ;;Total ram usage:        8 bytes
 18239 ;; Hardware stack levels used:    1
 18240 ;; Hardware stack levels required when called:    2
 18241 ;; This function calls:
 18242 ;;		Nothing
 18243 ;; This function is called by:
 18244 ;;		___awtoft
 18245 ;;		___ftadd
 18246 ;;		___ftdiv
 18247 ;;		___ftmul
 18248 ;;		___lbtoft
 18249 ;;		___lltoft
 18250 ;; This function uses a non-reentrant model
 18251 ;;
 18252                           
 18253                           	psect	text87
 18254  0038BC                     __ptext87:
 18255                           	opt stack 0
 18256  0038BC                     ___ftpack:
 18257                           	opt stack 26
 18258                           
 18259                           ;incstack = 0
 18260  0038BC  5014               	movf	___ftpack@exp,w,c
 18261  0038BE  B4D8               	btfsc	status,2,c
 18262  0038C0  D005               	goto	l8818
 18263  0038C2  5011               	movf	___ftpack@arg,w,c
 18264  0038C4  1012               	iorwf	___ftpack@arg+1,w,c
 18265  0038C6  1013               	iorwf	___ftpack@arg+2,w,c
 18266  0038C8  A4D8               	btfss	status,2,c
 18267  0038CA  D00E               	goto	l8824
 18268  0038CC                     l8818:
 18269  0038CC  0E00               	movlw	0
 18270  0038CE  6E11               	movwf	?___ftpack,c
 18271  0038D0  0E00               	movlw	0
 18272  0038D2  6E12               	movwf	?___ftpack+1,c
 18273  0038D4  0E00               	movlw	0
 18274  0038D6  6E13               	movwf	?___ftpack+2,c
 18275  0038D8  D053               	goto	l1897
 18276  0038DA  D006               	goto	l8824
 18277  0038DC                     l8822:
 18278  0038DC  2A14               	incf	___ftpack@exp,f,c
 18279  0038DE  90D8               	bcf	status,0,c
 18280  0038E0  3213               	rrcf	___ftpack@arg+2,f,c
 18281  0038E2  3212               	rrcf	___ftpack@arg+1,f,c
 18282  0038E4  3211               	rrcf	___ftpack@arg,f,c
 18283  0038E6  D000               	goto	l8824
 18284  0038E8                     l8824:
 18285  0038E8  0E00               	movlw	0
 18286  0038EA  1411               	andwf	___ftpack@arg,w,c
 18287  0038EC  6E16               	movwf	??___ftpack& (0+255),c
 18288  0038EE  0E00               	movlw	0
 18289  0038F0  1412               	andwf	___ftpack@arg+1,w,c
 18290  0038F2  6E17               	movwf	(??___ftpack+1)& (0+255),c
 18291  0038F4  0EFE               	movlw	254
 18292  0038F6  1413               	andwf	___ftpack@arg+2,w,c
 18293  0038F8  6E18               	movwf	(??___ftpack+2)& (0+255),c
 18294  0038FA  5016               	movf	??___ftpack,w,c
 18295  0038FC  1017               	iorwf	??___ftpack+1,w,c
 18296  0038FE  1018               	iorwf	??___ftpack+2,w,c
 18297  003900  B4D8               	btfsc	status,2,c
 18298  003902  D00E               	goto	l8830
 18299  003904  D7EB               	goto	l8822
 18300  003906  D00C               	goto	l8830
 18301  003908                     l8826:
 18302  003908  2A14               	incf	___ftpack@exp,f,c
 18303  00390A  0E01               	movlw	1
 18304  00390C  2611               	addwf	___ftpack@arg,f,c
 18305  00390E  0E00               	movlw	0
 18306  003910  2212               	addwfc	___ftpack@arg+1,f,c
 18307  003912  0E00               	movlw	0
 18308  003914  2213               	addwfc	___ftpack@arg+2,f,c
 18309  003916  90D8               	bcf	status,0,c
 18310  003918  3213               	rrcf	___ftpack@arg+2,f,c
 18311  00391A  3212               	rrcf	___ftpack@arg+1,f,c
 18312  00391C  3211               	rrcf	___ftpack@arg,f,c
 18313  00391E  D000               	goto	l8830
 18314  003920                     l8830:
 18315  003920  0E00               	movlw	0
 18316  003922  1411               	andwf	___ftpack@arg,w,c
 18317  003924  6E16               	movwf	??___ftpack& (0+255),c
 18318  003926  0E00               	movlw	0
 18319  003928  1412               	andwf	___ftpack@arg+1,w,c
 18320  00392A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 18321  00392C  0EFF               	movlw	255
 18322  00392E  1413               	andwf	___ftpack@arg+2,w,c
 18323  003930  6E18               	movwf	(??___ftpack+2)& (0+255),c
 18324  003932  5016               	movf	??___ftpack,w,c
 18325  003934  1017               	iorwf	??___ftpack+1,w,c
 18326  003936  1018               	iorwf	??___ftpack+2,w,c
 18327  003938  B4D8               	btfsc	status,2,c
 18328  00393A  D008               	goto	l8834
 18329  00393C  D7E5               	goto	l8826
 18330  00393E  D006               	goto	l8834
 18331  003940                     l8832:
 18332  003940  0614               	decf	___ftpack@exp,f,c
 18333  003942  90D8               	bcf	status,0,c
 18334  003944  3611               	rlcf	___ftpack@arg,f,c
 18335  003946  3612               	rlcf	___ftpack@arg+1,f,c
 18336  003948  3613               	rlcf	___ftpack@arg+2,f,c
 18337  00394A  D000               	goto	l8834
 18338  00394C                     l8834:
 18339  00394C  BE12               	btfsc	___ftpack@arg+1,7,c
 18340  00394E  D004               	goto	l1908
 18341  003950  0E02               	movlw	2
 18342  003952  6014               	cpfslt	___ftpack@exp,c
 18343  003954  D7F5               	goto	l8832
 18344  003956  D000               	goto	l1908
 18345  003958                     l1908:
 18346  003958  B014               	btfsc	___ftpack@exp,0,c
 18347  00395A  D002               	goto	l8840
 18348  00395C  9E12               	bcf	___ftpack@arg+1,7,c
 18349  00395E  D000               	goto	l8840
 18350  003960                     l8840:
 18351  003960  90D8               	bcf	status,0,c
 18352  003962  3214               	rrcf	___ftpack@exp,f,c
 18353  003964  5014               	movf	___ftpack@exp,w,c
 18354  003966  1213               	iorwf	___ftpack@arg+2,f,c
 18355  003968  5015               	movf	___ftpack@sign,w,c
 18356  00396A  B4D8               	btfsc	status,2,c
 18357  00396C  D002               	goto	l8846
 18358  00396E  8E13               	bsf	___ftpack@arg+2,7,c
 18359  003970  D000               	goto	l8846
 18360  003972                     l8846:
 18361  003972  C011  F011         	movff	___ftpack@arg,?___ftpack
 18362  003976  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 18363  00397A  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 18364  00397E  D000               	goto	l1897
 18365  003980                     l1897:
 18366  003980  0012               	return		;funcret
 18367  003982                     __end_of___ftpack:
 18368                           	opt stack 0
 18369                           tblptru	equ	0xFF8
 18370                           tblptrh	equ	0xFF7
 18371                           tblptrl	equ	0xFF6
 18372                           tablat	equ	0xFF5
 18373                           prodh	equ	0xFF4
 18374                           prodl	equ	0xFF3
 18375                           intcon	equ	0xFF2
 18376                           intcon2	equ	0xFF1
 18377                           postinc0	equ	0xFEE
 18378                           wreg	equ	0xFE8
 18379                           postdec1	equ	0xFE5
 18380                           fsr1l	equ	0xFE1
 18381                           indf2	equ	0xFDF
 18382                           postinc2	equ	0xFDE
 18383                           postdec2	equ	0xFDD
 18384                           fsr2h	equ	0xFDA
 18385                           fsr2l	equ	0xFD9
 18386                           status	equ	0xFD8
 18387                           
 18388 ;; *************** function ___ftneg *****************
 18389 ;; Defined at:
 18390 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 18391 ;; Parameters:    Size  Location     Type
 18392 ;;  f1              3   16[COMRAM] float 
 18393 ;; Auto vars:     Size  Location     Type
 18394 ;;		None
 18395 ;; Return value:  Size  Location     Type
 18396 ;;                  3   16[COMRAM] float 
 18397 ;; Registers used:
 18398 ;;		wreg, status,2, status,0
 18399 ;; Tracked objects:
 18400 ;;		On entry : 0/0
 18401 ;;		On exit  : 0/0
 18402 ;;		Unchanged: 0/0
 18403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18404 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;Total ram usage:        3 bytes
 18409 ;; Hardware stack levels used:    1
 18410 ;; Hardware stack levels required when called:    2
 18411 ;; This function calls:
 18412 ;;		Nothing
 18413 ;; This function is called by:
 18414 ;;		_printf
 18415 ;; This function uses a non-reentrant model
 18416 ;;
 18417                           
 18418                           	psect	text88
 18419  004CBC                     __ptext88:
 18420                           	opt stack 0
 18421  004CBC                     ___ftneg:
 18422                           	opt stack 27
 18423                           
 18424                           ;incstack = 0
 18425  004CBC  5011               	movf	___ftneg@f1,w,c
 18426  004CBE  1012               	iorwf	___ftneg@f1+1,w,c
 18427  004CC0  1013               	iorwf	___ftneg@f1+2,w,c
 18428  004CC2  B4D8               	btfsc	status,2,c
 18429  004CC4  D006               	goto	l2011
 18430  004CC6  0E00               	movlw	0
 18431  004CC8  1A11               	xorwf	___ftneg@f1,f,c
 18432  004CCA  0E00               	movlw	0
 18433  004CCC  1A12               	xorwf	___ftneg@f1+1,f,c
 18434  004CCE  0E80               	movlw	128
 18435  004CD0  1A13               	xorwf	___ftneg@f1+2,f,c
 18436  004CD2                     l2011:
 18437  004CD2  C011  F011         	movff	___ftneg@f1,?___ftneg
 18438  004CD6  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 18439  004CDA  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 18440  004CDE  0012               	return		;funcret
 18441  004CE0                     __end_of___ftneg:
 18442                           	opt stack 0
 18443                           tblptru	equ	0xFF8
 18444                           tblptrh	equ	0xFF7
 18445                           tblptrl	equ	0xFF6
 18446                           tablat	equ	0xFF5
 18447                           prodh	equ	0xFF4
 18448                           prodl	equ	0xFF3
 18449                           intcon	equ	0xFF2
 18450                           intcon2	equ	0xFF1
 18451                           postinc0	equ	0xFEE
 18452                           wreg	equ	0xFE8
 18453                           postdec1	equ	0xFE5
 18454                           fsr1l	equ	0xFE1
 18455                           indf2	equ	0xFDF
 18456                           postinc2	equ	0xFDE
 18457                           postdec2	equ	0xFDD
 18458                           fsr2h	equ	0xFDA
 18459                           fsr2l	equ	0xFD9
 18460                           status	equ	0xFD8
 18461                           
 18462 ;; *************** function ___ftge *****************
 18463 ;; Defined at:
 18464 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 18465 ;; Parameters:    Size  Location     Type
 18466 ;;  ff1             3   16[COMRAM] float 
 18467 ;;  ff2             3   19[COMRAM] float 
 18468 ;; Auto vars:     Size  Location     Type
 18469 ;;		None
 18470 ;; Return value:  Size  Location     Type
 18471 ;;		None               void
 18472 ;; Registers used:
 18473 ;;		wreg, status,2, status,0
 18474 ;; Tracked objects:
 18475 ;;		On entry : 0/0
 18476 ;;		On exit  : 0/0
 18477 ;;		Unchanged: 0/0
 18478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18479 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18481 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18482 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18483 ;;Total ram usage:        9 bytes
 18484 ;; Hardware stack levels used:    1
 18485 ;; Hardware stack levels required when called:    2
 18486 ;; This function calls:
 18487 ;;		Nothing
 18488 ;; This function is called by:
 18489 ;;		_test_alarm
 18490 ;;		_printf
 18491 ;; This function uses a non-reentrant model
 18492 ;;
 18493                           
 18494                           	psect	text89
 18495  003E36                     __ptext89:
 18496                           	opt stack 0
 18497  003E36                     ___ftge:
 18498                           	opt stack 27
 18499                           
 18500                           ;incstack = 0
 18501  003E36  AE13               	btfss	___ftge@ff1+2,7,c
 18502  003E38  D017               	goto	l9410
 18503  003E3A  C011  F017         	movff	___ftge@ff1,??___ftge
 18504  003E3E  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 18505  003E42  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 18506  003E46  1E17               	comf	??___ftge,f,c
 18507  003E48  1E18               	comf	??___ftge+1,f,c
 18508  003E4A  1E19               	comf	??___ftge+2,f,c
 18509  003E4C  2A17               	incf	??___ftge,f,c
 18510  003E4E  0E00               	movlw	0
 18511  003E50  2218               	addwfc	??___ftge+1,f,c
 18512  003E52  2219               	addwfc	??___ftge+2,f,c
 18513  003E54  0E00               	movlw	0
 18514  003E56  2417               	addwf	??___ftge,w,c
 18515  003E58  6E11               	movwf	___ftge@ff1,c
 18516  003E5A  0E00               	movlw	0
 18517  003E5C  2018               	addwfc	??___ftge+1,w,c
 18518  003E5E  6E12               	movwf	___ftge@ff1+1,c
 18519  003E60  0E80               	movlw	128
 18520  003E62  2019               	addwfc	??___ftge+2,w,c
 18521  003E64  6E13               	movwf	___ftge@ff1+2,c
 18522  003E66  D000               	goto	l9410
 18523  003E68                     l9410:
 18524  003E68  AE16               	btfss	___ftge@ff2+2,7,c
 18525  003E6A  D017               	goto	l9414
 18526  003E6C  C014  F017         	movff	___ftge@ff2,??___ftge
 18527  003E70  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 18528  003E74  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 18529  003E78  1E17               	comf	??___ftge,f,c
 18530  003E7A  1E18               	comf	??___ftge+1,f,c
 18531  003E7C  1E19               	comf	??___ftge+2,f,c
 18532  003E7E  2A17               	incf	??___ftge,f,c
 18533  003E80  0E00               	movlw	0
 18534  003E82  2218               	addwfc	??___ftge+1,f,c
 18535  003E84  2219               	addwfc	??___ftge+2,f,c
 18536  003E86  0E00               	movlw	0
 18537  003E88  2417               	addwf	??___ftge,w,c
 18538  003E8A  6E14               	movwf	___ftge@ff2,c
 18539  003E8C  0E00               	movlw	0
 18540  003E8E  2018               	addwfc	??___ftge+1,w,c
 18541  003E90  6E15               	movwf	___ftge@ff2+1,c
 18542  003E92  0E80               	movlw	128
 18543  003E94  2019               	addwfc	??___ftge+2,w,c
 18544  003E96  6E16               	movwf	___ftge@ff2+2,c
 18545  003E98  D000               	goto	l9414
 18546  003E9A                     l9414:
 18547  003E9A  0E00               	movlw	0
 18548  003E9C  1A11               	xorwf	___ftge@ff1,f,c
 18549  003E9E  0E00               	movlw	0
 18550  003EA0  1A12               	xorwf	___ftge@ff1+1,f,c
 18551  003EA2  0E80               	movlw	128
 18552  003EA4  1A13               	xorwf	___ftge@ff1+2,f,c
 18553  003EA6  0E00               	movlw	0
 18554  003EA8  1A14               	xorwf	___ftge@ff2,f,c
 18555  003EAA  0E00               	movlw	0
 18556  003EAC  1A15               	xorwf	___ftge@ff2+1,f,c
 18557  003EAE  0E80               	movlw	128
 18558  003EB0  1A16               	xorwf	___ftge@ff2+2,f,c
 18559  003EB2  5014               	movf	___ftge@ff2,w,c
 18560  003EB4  5C11               	subwf	___ftge@ff1,w,c
 18561  003EB6  5015               	movf	___ftge@ff2+1,w,c
 18562  003EB8  5812               	subwfb	___ftge@ff1+1,w,c
 18563  003EBA  5016               	movf	___ftge@ff2+2,w,c
 18564  003EBC  5813               	subwfb	___ftge@ff1+2,w,c
 18565  003EBE  B0D8               	btfsc	status,0,c
 18566  003EC0  D002               	goto	l9420
 18567  003EC2  90D8               	bcf	status,0,c
 18568  003EC4  D002               	goto	l1995
 18569  003EC6                     l9420:
 18570  003EC6  80D8               	bsf	status,0,c
 18571  003EC8  D000               	goto	l1995
 18572  003ECA                     l1995:
 18573  003ECA  0012               	return		;funcret
 18574  003ECC                     __end_of___ftge:
 18575                           	opt stack 0
 18576                           tblptru	equ	0xFF8
 18577                           tblptrh	equ	0xFF7
 18578                           tblptrl	equ	0xFF6
 18579                           tablat	equ	0xFF5
 18580                           prodh	equ	0xFF4
 18581                           prodl	equ	0xFF3
 18582                           intcon	equ	0xFF2
 18583                           intcon2	equ	0xFF1
 18584                           postinc0	equ	0xFEE
 18585                           wreg	equ	0xFE8
 18586                           postdec1	equ	0xFE5
 18587                           fsr1l	equ	0xFE1
 18588                           indf2	equ	0xFDF
 18589                           postinc2	equ	0xFDE
 18590                           postdec2	equ	0xFDD
 18591                           fsr2h	equ	0xFDA
 18592                           fsr2l	equ	0xFD9
 18593                           status	equ	0xFD8
 18594                           
 18595 ;; *************** function _drawtext *****************
 18596 ;; Defined at:
 18597 ;;		line 475 in file "ST7735_TFT.c"
 18598 ;; Parameters:    Size  Location     Type
 18599 ;;  x               1    wreg     unsigned char 
 18600 ;;  y               1   56[COMRAM] unsigned char 
 18601 ;;  _text           2   57[COMRAM] PTR unsigned char 
 18602 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 18603 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 18604 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 18605 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 18606 ;;		 -> tempC(4), 
 18607 ;;  color           2   59[COMRAM] unsigned int 
 18608 ;;  bg              2   61[COMRAM] unsigned int 
 18609 ;;  size            1   63[COMRAM] unsigned char 
 18610 ;; Auto vars:     Size  Location     Type
 18611 ;;  x               1   66[COMRAM] unsigned char 
 18612 ;;  i               2   69[COMRAM] unsigned int 
 18613 ;;  textsize        2   67[COMRAM] unsigned int 
 18614 ;;  cursor_x        1   72[COMRAM] unsigned char 
 18615 ;;  cursor_y        1   71[COMRAM] unsigned char 
 18616 ;; Return value:  Size  Location     Type
 18617 ;;		None               void
 18618 ;; Registers used:
 18619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18620 ;; Tracked objects:
 18621 ;;		On entry : 0/0
 18622 ;;		On exit  : 0/0
 18623 ;;		Unchanged: 0/0
 18624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18625 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18626 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18628 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18629 ;;Total ram usage:       17 bytes
 18630 ;; Hardware stack levels used:    1
 18631 ;; Hardware stack levels required when called:    8
 18632 ;; This function calls:
 18633 ;;		_drawChar
 18634 ;;		_strlen
 18635 ;; This function is called by:
 18636 ;;		_Initialize_Screen
 18637 ;;		_Update_Screen
 18638 ;;		_Initialize_Setup_Alarm_Time_Screen
 18639 ;;		_Update_Setup_Alarm_Time_Screen
 18640 ;;		_Initialize_Setup_Fan_Screen
 18641 ;;		_Update_Setup_Fan_Screen
 18642 ;;		_Initialize_Setup_Time_Screen
 18643 ;;		_Update_Setup_Time_Screen
 18644 ;; This function uses a non-reentrant model
 18645 ;;
 18646                           
 18647                           	psect	text90
 18648  003556                     __ptext90:
 18649                           	opt stack 0
 18650  003556                     _drawtext:
 18651                           	opt stack 21
 18652                           
 18653                           ;incstack = 0
 18654                           ;drawtext@x stored from wreg
 18655  003556  6E43               	movwf	drawtext@x,c
 18656                           
 18657                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
 18658                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
 18659                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
 18660  003558  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 18661  00355C  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 18662                           
 18663                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
 18664  003560  C03A  F011         	movff	drawtext@_text,strlen@s
 18665  003564  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 18666  003568  ECEC  F024         	call	_strlen	;wreg free
 18667  00356C  C011  F044         	movff	?_strlen,drawtext@textsize
 18668  003570  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 18669                           
 18670                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
 18671  003574  0E00               	movlw	0
 18672  003576  6E47               	movwf	drawtext@i+1,c
 18673  003578  0E00               	movlw	0
 18674  00357A  6E46               	movwf	drawtext@i,c
 18675  00357C  D056               	goto	l9874
 18676  00357E                     l9848:
 18677                           
 18678                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
 18679  00357E  0100               	movlb	0	; () banked
 18680  003580  51B7               	movf	_wrap& (0+255),w,b
 18681  003582  0100               	movlb	0	; () banked
 18682  003584  B4D8               	btfsc	status,2,c
 18683  003586  D02C               	goto	l9864
 18684                           
 18685                           ; BSR set to: 0
 18686  003588  5040               	movf	drawtext@size,w,c
 18687  00358A  0D05               	mullw	5
 18688  00358C  5049               	movf	drawtext@cursor_x,w,c
 18689  00358E  6E41               	movwf	??_drawtext& (0+255),c
 18690  003590  6A42               	clrf	(??_drawtext+1)& (0+255),c
 18691  003592  50F3               	movf	prodl,w,c
 18692  003594  2641               	addwf	??_drawtext,f,c
 18693  003596  50F4               	movf	prodh,w,c
 18694  003598  2242               	addwfc	??_drawtext+1,f,c
 18695  00359A  BE42               	btfsc	??_drawtext+1,7,c
 18696  00359C  D021               	goto	l9864
 18697  00359E  5042               	movf	??_drawtext+1,w,c
 18698  0035A0  E104               	bnz	u8300
 18699  0035A2  0E81               	movlw	129
 18700  0035A4  5C41               	subwf	??_drawtext,w,c
 18701  0035A6  A0D8               	btfss	status,0,c
 18702  0035A8  D01B               	goto	l9864
 18703  0035AA                     u8300:
 18704                           
 18705                           ; BSR set to: 0
 18706                           ;ST7735_TFT.c: 483: cursor_x = 0;
 18707  0035AA  0E00               	movlw	0
 18708  0035AC  6E49               	movwf	drawtext@cursor_x,c
 18709                           
 18710                           ; BSR set to: 0
 18711                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
 18712  0035AE  5040               	movf	drawtext@size,w,c
 18713  0035B0  0D07               	mullw	7
 18714  0035B2  50F3               	movf	prodl,w,c
 18715  0035B4  2448               	addwf	drawtext@cursor_y,w,c
 18716  0035B6  0F03               	addlw	3
 18717  0035B8  6E48               	movwf	drawtext@cursor_y,c
 18718                           
 18719                           ; BSR set to: 0
 18720                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
 18721  0035BA  0EA0               	movlw	160
 18722  0035BC  6448               	cpfsgt	drawtext@cursor_y,c
 18723  0035BE  D003               	goto	l9860
 18724                           
 18725                           ; BSR set to: 0
 18726  0035C0  0EA0               	movlw	160
 18727  0035C2  6E48               	movwf	drawtext@cursor_y,c
 18728  0035C4  D000               	goto	l9860
 18729  0035C6                     l9860:
 18730                           
 18731                           ; BSR set to: 0
 18732                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
 18733  0035C6  5046               	movf	drawtext@i,w,c
 18734  0035C8  243A               	addwf	drawtext@_text,w,c
 18735  0035CA  6ED9               	movwf	fsr2l,c
 18736  0035CC  5047               	movf	drawtext@i+1,w,c
 18737  0035CE  203B               	addwfc	drawtext@_text+1,w,c
 18738  0035D0  6EDA               	movwf	fsr2h,c
 18739  0035D2  0E20               	movlw	32
 18740  0035D4  18DE               	xorwf	postinc2,w,c
 18741  0035D6  B4D8               	btfsc	status,2,c
 18742  0035D8  D025               	goto	l9872
 18743  0035DA  D002               	goto	l9864
 18744                           
 18745                           ; BSR set to: 0
 18746  0035DC  D023               	goto	l9872
 18747                           
 18748                           ; BSR set to: 0
 18749  0035DE  D000               	goto	l9864
 18750  0035E0                     l9864:
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 18754  0035E0  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 18755  0035E4  5046               	movf	drawtext@i,w,c
 18756  0035E6  243A               	addwf	drawtext@_text,w,c
 18757  0035E8  6ED9               	movwf	fsr2l,c
 18758  0035EA  5047               	movf	drawtext@i+1,w,c
 18759  0035EC  203B               	addwfc	drawtext@_text+1,w,c
 18760  0035EE  6EDA               	movwf	fsr2h,c
 18761  0035F0  50DF               	movf	indf2,w,c
 18762  0035F2  6E2F               	movwf	drawChar@c,c
 18763  0035F4  C03C  F030         	movff	drawtext@color,drawChar@color
 18764  0035F8  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 18765  0035FC  C03E  F032         	movff	drawtext@bg,drawChar@bg
 18766  003600  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 18767  003604  C040  F034         	movff	drawtext@size,drawChar@size
 18768  003608  5049               	movf	drawtext@cursor_x,w,c
 18769  00360A  EC0C  F014         	call	_drawChar
 18770                           
 18771                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
 18772  00360E  5040               	movf	drawtext@size,w,c
 18773  003610  0D06               	mullw	6
 18774  003612  50F3               	movf	prodl,w,c
 18775  003614  2449               	addwf	drawtext@cursor_x,w,c
 18776  003616  6E49               	movwf	drawtext@cursor_x,c
 18777                           
 18778                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
 18779  003618  0E80               	movlw	128
 18780  00361A  6449               	cpfsgt	drawtext@cursor_x,c
 18781  00361C  D003               	goto	l9872
 18782  00361E  0E80               	movlw	128
 18783  003620  6E49               	movwf	drawtext@cursor_x,c
 18784  003622  D000               	goto	l9872
 18785  003624                     l9872:
 18786  003624  4A46               	infsnz	drawtext@i,f,c
 18787  003626  2A47               	incf	drawtext@i+1,f,c
 18788  003628  D000               	goto	l9874
 18789  00362A                     l9874:
 18790  00362A  5044               	movf	drawtext@textsize,w,c
 18791  00362C  5C46               	subwf	drawtext@i,w,c
 18792  00362E  5045               	movf	drawtext@textsize+1,w,c
 18793  003630  5847               	subwfb	drawtext@i+1,w,c
 18794  003632  A0D8               	btfss	status,0,c
 18795  003634  D7A4               	goto	l9848
 18796  003636  0012               	return		;funcret
 18797  003638                     __end_of_drawtext:
 18798                           	opt stack 0
 18799                           tblptru	equ	0xFF8
 18800                           tblptrh	equ	0xFF7
 18801                           tblptrl	equ	0xFF6
 18802                           tablat	equ	0xFF5
 18803                           prodh	equ	0xFF4
 18804                           prodl	equ	0xFF3
 18805                           intcon	equ	0xFF2
 18806                           intcon2	equ	0xFF1
 18807                           postinc0	equ	0xFEE
 18808                           wreg	equ	0xFE8
 18809                           postdec1	equ	0xFE5
 18810                           fsr1l	equ	0xFE1
 18811                           indf2	equ	0xFDF
 18812                           postinc2	equ	0xFDE
 18813                           postdec2	equ	0xFDD
 18814                           fsr2h	equ	0xFDA
 18815                           fsr2l	equ	0xFD9
 18816                           status	equ	0xFD8
 18817                           
 18818 ;; *************** function _strlen *****************
 18819 ;; Defined at:
 18820 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 18821 ;; Parameters:    Size  Location     Type
 18822 ;;  s               2   16[COMRAM] PTR const unsigned char 
 18823 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 18824 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 18825 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 18826 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 18827 ;;		 -> tempC(4), 
 18828 ;; Auto vars:     Size  Location     Type
 18829 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 18830 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 18831 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 18832 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 18833 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 18834 ;;		 -> tempC(4), 
 18835 ;; Return value:  Size  Location     Type
 18836 ;;                  2   16[COMRAM] unsigned int 
 18837 ;; Registers used:
 18838 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18839 ;; Tracked objects:
 18840 ;;		On entry : 0/0
 18841 ;;		On exit  : 0/0
 18842 ;;		Unchanged: 0/0
 18843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18844 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18847 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18848 ;;Total ram usage:        6 bytes
 18849 ;; Hardware stack levels used:    1
 18850 ;; Hardware stack levels required when called:    2
 18851 ;; This function calls:
 18852 ;;		Nothing
 18853 ;; This function is called by:
 18854 ;;		_drawtext
 18855 ;; This function uses a non-reentrant model
 18856 ;;
 18857                           
 18858                           	psect	text91
 18859  0049D8                     __ptext91:
 18860                           	opt stack 0
 18861  0049D8                     _strlen:
 18862                           	opt stack 26
 18863                           
 18864                           ;incstack = 0
 18865  0049D8  C011  F015         	movff	strlen@s,strlen@cp
 18866  0049DC  C012  F016         	movff	strlen@s+1,strlen@cp+1
 18867  0049E0  D003               	goto	l6100
 18868  0049E2                     l6098:
 18869  0049E2  4A15               	infsnz	strlen@cp,f,c
 18870  0049E4  2A16               	incf	strlen@cp+1,f,c
 18871  0049E6  D000               	goto	l6100
 18872  0049E8                     l6100:
 18873  0049E8  C015  FFD9         	movff	strlen@cp,fsr2l
 18874  0049EC  C016  FFDA         	movff	strlen@cp+1,fsr2h
 18875  0049F0  50DF               	movf	indf2,w,c
 18876  0049F2  A4D8               	btfss	status,2,c
 18877  0049F4  D7F6               	goto	l6098
 18878  0049F6  C011  F013         	movff	strlen@s,??_strlen
 18879  0049FA  C012  F014         	movff	strlen@s+1,??_strlen+1
 18880  0049FE  1E13               	comf	??_strlen,f,c
 18881  004A00  1E14               	comf	??_strlen+1,f,c
 18882  004A02  4A13               	infsnz	??_strlen,f,c
 18883  004A04  2A14               	incf	??_strlen+1,f,c
 18884  004A06  5015               	movf	strlen@cp,w,c
 18885  004A08  2413               	addwf	??_strlen,w,c
 18886  004A0A  6E11               	movwf	?_strlen,c
 18887  004A0C  5016               	movf	strlen@cp+1,w,c
 18888  004A0E  2014               	addwfc	??_strlen+1,w,c
 18889  004A10  6E12               	movwf	?_strlen+1,c
 18890  004A12  D000               	goto	l2172
 18891  004A14                     l2172:
 18892  004A14  0012               	return		;funcret
 18893  004A16                     __end_of_strlen:
 18894                           	opt stack 0
 18895                           tblptru	equ	0xFF8
 18896                           tblptrh	equ	0xFF7
 18897                           tblptrl	equ	0xFF6
 18898                           tablat	equ	0xFF5
 18899                           prodh	equ	0xFF4
 18900                           prodl	equ	0xFF3
 18901                           intcon	equ	0xFF2
 18902                           intcon2	equ	0xFF1
 18903                           postinc0	equ	0xFEE
 18904                           wreg	equ	0xFE8
 18905                           postdec1	equ	0xFE5
 18906                           fsr1l	equ	0xFE1
 18907                           indf2	equ	0xFDF
 18908                           postinc2	equ	0xFDE
 18909                           postdec2	equ	0xFDD
 18910                           fsr2h	equ	0xFDA
 18911                           fsr2l	equ	0xFD9
 18912                           status	equ	0xFD8
 18913                           
 18914 ;; *************** function _drawChar *****************
 18915 ;; Defined at:
 18916 ;;		line 448 in file "ST7735_TFT.c"
 18917 ;; Parameters:    Size  Location     Type
 18918 ;;  x               1    wreg     unsigned char 
 18919 ;;  y               1   45[COMRAM] unsigned char 
 18920 ;;  c               1   46[COMRAM] unsigned char 
 18921 ;;  color           2   47[COMRAM] unsigned int 
 18922 ;;  bg              2   49[COMRAM] unsigned int 
 18923 ;;  size            1   51[COMRAM] unsigned char 
 18924 ;; Auto vars:     Size  Location     Type
 18925 ;;  x               1   53[COMRAM] unsigned char 
 18926 ;;  line            1   52[COMRAM] unsigned char 
 18927 ;;  i               1   55[COMRAM] unsigned char 
 18928 ;;  j               1   54[COMRAM] unsigned char 
 18929 ;; Return value:  Size  Location     Type
 18930 ;;		None               void
 18931 ;; Registers used:
 18932 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18933 ;; Tracked objects:
 18934 ;;		On entry : 0/0
 18935 ;;		On exit  : 0/0
 18936 ;;		Unchanged: 0/0
 18937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18938 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18939 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;Total ram usage:       11 bytes
 18943 ;; Hardware stack levels used:    1
 18944 ;; Hardware stack levels required when called:    7
 18945 ;; This function calls:
 18946 ;;		___wmul
 18947 ;;		_drawPixel
 18948 ;;		_fillRect
 18949 ;; This function is called by:
 18950 ;;		_drawtext
 18951 ;; This function uses a non-reentrant model
 18952 ;;
 18953                           
 18954                           	psect	text92
 18955  002818                     __ptext92:
 18956                           	opt stack 0
 18957  002818                     _drawChar:
 18958                           	opt stack 21
 18959                           
 18960                           ;incstack = 0
 18961                           ;drawChar@x stored from wreg
 18962  002818  6E36               	movwf	drawChar@x,c
 18963                           
 18964                           ;ST7735_TFT.c: 450: char i, j;
 18965                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
 18966  00281A  0E80               	movlw	128
 18967  00281C  6036               	cpfslt	drawChar@x,c
 18968  00281E  D0A6               	goto	l755
 18969  002820  0E9F               	movlw	159
 18970  002822  642E               	cpfsgt	drawChar@y,c
 18971  002824  D001               	goto	l9160
 18972                           
 18973                           ;ST7735_TFT.c: 452: return;
 18974  002826  D0A2               	goto	l755
 18975  002828                     l9160:
 18976                           
 18977                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
 18978  002828  5034               	movf	drawChar@size,w,c
 18979  00282A  A4D8               	btfss	status,2,c
 18980  00282C  D003               	goto	l9164
 18981  00282E  0E01               	movlw	1
 18982  002830  6E34               	movwf	drawChar@size,c
 18983  002832  D000               	goto	l9164
 18984  002834                     l9164:
 18985                           
 18986                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
 18987  002834  0E1F               	movlw	31
 18988  002836  642F               	cpfsgt	drawChar@c,c
 18989  002838  D004               	goto	l9168
 18990  00283A  0E7E               	movlw	126
 18991  00283C  642F               	cpfsgt	drawChar@c,c
 18992  00283E  D003               	goto	l757
 18993  002840  D000               	goto	l9168
 18994  002842                     l9168:
 18995                           
 18996                           ;ST7735_TFT.c: 455: c = '?';
 18997  002842  0E3F               	movlw	63
 18998  002844  6E2F               	movwf	drawChar@c,c
 18999  002846                     l757:
 19000                           
 19001                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
 19002  002846  0E00               	movlw	0
 19003  002848  6E38               	movwf	drawChar@i,c
 19004  00284A                     l9170:
 19005  00284A  0E04               	movlw	4
 19006  00284C  6438               	cpfsgt	drawChar@i,c
 19007  00284E  D001               	goto	l9174
 19008  002850  D08D               	goto	l755
 19009  002852                     l9174:
 19010                           
 19011                           ;ST7735_TFT.c: 457: unsigned char line;
 19012                           ;ST7735_TFT.c: 458: if(c < 'S')
 19013  002852  0E53               	movlw	83
 19014  002854  602F               	cpfslt	drawChar@c,c
 19015  002856  D015               	goto	l9178
 19016                           
 19017                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
 19018  002858  0EE0               	movlw	224
 19019  00285A  242F               	addwf	drawChar@c,w,c
 19020  00285C  6E11               	movwf	___wmul@multiplier,c
 19021  00285E  6A12               	clrf	___wmul@multiplier+1,c
 19022  002860  0EFF               	movlw	255
 19023  002862  2212               	addwfc	___wmul@multiplier+1,f,c
 19024  002864  0E00               	movlw	0
 19025  002866  6E14               	movwf	___wmul@multiplicand+1,c
 19026  002868  0E05               	movlw	5
 19027  00286A  6E13               	movwf	___wmul@multiplicand,c
 19028  00286C  EC24  F026         	call	___wmul	;wreg free
 19029  002870  5038               	movf	drawChar@i,w,c
 19030  002872  2611               	addwf	?___wmul,f,c
 19031  002874  0E00               	movlw	0
 19032  002876  2212               	addwfc	?___wmul+1,f,c
 19033  002878  0E43               	movlw	low _font
 19034  00287A  2411               	addwf	?___wmul,w,c
 19035  00287C  6EF6               	movwf	tblptrl,c
 19036  00287E  0EFC               	movlw	high _font
 19037  002880  D014               	goto	L21
 19038  002882                     l9178:
 19039                           
 19040                           ;ST7735_TFT.c: 460: else
 19041                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
 19042  002882  0EAD               	movlw	173
 19043  002884  242F               	addwf	drawChar@c,w,c
 19044  002886  6E11               	movwf	___wmul@multiplier,c
 19045  002888  6A12               	clrf	___wmul@multiplier+1,c
 19046  00288A  0EFF               	movlw	255
 19047  00288C  2212               	addwfc	___wmul@multiplier+1,f,c
 19048  00288E  0E00               	movlw	0
 19049  002890  6E14               	movwf	___wmul@multiplicand+1,c
 19050  002892  0E05               	movlw	5
 19051  002894  6E13               	movwf	___wmul@multiplicand,c
 19052  002896  EC24  F026         	call	___wmul	;wreg free
 19053  00289A  5038               	movf	drawChar@i,w,c
 19054  00289C  2611               	addwf	?___wmul,f,c
 19055  00289E  0E00               	movlw	0
 19056  0028A0  2212               	addwfc	?___wmul+1,f,c
 19057  0028A2  0E42               	movlw	low _font2
 19058  0028A4  2411               	addwf	?___wmul,w,c
 19059  0028A6  6EF6               	movwf	tblptrl,c
 19060  0028A8  0EFD               	movlw	high _font2
 19061  0028AA                     L21:
 19062  0028AA  2012               	addwfc	?___wmul+1,w,c
 19063  0028AC  6EF7               	movwf	tblptrh,c
 19064  0028AE                     	if	0	;There are less than 3 active tblptr bytes
 19065  0028AE                     	endif
 19066  0028AE  0008               	tblrd		*
 19067  0028B0  CFF5 F035          	movff	tablat,drawChar@line
 19068  0028B4  D000               	goto	l9180
 19069  0028B6                     l9180:
 19070                           
 19071                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
 19072  0028B6  0E00               	movlw	0
 19073  0028B8  6E37               	movwf	drawChar@j,c
 19074  0028BA                     l9182:
 19075  0028BA  0E06               	movlw	6
 19076  0028BC  6437               	cpfsgt	drawChar@j,c
 19077  0028BE  D001               	goto	l764
 19078  0028C0  D053               	goto	l9206
 19079  0028C2                     l764:
 19080                           
 19081                           ;ST7735_TFT.c: 463: if(line & 0x01) {
 19082  0028C2  A035               	btfss	drawChar@line,0,c
 19083  0028C4  D023               	goto	l9192
 19084                           
 19085                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
 19086  0028C6  0434               	decf	drawChar@size,w,c
 19087  0028C8  A4D8               	btfss	status,2,c
 19088  0028CA  D00C               	goto	l9190
 19089  0028CC  502E               	movf	drawChar@y,w,c
 19090  0028CE  2437               	addwf	drawChar@j,w,c
 19091  0028D0  6E18               	movwf	drawPixel@y,c
 19092  0028D2  C030  F019         	movff	drawChar@color,drawPixel@color
 19093  0028D6  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 19094  0028DA  5036               	movf	drawChar@x,w,c
 19095  0028DC  2438               	addwf	drawChar@i,w,c
 19096  0028DE  ECCD  F025         	call	_drawPixel
 19097  0028E2  D03E               	goto	l9200
 19098  0028E4                     l9190:
 19099                           
 19100                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
 19101  0028E4  5037               	movf	drawChar@j,w,c
 19102  0028E6  0234               	mulwf	drawChar@size,c
 19103  0028E8  50F3               	movf	prodl,w,c
 19104  0028EA  242E               	addwf	drawChar@y,w,c
 19105  0028EC  6E23               	movwf	fillRect@y,c
 19106  0028EE  C034  F024         	movff	drawChar@size,fillRect@w
 19107  0028F2  C034  F025         	movff	drawChar@size,fillRect@h
 19108  0028F6  C030  F026         	movff	drawChar@color,fillRect@color
 19109  0028FA  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 19110  0028FE  5038               	movf	drawChar@i,w,c
 19111  002900  0234               	mulwf	drawChar@size,c
 19112  002902  50F3               	movf	prodl,w,c
 19113  002904  2436               	addwf	drawChar@x,w,c
 19114  002906  EC43  F024         	call	_fillRect
 19115                           
 19116                           ;ST7735_TFT.c: 466: }
 19117  00290A  D02A               	goto	l9200
 19118  00290C                     l9192:
 19119                           
 19120                           ;ST7735_TFT.c: 467: else if(bg != color) {
 19121  00290C  5030               	movf	drawChar@color,w,c
 19122  00290E  1832               	xorwf	drawChar@bg,w,c
 19123  002910  E104               	bnz	u7280
 19124  002912  5031               	movf	drawChar@color+1,w,c
 19125  002914  1833               	xorwf	drawChar@bg+1,w,c
 19126  002916  B4D8               	btfsc	status,2,c
 19127  002918  D023               	goto	l9200
 19128  00291A                     u7280:
 19129                           
 19130                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
 19131  00291A  0434               	decf	drawChar@size,w,c
 19132  00291C  A4D8               	btfss	status,2,c
 19133  00291E  D00C               	goto	l9198
 19134  002920  502E               	movf	drawChar@y,w,c
 19135  002922  2437               	addwf	drawChar@j,w,c
 19136  002924  6E18               	movwf	drawPixel@y,c
 19137  002926  C032  F019         	movff	drawChar@bg,drawPixel@color
 19138  00292A  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 19139  00292E  5036               	movf	drawChar@x,w,c
 19140  002930  2438               	addwf	drawChar@i,w,c
 19141  002932  ECCD  F025         	call	_drawPixel
 19142  002936  D014               	goto	l9200
 19143  002938                     l9198:
 19144                           
 19145                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
 19146  002938  5037               	movf	drawChar@j,w,c
 19147  00293A  0234               	mulwf	drawChar@size,c
 19148  00293C  50F3               	movf	prodl,w,c
 19149  00293E  242E               	addwf	drawChar@y,w,c
 19150  002940  6E23               	movwf	fillRect@y,c
 19151  002942  C034  F024         	movff	drawChar@size,fillRect@w
 19152  002946  C034  F025         	movff	drawChar@size,fillRect@h
 19153  00294A  C032  F026         	movff	drawChar@bg,fillRect@color
 19154  00294E  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 19155  002952  5038               	movf	drawChar@i,w,c
 19156  002954  0234               	mulwf	drawChar@size,c
 19157  002956  50F3               	movf	prodl,w,c
 19158  002958  2436               	addwf	drawChar@x,w,c
 19159  00295A  EC43  F024         	call	_fillRect
 19160  00295E  D000               	goto	l9200
 19161  002960                     l9200:
 19162  002960  2A37               	incf	drawChar@j,f,c
 19163  002962  90D8               	bcf	status,0,c
 19164  002964  3235               	rrcf	drawChar@line,f,c
 19165  002966  D7A9               	goto	l9182
 19166  002968                     l9206:
 19167  002968  2A38               	incf	drawChar@i,f,c
 19168  00296A  D76F               	goto	l9170
 19169  00296C                     l755:
 19170  00296C  0012               	return		;funcret
 19171  00296E                     __end_of_drawChar:
 19172                           	opt stack 0
 19173                           tblptru	equ	0xFF8
 19174                           tblptrh	equ	0xFF7
 19175                           tblptrl	equ	0xFF6
 19176                           tablat	equ	0xFF5
 19177                           prodh	equ	0xFF4
 19178                           prodl	equ	0xFF3
 19179                           intcon	equ	0xFF2
 19180                           intcon2	equ	0xFF1
 19181                           postinc0	equ	0xFEE
 19182                           wreg	equ	0xFE8
 19183                           postdec1	equ	0xFE5
 19184                           fsr1l	equ	0xFE1
 19185                           indf2	equ	0xFDF
 19186                           postinc2	equ	0xFDE
 19187                           postdec2	equ	0xFDD
 19188                           fsr2h	equ	0xFDA
 19189                           fsr2l	equ	0xFD9
 19190                           status	equ	0xFD8
 19191                           
 19192 ;; *************** function _fillRect *****************
 19193 ;; Defined at:
 19194 ;;		line 438 in file "ST7735_TFT.c"
 19195 ;; Parameters:    Size  Location     Type
 19196 ;;  x               1    wreg     unsigned char 
 19197 ;;  y               1   34[COMRAM] unsigned char 
 19198 ;;  w               1   35[COMRAM] unsigned char 
 19199 ;;  h               1   36[COMRAM] unsigned char 
 19200 ;;  color           2   37[COMRAM] unsigned int 
 19201 ;; Auto vars:     Size  Location     Type
 19202 ;;  x               1   42[COMRAM] unsigned char 
 19203 ;;  i               2   43[COMRAM] int 
 19204 ;; Return value:  Size  Location     Type
 19205 ;;		None               void
 19206 ;; Registers used:
 19207 ;;		wreg, status,2, status,0, cstack
 19208 ;; Tracked objects:
 19209 ;;		On entry : 0/0
 19210 ;;		On exit  : 0/0
 19211 ;;		Unchanged: 0/0
 19212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19213 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19216 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19217 ;;Total ram usage:       11 bytes
 19218 ;; Hardware stack levels used:    1
 19219 ;; Hardware stack levels required when called:    6
 19220 ;; This function calls:
 19221 ;;		_drawFastVLine
 19222 ;; This function is called by:
 19223 ;;		_drawChar
 19224 ;;		_Initialize_Setup_Alarm_Time_Screen
 19225 ;;		_Initialize_Setup_Time_Screen
 19226 ;;		_Update_Setup_Screen_Cursor_Forward
 19227 ;;		_Update_Setup_Screen_Cursor_Backward
 19228 ;; This function uses a non-reentrant model
 19229 ;;
 19230                           
 19231                           	psect	text93
 19232  004886                     __ptext93:
 19233                           	opt stack 0
 19234  004886                     _fillRect:
 19235                           	opt stack 21
 19236                           
 19237                           ;incstack = 0
 19238                           ;fillRect@x stored from wreg
 19239  004886  6E2B               	movwf	fillRect@x,c
 19240                           
 19241                           ;ST7735_TFT.c: 440: signed int i;
 19242                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
 19243  004888  C02B  F02C         	movff	fillRect@x,fillRect@i
 19244  00488C  6A2D               	clrf	fillRect@i+1,c
 19245  00488E  D00E               	goto	l5666
 19246  004890                     l5662:
 19247                           
 19248                           ;ST7735_TFT.c: 443: {
 19249                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
 19250  004890  C023  F018         	movff	fillRect@y,drawFastVLine@y
 19251  004894  C025  F019         	movff	fillRect@h,drawFastVLine@h
 19252  004898  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 19253  00489C  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 19254  0048A0  502C               	movf	fillRect@i,w,c
 19255  0048A2  EC40  F020         	call	_drawFastVLine
 19256  0048A6  4A2C               	infsnz	fillRect@i,f,c
 19257  0048A8  2A2D               	incf	fillRect@i+1,f,c
 19258  0048AA  D000               	goto	l5666
 19259  0048AC                     l5666:
 19260  0048AC  5024               	movf	fillRect@w,w,c
 19261  0048AE  C02B  F028         	movff	fillRect@x,??_fillRect
 19262  0048B2  6A29               	clrf	(??_fillRect+1)& (0+255),c
 19263  0048B4  2628               	addwf	??_fillRect,f,c
 19264  0048B6  0E00               	movlw	0
 19265  0048B8  2229               	addwfc	??_fillRect+1,f,c
 19266  0048BA  5028               	movf	??_fillRect,w,c
 19267  0048BC  5C2C               	subwf	fillRect@i,w,c
 19268  0048BE  502D               	movf	fillRect@i+1,w,c
 19269  0048C0  0A80               	xorlw	128
 19270  0048C2  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 19271  0048C4  5029               	movf	??_fillRect+1,w,c
 19272  0048C6  0A80               	xorlw	128
 19273  0048C8  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 19274  0048CA  A0D8               	btfss	status,0,c
 19275  0048CC  D7E1               	goto	l5662
 19276  0048CE  0012               	return		;funcret
 19277  0048D0                     __end_of_fillRect:
 19278                           	opt stack 0
 19279                           tblptru	equ	0xFF8
 19280                           tblptrh	equ	0xFF7
 19281                           tblptrl	equ	0xFF6
 19282                           tablat	equ	0xFF5
 19283                           prodh	equ	0xFF4
 19284                           prodl	equ	0xFF3
 19285                           intcon	equ	0xFF2
 19286                           intcon2	equ	0xFF1
 19287                           postinc0	equ	0xFEE
 19288                           wreg	equ	0xFE8
 19289                           postdec1	equ	0xFE5
 19290                           fsr1l	equ	0xFE1
 19291                           indf2	equ	0xFDF
 19292                           postinc2	equ	0xFDE
 19293                           postdec2	equ	0xFDD
 19294                           fsr2h	equ	0xFDA
 19295                           fsr2l	equ	0xFD9
 19296                           status	equ	0xFD8
 19297                           
 19298 ;; *************** function _drawFastVLine *****************
 19299 ;; Defined at:
 19300 ;;		line 417 in file "ST7735_TFT.c"
 19301 ;; Parameters:    Size  Location     Type
 19302 ;;  x               1    wreg     unsigned char 
 19303 ;;  y               1   23[COMRAM] unsigned char 
 19304 ;;  h               1   24[COMRAM] unsigned char 
 19305 ;;  color           2   25[COMRAM] unsigned int 
 19306 ;; Auto vars:     Size  Location     Type
 19307 ;;  x               1   33[COMRAM] unsigned char 
 19308 ;;  lo              1   32[COMRAM] unsigned char 
 19309 ;;  hi              1   31[COMRAM] unsigned char 
 19310 ;; Return value:  Size  Location     Type
 19311 ;;		None               void
 19312 ;; Registers used:
 19313 ;;		wreg, status,2, status,0, cstack
 19314 ;; Tracked objects:
 19315 ;;		On entry : 0/0
 19316 ;;		On exit  : 0/0
 19317 ;;		Unchanged: 0/0
 19318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19320 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19321 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19322 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19323 ;;Total ram usage:       11 bytes
 19324 ;; Hardware stack levels used:    1
 19325 ;; Hardware stack levels required when called:    5
 19326 ;; This function calls:
 19327 ;;		_setAddrWindow
 19328 ;;		_spiwrite
 19329 ;; This function is called by:
 19330 ;;		_fillRect
 19331 ;;		_fillCircleHelper
 19332 ;;		_fillCircle
 19333 ;;		_drawRect
 19334 ;; This function uses a non-reentrant model
 19335 ;;
 19336                           
 19337                           	psect	text94
 19338  004080                     __ptext94:
 19339                           	opt stack 0
 19340  004080                     _drawFastVLine:
 19341                           	opt stack 21
 19342                           
 19343                           ;incstack = 0
 19344                           ;drawFastVLine@x stored from wreg
 19345  004080  6E22               	movwf	drawFastVLine@x,c
 19346                           
 19347                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
 19348                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
 19349  004082  0E80               	movlw	128
 19350  004084  6022               	cpfslt	drawFastVLine@x,c
 19351  004086  D03F               	goto	l739
 19352  004088  0E9F               	movlw	159
 19353  00408A  6418               	cpfsgt	drawFastVLine@y,c
 19354  00408C  D001               	goto	l5564
 19355                           
 19356                           ;ST7735_TFT.c: 421: return;
 19357  00408E  D03B               	goto	l739
 19358  004090                     l5564:
 19359                           
 19360                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
 19361  004090  0EFF               	movlw	255
 19362  004092  6E1C               	movwf	??_drawFastVLine& (0+255),c
 19363  004094  0EFF               	movlw	255
 19364  004096  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 19365  004098  5019               	movf	drawFastVLine@h,w,c
 19366  00409A  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 19367  00409E  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 19368  0040A0  261E               	addwf	??_drawFastVLine+2,f,c
 19369  0040A2  0E00               	movlw	0
 19370  0040A4  221F               	addwfc	??_drawFastVLine+3,f,c
 19371  0040A6  501C               	movf	??_drawFastVLine,w,c
 19372  0040A8  261E               	addwf	??_drawFastVLine+2,f,c
 19373  0040AA  501D               	movf	??_drawFastVLine+1,w,c
 19374  0040AC  221F               	addwfc	??_drawFastVLine+3,f,c
 19375  0040AE  BE1F               	btfsc	??_drawFastVLine+3,7,c
 19376  0040B0  D00B               	goto	l5568
 19377  0040B2  501F               	movf	??_drawFastVLine+3,w,c
 19378  0040B4  E104               	bnz	u3380
 19379  0040B6  0EA0               	movlw	160
 19380  0040B8  5C1E               	subwf	??_drawFastVLine+2,w,c
 19381  0040BA  A0D8               	btfss	status,0,c
 19382  0040BC  D005               	goto	l5568
 19383  0040BE                     u3380:
 19384                           
 19385                           ;ST7735_TFT.c: 423: h = 160 - y;
 19386  0040BE  5018               	movf	drawFastVLine@y,w,c
 19387  0040C0  0800               	sublw	0
 19388  0040C2  0FA0               	addlw	160
 19389  0040C4  6E19               	movwf	drawFastVLine@h,c
 19390  0040C6  D000               	goto	l5568
 19391  0040C8                     l5568:
 19392                           
 19393                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
 19394  0040C8  501B               	movf	drawFastVLine@color+1,w,c
 19395  0040CA  6E20               	movwf	drawFastVLine@hi,c
 19396  0040CC  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 19397                           
 19398                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
 19399  0040D0  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 19400  0040D4  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 19401  0040D8  5018               	movf	drawFastVLine@y,w,c
 19402  0040DA  2419               	addwf	drawFastVLine@h,w,c
 19403  0040DC  6E1C               	movwf	??_drawFastVLine& (0+255),c
 19404  0040DE  041C               	decf	??_drawFastVLine,w,c
 19405  0040E0  6E16               	movwf	setAddrWindow@y1,c
 19406  0040E2  5022               	movf	drawFastVLine@x,w,c
 19407  0040E4  EC76  F023         	call	_setAddrWindow
 19408                           
 19409                           ;ST7735_TFT.c: 426: PORTDbits.RD3 = 1;
 19410  0040E8  8683               	bsf	3971,3,c	;volatile
 19411                           
 19412                           ;ST7735_TFT.c: 427: PORTDbits.RD4 = 0;
 19413  0040EA  9883               	bcf	3971,4,c	;volatile
 19414                           
 19415                           ;ST7735_TFT.c: 429: while (h--) {
 19416  0040EC  D007               	goto	l5580
 19417  0040EE                     l5578:
 19418                           
 19419                           ;ST7735_TFT.c: 430: spiwrite(hi);
 19420  0040EE  5020               	movf	drawFastVLine@hi,w,c
 19421  0040F0  EC9E  F027         	call	_spiwrite
 19422                           
 19423                           ;ST7735_TFT.c: 431: spiwrite(lo);
 19424  0040F4  5021               	movf	drawFastVLine@lo,w,c
 19425  0040F6  EC9E  F027         	call	_spiwrite
 19426  0040FA  D000               	goto	l5580
 19427  0040FC                     l5580:
 19428  0040FC  0619               	decf	drawFastVLine@h,f,c
 19429  0040FE  2819               	incf	drawFastVLine@h,w,c
 19430  004100  A4D8               	btfss	status,2,c
 19431  004102  D7F5               	goto	l5578
 19432                           
 19433                           ;ST7735_TFT.c: 432: }
 19434                           ;ST7735_TFT.c: 433: PORTDbits.RD4 = 1;
 19435  004104  8883               	bsf	3971,4,c	;volatile
 19436  004106                     l739:
 19437  004106  0012               	return		;funcret
 19438  004108                     __end_of_drawFastVLine:
 19439                           	opt stack 0
 19440                           tblptru	equ	0xFF8
 19441                           tblptrh	equ	0xFF7
 19442                           tblptrl	equ	0xFF6
 19443                           tablat	equ	0xFF5
 19444                           prodh	equ	0xFF4
 19445                           prodl	equ	0xFF3
 19446                           intcon	equ	0xFF2
 19447                           intcon2	equ	0xFF1
 19448                           postinc0	equ	0xFEE
 19449                           wreg	equ	0xFE8
 19450                           postdec1	equ	0xFE5
 19451                           fsr1l	equ	0xFE1
 19452                           indf2	equ	0xFDF
 19453                           postinc2	equ	0xFDE
 19454                           postdec2	equ	0xFDD
 19455                           fsr2h	equ	0xFDA
 19456                           fsr2l	equ	0xFD9
 19457                           status	equ	0xFD8
 19458                           
 19459 ;; *************** function _drawPixel *****************
 19460 ;; Defined at:
 19461 ;;		line 408 in file "ST7735_TFT.c"
 19462 ;; Parameters:    Size  Location     Type
 19463 ;;  x               1    wreg     unsigned char 
 19464 ;;  y               1   23[COMRAM] unsigned char 
 19465 ;;  color           2   24[COMRAM] unsigned int 
 19466 ;; Auto vars:     Size  Location     Type
 19467 ;;  x               1   26[COMRAM] unsigned char 
 19468 ;; Return value:  Size  Location     Type
 19469 ;;		None               void
 19470 ;; Registers used:
 19471 ;;		wreg, status,2, status,0, cstack
 19472 ;; Tracked objects:
 19473 ;;		On entry : 0/0
 19474 ;;		On exit  : 0/0
 19475 ;;		Unchanged: 0/0
 19476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19477 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19480 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19481 ;;Total ram usage:        4 bytes
 19482 ;; Hardware stack levels used:    1
 19483 ;; Hardware stack levels required when called:    5
 19484 ;; This function calls:
 19485 ;;		_setAddrWindow
 19486 ;;		_write_data
 19487 ;; This function is called by:
 19488 ;;		_drawChar
 19489 ;;		_drawCircle
 19490 ;;		_drawCircleHelper
 19491 ;; This function uses a non-reentrant model
 19492 ;;
 19493                           
 19494                           	psect	text95
 19495  004B9A                     __ptext95:
 19496                           	opt stack 0
 19497  004B9A                     _drawPixel:
 19498                           	opt stack 22
 19499                           
 19500                           ;incstack = 0
 19501                           ;drawPixel@x stored from wreg
 19502  004B9A  6E1B               	movwf	drawPixel@x,c
 19503                           
 19504                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
 19505  004B9C  0E80               	movlw	128
 19506  004B9E  601B               	cpfslt	drawPixel@x,c
 19507  004BA0  D013               	goto	l733
 19508  004BA2  0E9F               	movlw	159
 19509  004BA4  6418               	cpfsgt	drawPixel@y,c
 19510  004BA6  D001               	goto	l5654
 19511                           
 19512                           ;ST7735_TFT.c: 411: return;
 19513  004BA8  D00F               	goto	l733
 19514  004BAA                     l5654:
 19515                           
 19516                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
 19517  004BAA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 19518  004BAE  281B               	incf	drawPixel@x,w,c
 19519  004BB0  6E15               	movwf	setAddrWindow@x1,c
 19520  004BB2  2818               	incf	drawPixel@y,w,c
 19521  004BB4  6E16               	movwf	setAddrWindow@y1,c
 19522  004BB6  501B               	movf	drawPixel@x,w,c
 19523  004BB8  EC76  F023         	call	_setAddrWindow
 19524                           
 19525                           ;ST7735_TFT.c: 413: write_data(color >> 8);
 19526  004BBC  501A               	movf	drawPixel@color+1,w,c
 19527  004BBE  EC09  F028         	call	_write_data
 19528                           
 19529                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
 19530  004BC2  5019               	movf	drawPixel@color,w,c
 19531  004BC4  EC09  F028         	call	_write_data
 19532  004BC8                     l733:
 19533  004BC8  0012               	return		;funcret
 19534  004BCA                     __end_of_drawPixel:
 19535                           	opt stack 0
 19536                           tblptru	equ	0xFF8
 19537                           tblptrh	equ	0xFF7
 19538                           tblptrl	equ	0xFF6
 19539                           tablat	equ	0xFF5
 19540                           prodh	equ	0xFF4
 19541                           prodl	equ	0xFF3
 19542                           intcon	equ	0xFF2
 19543                           intcon2	equ	0xFF1
 19544                           postinc0	equ	0xFEE
 19545                           wreg	equ	0xFE8
 19546                           postdec1	equ	0xFE5
 19547                           fsr1l	equ	0xFE1
 19548                           indf2	equ	0xFDF
 19549                           postinc2	equ	0xFDE
 19550                           postdec2	equ	0xFDD
 19551                           fsr2h	equ	0xFDA
 19552                           fsr2l	equ	0xFD9
 19553                           status	equ	0xFD8
 19554                           
 19555 ;; *************** function _setAddrWindow *****************
 19556 ;; Defined at:
 19557 ;;		line 393 in file "ST7735_TFT.c"
 19558 ;; Parameters:    Size  Location     Type
 19559 ;;  x0              1    wreg     unsigned char 
 19560 ;;  y0              1   19[COMRAM] unsigned char 
 19561 ;;  x1              1   20[COMRAM] unsigned char 
 19562 ;;  y1              1   21[COMRAM] unsigned char 
 19563 ;; Auto vars:     Size  Location     Type
 19564 ;;  x0              1   22[COMRAM] unsigned char 
 19565 ;; Return value:  Size  Location     Type
 19566 ;;		None               void
 19567 ;; Registers used:
 19568 ;;		wreg, status,2, status,0, cstack
 19569 ;; Tracked objects:
 19570 ;;		On entry : 0/0
 19571 ;;		On exit  : 0/0
 19572 ;;		Unchanged: 0/0
 19573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19574 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19577 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19578 ;;Total ram usage:        4 bytes
 19579 ;; Hardware stack levels used:    1
 19580 ;; Hardware stack levels required when called:    4
 19581 ;; This function calls:
 19582 ;;		_write_command
 19583 ;;		_write_data
 19584 ;; This function is called by:
 19585 ;;		_drawPixel
 19586 ;;		_drawFastVLine
 19587 ;;		_fillRectangle
 19588 ;;		_drawFastHLine
 19589 ;; This function uses a non-reentrant model
 19590 ;;
 19591                           
 19592                           	psect	text96
 19593  0046EC                     __ptext96:
 19594                           	opt stack 0
 19595  0046EC                     _setAddrWindow:
 19596                           	opt stack 21
 19597                           
 19598                           ;incstack = 0
 19599                           ;setAddrWindow@x0 stored from wreg
 19600  0046EC  6E17               	movwf	setAddrWindow@x0,c
 19601                           
 19602                           ;ST7735_TFT.c: 395: write_command(0x2A);
 19603  0046EE  0E2A               	movlw	42
 19604  0046F0  EC11  F028         	call	_write_command
 19605                           
 19606                           ;ST7735_TFT.c: 396: write_data(0);
 19607  0046F4  0E00               	movlw	0
 19608  0046F6  EC09  F028         	call	_write_data
 19609                           
 19610                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
 19611  0046FA  5017               	movf	setAddrWindow@x0,w,c
 19612  0046FC  0100               	movlb	0	; () banked
 19613  0046FE  25A9               	addwf	_colstart& (0+255),w,b
 19614  004700  EC09  F028         	call	_write_data
 19615                           
 19616                           ;ST7735_TFT.c: 398: write_data(0);
 19617  004704  0E00               	movlw	0
 19618  004706  EC09  F028         	call	_write_data
 19619                           
 19620                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
 19621  00470A  5015               	movf	setAddrWindow@x1,w,c
 19622  00470C  0100               	movlb	0	; () banked
 19623  00470E  25A9               	addwf	_colstart& (0+255),w,b
 19624  004710  EC09  F028         	call	_write_data
 19625                           
 19626                           ;ST7735_TFT.c: 400: write_command(0x2B);
 19627  004714  0E2B               	movlw	43
 19628  004716  EC11  F028         	call	_write_command
 19629                           
 19630                           ;ST7735_TFT.c: 401: write_data(0);
 19631  00471A  0E00               	movlw	0
 19632  00471C  EC09  F028         	call	_write_data
 19633                           
 19634                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
 19635  004720  5014               	movf	setAddrWindow@y0,w,c
 19636  004722  0100               	movlb	0	; () banked
 19637  004724  25AB               	addwf	_rowstart& (0+255),w,b
 19638  004726  EC09  F028         	call	_write_data
 19639                           
 19640                           ;ST7735_TFT.c: 403: write_data(0);
 19641  00472A  0E00               	movlw	0
 19642  00472C  EC09  F028         	call	_write_data
 19643                           
 19644                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
 19645  004730  5016               	movf	setAddrWindow@y1,w,c
 19646  004732  0100               	movlb	0	; () banked
 19647  004734  25AB               	addwf	_rowstart& (0+255),w,b
 19648  004736  EC09  F028         	call	_write_data
 19649                           
 19650                           ;ST7735_TFT.c: 405: write_command(0x2C);
 19651  00473A  0E2C               	movlw	44
 19652  00473C  EC11  F028         	call	_write_command
 19653  004740  0012               	return		;funcret
 19654  004742                     __end_of_setAddrWindow:
 19655                           	opt stack 0
 19656                           tblptru	equ	0xFF8
 19657                           tblptrh	equ	0xFF7
 19658                           tblptrl	equ	0xFF6
 19659                           tablat	equ	0xFF5
 19660                           prodh	equ	0xFF4
 19661                           prodl	equ	0xFF3
 19662                           intcon	equ	0xFF2
 19663                           intcon2	equ	0xFF1
 19664                           postinc0	equ	0xFEE
 19665                           wreg	equ	0xFE8
 19666                           postdec1	equ	0xFE5
 19667                           fsr1l	equ	0xFE1
 19668                           indf2	equ	0xFDF
 19669                           postinc2	equ	0xFDE
 19670                           postdec2	equ	0xFDD
 19671                           fsr2h	equ	0xFDA
 19672                           fsr2l	equ	0xFD9
 19673                           status	equ	0xFD8
 19674                           
 19675 ;; *************** function _write_data *****************
 19676 ;; Defined at:
 19677 ;;		line 210 in file "ST7735_TFT.c"
 19678 ;; Parameters:    Size  Location     Type
 19679 ;;  data_           1    wreg     unsigned char 
 19680 ;; Auto vars:     Size  Location     Type
 19681 ;;  data_           1   18[COMRAM] unsigned char 
 19682 ;; Return value:  Size  Location     Type
 19683 ;;		None               void
 19684 ;; Registers used:
 19685 ;;		wreg, status,2, cstack
 19686 ;; Tracked objects:
 19687 ;;		On entry : 0/0
 19688 ;;		On exit  : 0/0
 19689 ;;		Unchanged: 0/0
 19690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19694 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19695 ;;Total ram usage:        1 bytes
 19696 ;; Hardware stack levels used:    1
 19697 ;; Hardware stack levels required when called:    3
 19698 ;; This function calls:
 19699 ;;		_spiwrite
 19700 ;; This function is called by:
 19701 ;;		_Rcmd1
 19702 ;;		_Rcmd2red
 19703 ;;		_Rcmd3
 19704 ;;		_setAddrWindow
 19705 ;;		_drawPixel
 19706 ;;		_TFT_GreenTab_Initialize
 19707 ;;		_Bcmd
 19708 ;;		_setScrollDefinition
 19709 ;;		_Rcmd2green
 19710 ;;		_VerticalScroll
 19711 ;; This function uses a non-reentrant model
 19712 ;;
 19713                           
 19714                           	psect	text97
 19715  005012                     __ptext97:
 19716                           	opt stack 0
 19717  005012                     _write_data:
 19718                           	opt stack 21
 19719                           
 19720                           ;incstack = 0
 19721                           ;write_data@data_ stored from wreg
 19722  005012  6E13               	movwf	write_data@data_,c
 19723                           
 19724                           ;ST7735_TFT.c: 212: PORTDbits.RD4 = 0;
 19725  005014  9883               	bcf	3971,4,c	;volatile
 19726                           
 19727                           ;ST7735_TFT.c: 213: PORTDbits.RD3 = 1;
 19728  005016  8683               	bsf	3971,3,c	;volatile
 19729                           
 19730                           ;ST7735_TFT.c: 214: spiwrite(data_);
 19731  005018  5013               	movf	write_data@data_,w,c
 19732  00501A  EC9E  F027         	call	_spiwrite
 19733                           
 19734                           ;ST7735_TFT.c: 215: PORTDbits.RD4 = 1;
 19735  00501E  8883               	bsf	3971,4,c	;volatile
 19736  005020  0012               	return		;funcret
 19737  005022                     __end_of_write_data:
 19738                           	opt stack 0
 19739                           tblptru	equ	0xFF8
 19740                           tblptrh	equ	0xFF7
 19741                           tblptrl	equ	0xFF6
 19742                           tablat	equ	0xFF5
 19743                           prodh	equ	0xFF4
 19744                           prodl	equ	0xFF3
 19745                           intcon	equ	0xFF2
 19746                           intcon2	equ	0xFF1
 19747                           postinc0	equ	0xFEE
 19748                           wreg	equ	0xFE8
 19749                           postdec1	equ	0xFE5
 19750                           fsr1l	equ	0xFE1
 19751                           indf2	equ	0xFDF
 19752                           postinc2	equ	0xFDE
 19753                           postdec2	equ	0xFDD
 19754                           fsr2h	equ	0xFDA
 19755                           fsr2l	equ	0xFD9
 19756                           status	equ	0xFD8
 19757                           
 19758 ;; *************** function _write_command *****************
 19759 ;; Defined at:
 19760 ;;		line 199 in file "ST7735_TFT.c"
 19761 ;; Parameters:    Size  Location     Type
 19762 ;;  cmd_            1    wreg     unsigned char 
 19763 ;; Auto vars:     Size  Location     Type
 19764 ;;  cmd_            1   18[COMRAM] unsigned char 
 19765 ;; Return value:  Size  Location     Type
 19766 ;;		None               void
 19767 ;; Registers used:
 19768 ;;		wreg, status,2, cstack
 19769 ;; Tracked objects:
 19770 ;;		On entry : 0/0
 19771 ;;		On exit  : 0/0
 19772 ;;		Unchanged: 0/0
 19773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19778 ;;Total ram usage:        1 bytes
 19779 ;; Hardware stack levels used:    1
 19780 ;; Hardware stack levels required when called:    3
 19781 ;; This function calls:
 19782 ;;		_spiwrite
 19783 ;; This function is called by:
 19784 ;;		_Rcmd1
 19785 ;;		_Rcmd2red
 19786 ;;		_Rcmd3
 19787 ;;		_setAddrWindow
 19788 ;;		_TFT_GreenTab_Initialize
 19789 ;;		_Bcmd
 19790 ;;		_setScrollDefinition
 19791 ;;		_Rcmd2green
 19792 ;;		_VerticalScroll
 19793 ;; This function uses a non-reentrant model
 19794 ;;
 19795                           
 19796                           	psect	text98
 19797  005022                     __ptext98:
 19798                           	opt stack 0
 19799  005022                     _write_command:
 19800                           	opt stack 21
 19801                           
 19802                           ;incstack = 0
 19803                           ;write_command@cmd_ stored from wreg
 19804  005022  6E13               	movwf	write_command@cmd_,c
 19805                           
 19806                           ;ST7735_TFT.c: 201: PORTDbits.RD4 = 0;
 19807  005024  9883               	bcf	3971,4,c	;volatile
 19808                           
 19809                           ;ST7735_TFT.c: 203: PORTDbits.RD3 = 0;
 19810  005026  9683               	bcf	3971,3,c	;volatile
 19811                           
 19812                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
 19813  005028  5013               	movf	write_command@cmd_,w,c
 19814  00502A  EC9E  F027         	call	_spiwrite
 19815                           
 19816                           ;ST7735_TFT.c: 206: PORTDbits.RD4 = 1;
 19817  00502E  8883               	bsf	3971,4,c	;volatile
 19818  005030  0012               	return		;funcret
 19819  005032                     __end_of_write_command:
 19820                           	opt stack 0
 19821                           tblptru	equ	0xFF8
 19822                           tblptrh	equ	0xFF7
 19823                           tblptrl	equ	0xFF6
 19824                           tablat	equ	0xFF5
 19825                           prodh	equ	0xFF4
 19826                           prodl	equ	0xFF3
 19827                           intcon	equ	0xFF2
 19828                           intcon2	equ	0xFF1
 19829                           postinc0	equ	0xFEE
 19830                           wreg	equ	0xFE8
 19831                           postdec1	equ	0xFE5
 19832                           fsr1l	equ	0xFE1
 19833                           indf2	equ	0xFDF
 19834                           postinc2	equ	0xFDE
 19835                           postdec2	equ	0xFDD
 19836                           fsr2h	equ	0xFDA
 19837                           fsr2l	equ	0xFD9
 19838                           status	equ	0xFD8
 19839                           
 19840 ;; *************** function _spiwrite *****************
 19841 ;; Defined at:
 19842 ;;		line 190 in file "ST7735_TFT.c"
 19843 ;; Parameters:    Size  Location     Type
 19844 ;;  spidata         1    wreg     unsigned char 
 19845 ;; Auto vars:     Size  Location     Type
 19846 ;;  spidata         1   17[COMRAM] unsigned char 
 19847 ;;  x               1   16[COMRAM] unsigned char 
 19848 ;; Return value:  Size  Location     Type
 19849 ;;		None               void
 19850 ;; Registers used:
 19851 ;;		wreg
 19852 ;; Tracked objects:
 19853 ;;		On entry : 0/0
 19854 ;;		On exit  : 0/0
 19855 ;;		Unchanged: 0/0
 19856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19860 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19861 ;;Total ram usage:        2 bytes
 19862 ;; Hardware stack levels used:    1
 19863 ;; Hardware stack levels required when called:    2
 19864 ;; This function calls:
 19865 ;;		Nothing
 19866 ;; This function is called by:
 19867 ;;		_write_command
 19868 ;;		_write_data
 19869 ;;		_drawFastVLine
 19870 ;;		_fillRectangle
 19871 ;;		_drawFastHLine
 19872 ;; This function uses a non-reentrant model
 19873 ;;
 19874                           
 19875                           	psect	text99
 19876  004F3C                     __ptext99:
 19877                           	opt stack 0
 19878  004F3C                     _spiwrite:
 19879                           	opt stack 23
 19880                           
 19881                           ;incstack = 0
 19882                           ;spiwrite@spidata stored from wreg
 19883  004F3C  6E12               	movwf	spiwrite@spidata,c
 19884                           
 19885                           ;ST7735_TFT.c: 192: char x;
 19886                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
 19887  004F3E  969E               	bcf	3998,3,c	;volatile
 19888                           
 19889                           ;ST7735_TFT.c: 194: x = SSPBUF;
 19890  004F40  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 19891                           
 19892                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
 19893  004F44  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 19894                           
 19895                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
 19896  004F48  D000               	goto	l689
 19897  004F4A                     l689:
 19898  004F4A  A0C7               	btfss	4039,0,c	;volatile
 19899  004F4C  D7FE               	goto	l689
 19900  004F4E  0012               	return		;funcret
 19901  004F50                     __end_of_spiwrite:
 19902                           	opt stack 0
 19903                           tblptru	equ	0xFF8
 19904                           tblptrh	equ	0xFF7
 19905                           tblptrl	equ	0xFF6
 19906                           tablat	equ	0xFF5
 19907                           prodh	equ	0xFF4
 19908                           prodl	equ	0xFF3
 19909                           intcon	equ	0xFF2
 19910                           intcon2	equ	0xFF1
 19911                           postinc0	equ	0xFEE
 19912                           wreg	equ	0xFE8
 19913                           postdec1	equ	0xFE5
 19914                           fsr1l	equ	0xFE1
 19915                           indf2	equ	0xFDF
 19916                           postinc2	equ	0xFDE
 19917                           postdec2	equ	0xFDD
 19918                           fsr2h	equ	0xFDA
 19919                           fsr2l	equ	0xFD9
 19920                           status	equ	0xFD8
 19921                           
 19922 ;; *************** function ___wmul *****************
 19923 ;; Defined at:
 19924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 19925 ;; Parameters:    Size  Location     Type
 19926 ;;  multiplier      2   16[COMRAM] unsigned int 
 19927 ;;  multiplicand    2   18[COMRAM] unsigned int 
 19928 ;; Auto vars:     Size  Location     Type
 19929 ;;  product         2   20[COMRAM] unsigned int 
 19930 ;; Return value:  Size  Location     Type
 19931 ;;                  2   16[COMRAM] unsigned int 
 19932 ;; Registers used:
 19933 ;;		wreg, status,2, status,0, prodl, prodh
 19934 ;; Tracked objects:
 19935 ;;		On entry : 0/0
 19936 ;;		On exit  : 0/0
 19937 ;;		Unchanged: 0/0
 19938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19939 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19943 ;;Total ram usage:        6 bytes
 19944 ;; Hardware stack levels used:    1
 19945 ;; Hardware stack levels required when called:    2
 19946 ;; This function calls:
 19947 ;;		Nothing
 19948 ;; This function is called by:
 19949 ;;		_get_RPM
 19950 ;;		_main
 19951 ;;		_delay_ms
 19952 ;;		_drawChar
 19953 ;;		_read_volt
 19954 ;;		_fround
 19955 ;;		_scale
 19956 ;;		_printf
 19957 ;; This function uses a non-reentrant model
 19958 ;;
 19959                           
 19960                           	psect	text100
 19961  004C48                     __ptext100:
 19962                           	opt stack 0
 19963  004C48                     ___wmul:
 19964                           	opt stack 27
 19965                           
 19966                           ;incstack = 0
 19967  004C48  5011               	movf	___wmul@multiplier,w,c
 19968  004C4A  0213               	mulwf	___wmul@multiplicand,c
 19969  004C4C  CFF3 F015          	movff	prodl,___wmul@product
 19970  004C50  CFF4 F016          	movff	prodh,___wmul@product+1
 19971  004C54  5011               	movf	___wmul@multiplier,w,c
 19972  004C56  0214               	mulwf	___wmul@multiplicand+1,c
 19973  004C58  50F3               	movf	prodl,w,c
 19974  004C5A  2616               	addwf	___wmul@product+1,f,c
 19975  004C5C  5012               	movf	___wmul@multiplier+1,w,c
 19976  004C5E  0213               	mulwf	___wmul@multiplicand,c
 19977  004C60  50F3               	movf	prodl,w,c
 19978  004C62  2616               	addwf	___wmul@product+1,f,c
 19979  004C64  C015  F011         	movff	___wmul@product,?___wmul
 19980  004C68  C016  F012         	movff	___wmul@product+1,?___wmul+1
 19981  004C6C  D000               	goto	l1572
 19982  004C6E                     l1572:
 19983  004C6E  0012               	return		;funcret
 19984  004C70                     __end_of___wmul:
 19985                           	opt stack 0
 19986                           tblptru	equ	0xFF8
 19987                           tblptrh	equ	0xFF7
 19988                           tblptrl	equ	0xFF6
 19989                           tablat	equ	0xFF5
 19990                           prodh	equ	0xFF4
 19991                           prodl	equ	0xFF3
 19992                           intcon	equ	0xFF2
 19993                           intcon2	equ	0xFF1
 19994                           postinc0	equ	0xFEE
 19995                           wreg	equ	0xFE8
 19996                           postdec1	equ	0xFE5
 19997                           fsr1l	equ	0xFE1
 19998                           indf2	equ	0xFDF
 19999                           postinc2	equ	0xFDE
 20000                           postdec2	equ	0xFDD
 20001                           fsr2h	equ	0xFDA
 20002                           fsr2l	equ	0xFD9
 20003                           status	equ	0xFD8
 20004                           
 20005 ;; *************** function _Do_Init *****************
 20006 ;; Defined at:
 20007 ;;		line 92 in file "Main.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;		None
 20010 ;; Auto vars:     Size  Location     Type
 20011 ;;		None
 20012 ;; Return value:  Size  Location     Type
 20013 ;;		None               void
 20014 ;; Registers used:
 20015 ;;		wreg, status,2, status,0, cstack
 20016 ;; Tracked objects:
 20017 ;;		On entry : 0/0
 20018 ;;		On exit  : 0/0
 20019 ;;		Unchanged: 0/0
 20020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20025 ;;Total ram usage:        0 bytes
 20026 ;; Hardware stack levels used:    1
 20027 ;; Hardware stack levels required when called:    6
 20028 ;; This function calls:
 20029 ;;		_DS1621_Init
 20030 ;;		_I2C_Init
 20031 ;;		_Init_ADC
 20032 ;;		_Init_Interrupt
 20033 ;;		_Turn_Off_Fan
 20034 ;;		_init_UART
 20035 ;; This function is called by:
 20036 ;;		_main
 20037 ;; This function uses a non-reentrant model
 20038 ;;
 20039                           
 20040                           	psect	text101
 20041  004634                     __ptext101:
 20042                           	opt stack 0
 20043  004634                     _Do_Init:
 20044                           	opt stack 24
 20045                           
 20046                           ;Main.c: 94: init_UART();
 20047                           
 20048                           ;incstack = 0
 20049  004634  ECA8  F027         	call	_init_UART	;wreg free
 20050                           
 20051                           ;Main.c: 95: Init_ADC();
 20052  004638  EC20  F028         	call	_Init_ADC	;wreg free
 20053                           
 20054                           ;Main.c: 96: OSCCON=0x70;
 20055  00463C  0E70               	movlw	112
 20056  00463E  6ED3               	movwf	4051,c	;volatile
 20057                           
 20058                           ;Main.c: 98: ADCON1=0x0E;
 20059  004640  0E0E               	movlw	14
 20060  004642  6EC1               	movwf	4033,c	;volatile
 20061                           
 20062                           ;Main.c: 99: TRISA = 0x11;
 20063  004644  0E11               	movlw	17
 20064  004646  6E92               	movwf	3986,c	;volatile
 20065                           
 20066                           ;Main.c: 100: TRISB = 0x27;
 20067  004648  0E27               	movlw	39
 20068  00464A  6E93               	movwf	3987,c	;volatile
 20069                           
 20070                           ;Main.c: 101: TRISC = 0x01;
 20071  00464C  0E01               	movlw	1
 20072  00464E  6E94               	movwf	3988,c	;volatile
 20073                           
 20074                           ;Main.c: 102: TRISD = 0x00;
 20075  004650  0E00               	movlw	0
 20076  004652  6E95               	movwf	3989,c	;volatile
 20077                           
 20078                           ;Main.c: 103: TRISE = 0x00;
 20079  004654  0E00               	movlw	0
 20080  004656  6E96               	movwf	3990,c	;volatile
 20081                           
 20082                           ;Main.c: 104: PORTE = 0x00;
 20083  004658  0E00               	movlw	0
 20084  00465A  6E84               	movwf	3972,c	;volatile
 20085                           
 20086                           ;Main.c: 106: FAN = 0;
 20087  00465C  0E00               	movlw	0
 20088  00465E  0100               	movlb	0	; () banked
 20089  004660  6F9B               	movwf	_FAN& (0+255),b
 20090                           
 20091                           ; BSR set to: 0
 20092                           ;Main.c: 107: RBPU=0;
 20093  004662  9EF1               	bcf	intcon2,7,c	;volatile
 20094                           
 20095                           ; BSR set to: 0
 20096                           ;Main.c: 109: TMR3L = 0x00;
 20097  004664  0E00               	movlw	0
 20098  004666  6EB2               	movwf	4018,c	;volatile
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;Main.c: 110: T3CON = 0x03;
 20102  004668  0E03               	movlw	3
 20103  00466A  6EB1               	movwf	4017,c	;volatile
 20104                           
 20105                           ; BSR set to: 0
 20106                           ;Main.c: 111: I2C_Init(100000);
 20107  00466C  0EA0               	movlw	160
 20108  00466E  6E11               	movwf	I2C_Init@c,c
 20109  004670  0E86               	movlw	134
 20110  004672  6E12               	movwf	I2C_Init@c+1,c
 20111  004674  0E01               	movlw	1
 20112  004676  6E13               	movwf	I2C_Init@c+2,c
 20113  004678  0E00               	movlw	0
 20114  00467A  6E14               	movwf	I2C_Init@c+3,c
 20115  00467C  EC3A  F028         	call	_I2C_Init	;wreg free
 20116                           
 20117                           ;Main.c: 113: DS1621_Init();
 20118  004680  EC01  F027         	call	_DS1621_Init	;wreg free
 20119                           
 20120                           ;Main.c: 114: Init_Interrupt();
 20121  004684  ECE1  F026         	call	_Init_Interrupt	;wreg free
 20122                           
 20123                           ;Main.c: 115: Turn_Off_Fan();
 20124  004688  EC2E  F028         	call	_Turn_Off_Fan	;wreg free
 20125                           
 20126                           ;Main.c: 116: fan_set_temp = 75;
 20127  00468C  0E4B               	movlw	75
 20128  00468E  0100               	movlb	0	; () banked
 20129  004690  6FB5               	movwf	_fan_set_temp& (0+255),b
 20130                           
 20131                           ; BSR set to: 0
 20132  004692  0012               	return		;funcret
 20133  004694                     __end_of_Do_Init:
 20134                           	opt stack 0
 20135                           tblptru	equ	0xFF8
 20136                           tblptrh	equ	0xFF7
 20137                           tblptrl	equ	0xFF6
 20138                           tablat	equ	0xFF5
 20139                           prodh	equ	0xFF4
 20140                           prodl	equ	0xFF3
 20141                           intcon	equ	0xFF2
 20142                           intcon2	equ	0xFF1
 20143                           postinc0	equ	0xFEE
 20144                           wreg	equ	0xFE8
 20145                           postdec1	equ	0xFE5
 20146                           fsr1l	equ	0xFE1
 20147                           indf2	equ	0xFDF
 20148                           postinc2	equ	0xFDE
 20149                           postdec2	equ	0xFDD
 20150                           fsr2h	equ	0xFDA
 20151                           fsr2l	equ	0xFD9
 20152                           status	equ	0xFD8
 20153                           
 20154 ;; *************** function _init_UART *****************
 20155 ;; Defined at:
 20156 ;;		line 84 in file "Main.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;		None
 20159 ;; Auto vars:     Size  Location     Type
 20160 ;;		None
 20161 ;; Return value:  Size  Location     Type
 20162 ;;		None               void
 20163 ;; Registers used:
 20164 ;;		wreg, status,2, cstack
 20165 ;; Tracked objects:
 20166 ;;		On entry : 0/0
 20167 ;;		On exit  : 0/0
 20168 ;;		Unchanged: 0/0
 20169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20174 ;;Total ram usage:        0 bytes
 20175 ;; Hardware stack levels used:    1
 20176 ;; Hardware stack levels required when called:    3
 20177 ;; This function calls:
 20178 ;;		_OpenUSART
 20179 ;; This function is called by:
 20180 ;;		_Do_Init
 20181 ;; This function uses a non-reentrant model
 20182 ;;
 20183                           
 20184                           	psect	text102
 20185  004F50                     __ptext102:
 20186                           	opt stack 0
 20187  004F50                     _init_UART:
 20188                           	opt stack 26
 20189                           
 20190                           ;Main.c: 86: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;incstack = 0
 20194  004F50  0E00               	movlw	0
 20195  004F52  6E12               	movwf	OpenUSART@spbrg+1,c
 20196  004F54  0E19               	movlw	25
 20197  004F56  6E11               	movwf	OpenUSART@spbrg,c
 20198  004F58  0E3C               	movlw	60
 20199  004F5A  ECB9  F021         	call	_OpenUSART
 20200                           
 20201                           ;Main.c: 87: OSCCON = 0x70;
 20202  004F5E  0E70               	movlw	112
 20203  004F60  6ED3               	movwf	4051,c	;volatile
 20204  004F62  0012               	return		;funcret
 20205  004F64                     __end_of_init_UART:
 20206                           	opt stack 0
 20207                           tblptru	equ	0xFF8
 20208                           tblptrh	equ	0xFF7
 20209                           tblptrl	equ	0xFF6
 20210                           tablat	equ	0xFF5
 20211                           prodh	equ	0xFF4
 20212                           prodl	equ	0xFF3
 20213                           intcon	equ	0xFF2
 20214                           intcon2	equ	0xFF1
 20215                           postinc0	equ	0xFEE
 20216                           wreg	equ	0xFE8
 20217                           postdec1	equ	0xFE5
 20218                           fsr1l	equ	0xFE1
 20219                           indf2	equ	0xFDF
 20220                           postinc2	equ	0xFDE
 20221                           postdec2	equ	0xFDD
 20222                           fsr2h	equ	0xFDA
 20223                           fsr2l	equ	0xFD9
 20224                           status	equ	0xFD8
 20225                           
 20226 ;; *************** function _OpenUSART *****************
 20227 ;; Defined at:
 20228 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 20229 ;; Parameters:    Size  Location     Type
 20230 ;;  config          1    wreg     unsigned char 
 20231 ;;  spbrg           2   16[COMRAM] unsigned int 
 20232 ;; Auto vars:     Size  Location     Type
 20233 ;;  config          1   18[COMRAM] unsigned char 
 20234 ;; Return value:  Size  Location     Type
 20235 ;;		None               void
 20236 ;; Registers used:
 20237 ;;		wreg, status,2
 20238 ;; Tracked objects:
 20239 ;;		On entry : 0/0
 20240 ;;		On exit  : 0/0
 20241 ;;		Unchanged: 0/0
 20242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20247 ;;Total ram usage:        3 bytes
 20248 ;; Hardware stack levels used:    1
 20249 ;; Hardware stack levels required when called:    2
 20250 ;; This function calls:
 20251 ;;		Nothing
 20252 ;; This function is called by:
 20253 ;;		_init_UART
 20254 ;; This function uses a non-reentrant model
 20255 ;;
 20256                           
 20257                           	psect	text103
 20258  004372                     __ptext103:
 20259                           	opt stack 0
 20260  004372                     _OpenUSART:
 20261                           	opt stack 26
 20262                           
 20263                           ;incstack = 0
 20264                           ;OpenUSART@config stored from wreg
 20265  004372  6E13               	movwf	OpenUSART@config,c
 20266  004374  0E00               	movlw	0
 20267  004376  6EAC               	movwf	4012,c	;volatile
 20268  004378  0E00               	movlw	0
 20269  00437A  6EAB               	movwf	4011,c	;volatile
 20270  00437C  A013               	btfss	OpenUSART@config,0,c
 20271  00437E  D002               	goto	l7142
 20272  004380  88AC               	bsf	4012,4,c	;volatile
 20273  004382  D000               	goto	l7142
 20274  004384                     l7142:
 20275  004384  A213               	btfss	OpenUSART@config,1,c
 20276  004386  D003               	goto	l7146
 20277  004388  8CAC               	bsf	4012,6,c	;volatile
 20278  00438A  8CAB               	bsf	4011,6,c	;volatile
 20279  00438C  D000               	goto	l7146
 20280  00438E                     l7146:
 20281  00438E  A413               	btfss	OpenUSART@config,2,c
 20282  004390  D002               	goto	l7150
 20283  004392  8EAC               	bsf	4012,7,c	;volatile
 20284  004394  D000               	goto	l7150
 20285  004396                     l7150:
 20286  004396  A613               	btfss	OpenUSART@config,3,c
 20287  004398  D002               	goto	l1560
 20288  00439A  88AB               	bsf	4011,4,c	;volatile
 20289  00439C  D002               	goto	l7154
 20290  00439E                     l1560:
 20291  00439E  8AAB               	bsf	4011,5,c	;volatile
 20292  0043A0  D000               	goto	l7154
 20293  0043A2                     l7154:
 20294  0043A2  B813               	btfsc	OpenUSART@config,4,c
 20295  0043A4  84AC               	bsf	4012,2,c	;volatile
 20296  0043A6  989E               	bcf	3998,4,c	;volatile
 20297  0043A8  AA13               	btfss	OpenUSART@config,5,c
 20298  0043AA  D002               	goto	l7162
 20299  0043AC  86AB               	bsf	4011,3,c	;volatile
 20300  0043AE  D000               	goto	l7162
 20301  0043B0                     l7162:
 20302  0043B0  AC13               	btfss	OpenUSART@config,6,c
 20303  0043B2  D002               	goto	l1564
 20304  0043B4  8A9D               	bsf	3997,5,c	;volatile
 20305  0043B6  D001               	goto	l1565
 20306  0043B8                     l1564:
 20307  0043B8  9A9D               	bcf	3997,5,c	;volatile
 20308  0043BA                     l1565:
 20309  0043BA  9A9E               	bcf	3998,5,c	;volatile
 20310  0043BC  AE13               	btfss	OpenUSART@config,7,c
 20311  0043BE  D002               	goto	l1566
 20312  0043C0  889D               	bsf	3997,4,c	;volatile
 20313  0043C2  D001               	goto	l1567
 20314  0043C4                     l1566:
 20315  0043C4  989D               	bcf	3997,4,c	;volatile
 20316  0043C6                     l1567:
 20317  0043C6  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 20318  0043CA  5012               	movf	OpenUSART@spbrg+1,w,c
 20319  0043CC  6EB0               	movwf	4016,c	;volatile
 20320  0043CE  8AAC               	bsf	4012,5,c	;volatile
 20321  0043D0  8EAB               	bsf	4011,7,c	;volatile
 20322  0043D2  9C94               	bcf	3988,6,c	;volatile
 20323  0043D4  8E94               	bsf	3988,7,c	;volatile
 20324  0043D6  B8AC               	btfsc	4012,4,c	;volatile
 20325  0043D8  BEAC               	btfsc	4012,7,c	;volatile
 20326  0043DA  D002               	goto	l1569
 20327  0043DC  8C94               	bsf	3988,6,c	;volatile
 20328  0043DE  D000               	goto	l1569
 20329  0043E0                     l1569:
 20330  0043E0  0012               	return		;funcret
 20331  0043E2                     __end_of_OpenUSART:
 20332                           	opt stack 0
 20333                           tblptru	equ	0xFF8
 20334                           tblptrh	equ	0xFF7
 20335                           tblptrl	equ	0xFF6
 20336                           tablat	equ	0xFF5
 20337                           prodh	equ	0xFF4
 20338                           prodl	equ	0xFF3
 20339                           intcon	equ	0xFF2
 20340                           intcon2	equ	0xFF1
 20341                           postinc0	equ	0xFEE
 20342                           wreg	equ	0xFE8
 20343                           postdec1	equ	0xFE5
 20344                           fsr1l	equ	0xFE1
 20345                           indf2	equ	0xFDF
 20346                           postinc2	equ	0xFDE
 20347                           postdec2	equ	0xFDD
 20348                           fsr2h	equ	0xFDA
 20349                           fsr2l	equ	0xFD9
 20350                           status	equ	0xFD8
 20351                           
 20352 ;; *************** function _Turn_Off_Fan *****************
 20353 ;; Defined at:
 20354 ;;		line 80 in file "Fan_Support.c"
 20355 ;; Parameters:    Size  Location     Type
 20356 ;;		None
 20357 ;; Auto vars:     Size  Location     Type
 20358 ;;		None
 20359 ;; Return value:  Size  Location     Type
 20360 ;;		None               void
 20361 ;; Registers used:
 20362 ;;		wreg, status,2
 20363 ;; Tracked objects:
 20364 ;;		On entry : 0/0
 20365 ;;		On exit  : 0/0
 20366 ;;		Unchanged: 0/0
 20367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20372 ;;Total ram usage:        0 bytes
 20373 ;; Hardware stack levels used:    1
 20374 ;; Hardware stack levels required when called:    2
 20375 ;; This function calls:
 20376 ;;		Nothing
 20377 ;; This function is called by:
 20378 ;;		_Do_Init
 20379 ;;		_Toggle_Fan
 20380 ;; This function uses a non-reentrant model
 20381 ;;
 20382                           
 20383                           	psect	text104
 20384  00505C                     __ptext104:
 20385                           	opt stack 0
 20386  00505C                     _Turn_Off_Fan:
 20387                           	opt stack 27
 20388                           
 20389                           ;Fan_Support.c: 83: FAN =0;
 20390                           
 20391                           ;incstack = 0
 20392  00505C  0E00               	movlw	0
 20393  00505E  0100               	movlb	0	; () banked
 20394  005060  6F9B               	movwf	_FAN& (0+255),b
 20395                           
 20396                           ; BSR set to: 0
 20397                           ;Fan_Support.c: 84: PORTAbits.RA5 =0;
 20398  005062  9A80               	bcf	3968,5,c	;volatile
 20399                           
 20400                           ; BSR set to: 0
 20401                           ;Fan_Support.c: 85: PORTAbits.RA6 =0;
 20402  005064  9C80               	bcf	3968,6,c	;volatile
 20403                           
 20404                           ; BSR set to: 0
 20405  005066  0012               	return		;funcret
 20406  005068                     __end_of_Turn_Off_Fan:
 20407                           	opt stack 0
 20408                           tblptru	equ	0xFF8
 20409                           tblptrh	equ	0xFF7
 20410                           tblptrl	equ	0xFF6
 20411                           tablat	equ	0xFF5
 20412                           prodh	equ	0xFF4
 20413                           prodl	equ	0xFF3
 20414                           intcon	equ	0xFF2
 20415                           intcon2	equ	0xFF1
 20416                           postinc0	equ	0xFEE
 20417                           wreg	equ	0xFE8
 20418                           postdec1	equ	0xFE5
 20419                           fsr1l	equ	0xFE1
 20420                           indf2	equ	0xFDF
 20421                           postinc2	equ	0xFDE
 20422                           postdec2	equ	0xFDD
 20423                           fsr2h	equ	0xFDA
 20424                           fsr2l	equ	0xFD9
 20425                           status	equ	0xFD8
 20426                           
 20427 ;; *************** function _Init_Interrupt *****************
 20428 ;; Defined at:
 20429 ;;		line 17 in file "Interrupt.c"
 20430 ;; Parameters:    Size  Location     Type
 20431 ;;		None
 20432 ;; Auto vars:     Size  Location     Type
 20433 ;;		None
 20434 ;; Return value:  Size  Location     Type
 20435 ;;		None               void
 20436 ;; Registers used:
 20437 ;;		wreg, status,2
 20438 ;; Tracked objects:
 20439 ;;		On entry : 0/0
 20440 ;;		On exit  : 0/0
 20441 ;;		Unchanged: 0/0
 20442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20447 ;;Total ram usage:        0 bytes
 20448 ;; Hardware stack levels used:    1
 20449 ;; Hardware stack levels required when called:    2
 20450 ;; This function calls:
 20451 ;;		Nothing
 20452 ;; This function is called by:
 20453 ;;		_Do_Init
 20454 ;; This function uses a non-reentrant model
 20455 ;;
 20456                           
 20457                           	psect	text105
 20458  004DC2                     __ptext105:
 20459                           	opt stack 0
 20460  004DC2                     _Init_Interrupt:
 20461                           	opt stack 27
 20462                           
 20463                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 20464                           
 20465                           ; BSR set to: 0
 20466                           ;incstack = 0
 20467  004DC2  92F2               	bcf	intcon,1,c	;volatile
 20468                           
 20469                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 20470  004DC4  90F0               	bcf	intcon3,0,c	;volatile
 20471                           
 20472                           ;Interrupt.c: 22: INTCON3bits.INT2IF = 0;
 20473  004DC6  92F0               	bcf	intcon3,1,c	;volatile
 20474                           
 20475                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 20476  004DC8  88F2               	bsf	intcon,4,c	;volatile
 20477                           
 20478                           ;Interrupt.c: 25: INTCON3bits.INT2IE = 1;
 20479  004DCA  88F0               	bsf	intcon3,4,c	;volatile
 20480                           
 20481                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 20482  004DCC  9CF1               	bcf	intcon2,6,c	;volatile
 20483                           
 20484                           ;Interrupt.c: 28: INTCON2bits.INTEDG2 = 0;
 20485  004DCE  98F1               	bcf	intcon2,4,c	;volatile
 20486                           
 20487                           ;Interrupt.c: 29: TMR1H = 0;
 20488  004DD0  0E00               	movlw	0
 20489  004DD2  6ECF               	movwf	4047,c	;volatile
 20490                           
 20491                           ;Interrupt.c: 30: TMR1L = 0;
 20492  004DD4  0E00               	movlw	0
 20493  004DD6  6ECE               	movwf	4046,c	;volatile
 20494                           
 20495                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 20496  004DD8  909E               	bcf	3998,0,c	;volatile
 20497                           
 20498                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 20499  004DDA  809D               	bsf	3997,0,c	;volatile
 20500                           
 20501                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 20502  004DDC  8CF2               	bsf	intcon,6,c	;volatile
 20503                           
 20504                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 20505  004DDE  8EF2               	bsf	intcon,7,c	;volatile
 20506  004DE0  0012               	return		;funcret
 20507  004DE2                     __end_of_Init_Interrupt:
 20508                           	opt stack 0
 20509                           tblptru	equ	0xFF8
 20510                           tblptrh	equ	0xFF7
 20511                           tblptrl	equ	0xFF6
 20512                           tablat	equ	0xFF5
 20513                           prodh	equ	0xFF4
 20514                           prodl	equ	0xFF3
 20515                           intcon	equ	0xFF2
 20516                           intcon2	equ	0xFF1
 20517                           intcon3	equ	0xFF0
 20518                           postinc0	equ	0xFEE
 20519                           wreg	equ	0xFE8
 20520                           postdec1	equ	0xFE5
 20521                           fsr1l	equ	0xFE1
 20522                           indf2	equ	0xFDF
 20523                           postinc2	equ	0xFDE
 20524                           postdec2	equ	0xFDD
 20525                           fsr2h	equ	0xFDA
 20526                           fsr2l	equ	0xFD9
 20527                           status	equ	0xFD8
 20528                           
 20529 ;; *************** function _Init_ADC *****************
 20530 ;; Defined at:
 20531 ;;		line 176 in file "utils.c"
 20532 ;; Parameters:    Size  Location     Type
 20533 ;;		None
 20534 ;; Auto vars:     Size  Location     Type
 20535 ;;		None
 20536 ;; Return value:  Size  Location     Type
 20537 ;;		None               void
 20538 ;; Registers used:
 20539 ;;		wreg, status,2
 20540 ;; Tracked objects:
 20541 ;;		On entry : 0/0
 20542 ;;		On exit  : 0/0
 20543 ;;		Unchanged: 0/0
 20544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20549 ;;Total ram usage:        0 bytes
 20550 ;; Hardware stack levels used:    1
 20551 ;; Hardware stack levels required when called:    2
 20552 ;; This function calls:
 20553 ;;		Nothing
 20554 ;; This function is called by:
 20555 ;;		_Do_Init
 20556 ;; This function uses a non-reentrant model
 20557 ;;
 20558                           
 20559                           	psect	text106
 20560  005040                     __ptext106:
 20561                           	opt stack 0
 20562  005040                     _Init_ADC:
 20563                           	opt stack 27
 20564                           
 20565                           ;utils.c: 179: ADCON0 = 0x01;
 20566                           
 20567                           ;incstack = 0
 20568  005040  0E01               	movlw	1
 20569  005042  6EC2               	movwf	4034,c	;volatile
 20570                           
 20571                           ;utils.c: 180: ADCON1= 0x0E;
 20572  005044  0E0E               	movlw	14
 20573  005046  6EC1               	movwf	4033,c	;volatile
 20574                           
 20575                           ;utils.c: 181: ADCON2= 0xA9;
 20576  005048  0EA9               	movlw	169
 20577  00504A  6EC0               	movwf	4032,c	;volatile
 20578  00504C  0012               	return		;funcret
 20579  00504E                     __end_of_Init_ADC:
 20580                           	opt stack 0
 20581                           tblptru	equ	0xFF8
 20582                           tblptrh	equ	0xFF7
 20583                           tblptrl	equ	0xFF6
 20584                           tablat	equ	0xFF5
 20585                           prodh	equ	0xFF4
 20586                           prodl	equ	0xFF3
 20587                           intcon	equ	0xFF2
 20588                           intcon2	equ	0xFF1
 20589                           intcon3	equ	0xFF0
 20590                           postinc0	equ	0xFEE
 20591                           wreg	equ	0xFE8
 20592                           postdec1	equ	0xFE5
 20593                           fsr1l	equ	0xFE1
 20594                           indf2	equ	0xFDF
 20595                           postinc2	equ	0xFDE
 20596                           postdec2	equ	0xFDD
 20597                           fsr2h	equ	0xFDA
 20598                           fsr2l	equ	0xFD9
 20599                           status	equ	0xFD8
 20600                           
 20601 ;; *************** function _I2C_Init *****************
 20602 ;; Defined at:
 20603 ;;		line 14 in file "I2C_Soft.c"
 20604 ;; Parameters:    Size  Location     Type
 20605 ;;  c               4   16[COMRAM] unsigned long 
 20606 ;; Auto vars:     Size  Location     Type
 20607 ;;		None
 20608 ;; Return value:  Size  Location     Type
 20609 ;;		None               void
 20610 ;; Registers used:
 20611 ;;		wreg, cstack
 20612 ;; Tracked objects:
 20613 ;;		On entry : 0/0
 20614 ;;		On exit  : 0/0
 20615 ;;		Unchanged: 0/0
 20616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20621 ;;Total ram usage:        4 bytes
 20622 ;; Hardware stack levels used:    1
 20623 ;; Hardware stack levels required when called:    3
 20624 ;; This function calls:
 20625 ;;		_i2cHighScl
 20626 ;;		_i2cHighSda
 20627 ;; This function is called by:
 20628 ;;		_Do_Init
 20629 ;; This function uses a non-reentrant model
 20630 ;;
 20631                           
 20632                           	psect	text107
 20633  005074                     __ptext107:
 20634                           	opt stack 0
 20635  005074                     _I2C_Init:
 20636                           	opt stack 26
 20637                           
 20638                           ;I2C_Soft.c: 16: i2cHighScl();
 20639                           
 20640                           ;incstack = 0
 20641  005074  EC34  F028         	call	_i2cHighScl	;wreg free
 20642                           
 20643                           ;I2C_Soft.c: 17: i2cHighSda();
 20644  005078  EC56  F028         	call	_i2cHighSda	;wreg free
 20645  00507C  0012               	return		;funcret
 20646  00507E                     __end_of_I2C_Init:
 20647                           	opt stack 0
 20648                           tblptru	equ	0xFF8
 20649                           tblptrh	equ	0xFF7
 20650                           tblptrl	equ	0xFF6
 20651                           tablat	equ	0xFF5
 20652                           prodh	equ	0xFF4
 20653                           prodl	equ	0xFF3
 20654                           intcon	equ	0xFF2
 20655                           intcon2	equ	0xFF1
 20656                           intcon3	equ	0xFF0
 20657                           postinc0	equ	0xFEE
 20658                           wreg	equ	0xFE8
 20659                           postdec1	equ	0xFE5
 20660                           fsr1l	equ	0xFE1
 20661                           indf2	equ	0xFDF
 20662                           postinc2	equ	0xFDE
 20663                           postdec2	equ	0xFDD
 20664                           fsr2h	equ	0xFDA
 20665                           fsr2l	equ	0xFD9
 20666                           status	equ	0xFD8
 20667                           
 20668 ;; *************** function _DS1621_Init *****************
 20669 ;; Defined at:
 20670 ;;		line 22 in file "I2C_Support.c"
 20671 ;; Parameters:    Size  Location     Type
 20672 ;;		None
 20673 ;; Auto vars:     Size  Location     Type
 20674 ;;  Device          1   21[COMRAM] unsigned char 
 20675 ;; Return value:  Size  Location     Type
 20676 ;;		None               void
 20677 ;; Registers used:
 20678 ;;		wreg, status,2, status,0, cstack
 20679 ;; Tracked objects:
 20680 ;;		On entry : 0/0
 20681 ;;		On exit  : 0/0
 20682 ;;		Unchanged: 0/0
 20683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20688 ;;Total ram usage:        1 bytes
 20689 ;; Hardware stack levels used:    1
 20690 ;; Hardware stack levels required when called:    5
 20691 ;; This function calls:
 20692 ;;		_I2C_Write_Cmd_Only
 20693 ;;		_I2C_Write_Cmd_Write_Data
 20694 ;; This function is called by:
 20695 ;;		_Do_Init
 20696 ;; This function uses a non-reentrant model
 20697 ;;
 20698                           
 20699                           	psect	text108
 20700  004E02                     __ptext108:
 20701                           	opt stack 0
 20702  004E02                     _DS1621_Init:
 20703                           	opt stack 24
 20704                           
 20705                           ;I2C_Support.c: 24: char Device = 0x48;
 20706                           
 20707                           ;incstack = 0
 20708  004E02  0E48               	movlw	72
 20709  004E04  6E16               	movwf	DS1621_Init@Device,c
 20710                           
 20711                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 20712  004E06  0EAC               	movlw	172
 20713  004E08  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 20714  004E0A  0E02               	movlw	2
 20715  004E0C  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 20716  004E0E  5016               	movf	DS1621_Init@Device,w,c
 20717  004E10  ECF1  F026         	call	_I2C_Write_Cmd_Write_Data
 20718                           
 20719                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 20720  004E14  0EEE               	movlw	238
 20721  004E16  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 20722  004E18  5016               	movf	DS1621_Init@Device,w,c
 20723  004E1A  EC38  F027         	call	_I2C_Write_Cmd_Only
 20724  004E1E  0012               	return		;funcret
 20725  004E20                     __end_of_DS1621_Init:
 20726                           	opt stack 0
 20727                           tblptru	equ	0xFF8
 20728                           tblptrh	equ	0xFF7
 20729                           tblptrl	equ	0xFF6
 20730                           tablat	equ	0xFF5
 20731                           prodh	equ	0xFF4
 20732                           prodl	equ	0xFF3
 20733                           intcon	equ	0xFF2
 20734                           intcon2	equ	0xFF1
 20735                           intcon3	equ	0xFF0
 20736                           postinc0	equ	0xFEE
 20737                           wreg	equ	0xFE8
 20738                           postdec1	equ	0xFE5
 20739                           fsr1l	equ	0xFE1
 20740                           indf2	equ	0xFDF
 20741                           postinc2	equ	0xFDE
 20742                           postdec2	equ	0xFDD
 20743                           fsr2h	equ	0xFDA
 20744                           fsr2l	equ	0xFD9
 20745                           status	equ	0xFD8
 20746                           
 20747 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 20748 ;; Defined at:
 20749 ;;		line 152 in file "I2C_Soft.c"
 20750 ;; Parameters:    Size  Location     Type
 20751 ;;  Device          1    wreg     unsigned char 
 20752 ;;  Cmd             1   18[COMRAM] unsigned char 
 20753 ;;  Data_Out        1   19[COMRAM] unsigned char 
 20754 ;; Auto vars:     Size  Location     Type
 20755 ;;  Device          1   20[COMRAM] unsigned char 
 20756 ;; Return value:  Size  Location     Type
 20757 ;;		None               void
 20758 ;; Registers used:
 20759 ;;		wreg, status,2, status,0, cstack
 20760 ;; Tracked objects:
 20761 ;;		On entry : 0/0
 20762 ;;		On exit  : 0/0
 20763 ;;		Unchanged: 0/0
 20764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20768 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20769 ;;Total ram usage:        3 bytes
 20770 ;; Hardware stack levels used:    1
 20771 ;; Hardware stack levels required when called:    4
 20772 ;; This function calls:
 20773 ;;		_I2C_Start
 20774 ;;		_I2C_Stop
 20775 ;;		_I2C_Write
 20776 ;; This function is called by:
 20777 ;;		_DS1621_Init
 20778 ;; This function uses a non-reentrant model
 20779 ;;
 20780                           
 20781                           	psect	text109
 20782  004DE2                     __ptext109:
 20783                           	opt stack 0
 20784  004DE2                     _I2C_Write_Cmd_Write_Data:
 20785                           	opt stack 24
 20786                           
 20787                           ;incstack = 0
 20788                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 20789  004DE2  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 20790                           
 20791                           ;I2C_Soft.c: 154: I2C_Start();
 20792  004DE4  ECDF  F027         	call	_I2C_Start	;wreg free
 20793                           
 20794                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
 20795  004DE8  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 20796  004DEA  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 20797  004DEC  EC0B  F025         	call	_I2C_Write
 20798                           
 20799                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
 20800  004DF0  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 20801  004DF2  EC0B  F025         	call	_I2C_Write
 20802                           
 20803                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
 20804  004DF6  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 20805  004DF8  EC0B  F025         	call	_I2C_Write
 20806                           
 20807                           ;I2C_Soft.c: 158: I2C_Stop();
 20808  004DFC  ECD6  F027         	call	_I2C_Stop	;wreg free
 20809  004E00  0012               	return		;funcret
 20810  004E02                     __end_of_I2C_Write_Cmd_Write_Data:
 20811                           	opt stack 0
 20812                           tblptru	equ	0xFF8
 20813                           tblptrh	equ	0xFF7
 20814                           tblptrl	equ	0xFF6
 20815                           tablat	equ	0xFF5
 20816                           prodh	equ	0xFF4
 20817                           prodl	equ	0xFF3
 20818                           intcon	equ	0xFF2
 20819                           intcon2	equ	0xFF1
 20820                           intcon3	equ	0xFF0
 20821                           postinc0	equ	0xFEE
 20822                           wreg	equ	0xFE8
 20823                           postdec1	equ	0xFE5
 20824                           fsr1l	equ	0xFE1
 20825                           indf2	equ	0xFDF
 20826                           postinc2	equ	0xFDE
 20827                           postdec2	equ	0xFDD
 20828                           fsr2h	equ	0xFDA
 20829                           fsr2l	equ	0xFD9
 20830                           status	equ	0xFD8
 20831                           
 20832 ;; *************** function _I2C_Write_Cmd_Only *****************
 20833 ;; Defined at:
 20834 ;;		line 144 in file "I2C_Soft.c"
 20835 ;; Parameters:    Size  Location     Type
 20836 ;;  Device          1    wreg     unsigned char 
 20837 ;;  Cmd             1   18[COMRAM] unsigned char 
 20838 ;; Auto vars:     Size  Location     Type
 20839 ;;  Device          1   19[COMRAM] unsigned char 
 20840 ;; Return value:  Size  Location     Type
 20841 ;;		None               void
 20842 ;; Registers used:
 20843 ;;		wreg, status,2, status,0, cstack
 20844 ;; Tracked objects:
 20845 ;;		On entry : 0/0
 20846 ;;		On exit  : 0/0
 20847 ;;		Unchanged: 0/0
 20848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20849 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;Total ram usage:        2 bytes
 20854 ;; Hardware stack levels used:    1
 20855 ;; Hardware stack levels required when called:    4
 20856 ;; This function calls:
 20857 ;;		_I2C_Start
 20858 ;;		_I2C_Stop
 20859 ;;		_I2C_Write
 20860 ;; This function is called by:
 20861 ;;		_DS1621_Init
 20862 ;; This function uses a non-reentrant model
 20863 ;;
 20864                           
 20865                           	psect	text110
 20866  004E70                     __ptext110:
 20867                           	opt stack 0
 20868  004E70                     _I2C_Write_Cmd_Only:
 20869                           	opt stack 24
 20870                           
 20871                           ;incstack = 0
 20872                           ;I2C_Write_Cmd_Only@Device stored from wreg
 20873  004E70  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 20874                           
 20875                           ;I2C_Soft.c: 146: I2C_Start();
 20876  004E72  ECDF  F027         	call	_I2C_Start	;wreg free
 20877                           
 20878                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
 20879  004E76  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 20880  004E78  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 20881  004E7A  EC0B  F025         	call	_I2C_Write
 20882                           
 20883                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
 20884  004E7E  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 20885  004E80  EC0B  F025         	call	_I2C_Write
 20886                           
 20887                           ;I2C_Soft.c: 149: I2C_Stop();
 20888  004E84  ECD6  F027         	call	_I2C_Stop	;wreg free
 20889  004E88  0012               	return		;funcret
 20890  004E8A                     __end_of_I2C_Write_Cmd_Only:
 20891                           	opt stack 0
 20892                           tblptru	equ	0xFF8
 20893                           tblptrh	equ	0xFF7
 20894                           tblptrl	equ	0xFF6
 20895                           tablat	equ	0xFF5
 20896                           prodh	equ	0xFF4
 20897                           prodl	equ	0xFF3
 20898                           intcon	equ	0xFF2
 20899                           intcon2	equ	0xFF1
 20900                           intcon3	equ	0xFF0
 20901                           postinc0	equ	0xFEE
 20902                           wreg	equ	0xFE8
 20903                           postdec1	equ	0xFE5
 20904                           fsr1l	equ	0xFE1
 20905                           indf2	equ	0xFDF
 20906                           postinc2	equ	0xFDE
 20907                           postdec2	equ	0xFDD
 20908                           fsr2h	equ	0xFDA
 20909                           fsr2l	equ	0xFD9
 20910                           status	equ	0xFD8
 20911                           
 20912 ;; *************** function _DS1621_Read_Temp *****************
 20913 ;; Defined at:
 20914 ;;		line 29 in file "I2C_Support.c"
 20915 ;; Parameters:    Size  Location     Type
 20916 ;;		None
 20917 ;; Auto vars:     Size  Location     Type
 20918 ;;  Device          1   23[COMRAM] unsigned char 
 20919 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 20920 ;;  Cmd             1   21[COMRAM] unsigned char 
 20921 ;; Return value:  Size  Location     Type
 20922 ;;                  2   19[COMRAM] int 
 20923 ;; Registers used:
 20924 ;;		wreg, status,2, status,0, cstack
 20925 ;; Tracked objects:
 20926 ;;		On entry : 0/0
 20927 ;;		On exit  : 0/0
 20928 ;;		Unchanged: 0/0
 20929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20931 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20933 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20934 ;;Total ram usage:        5 bytes
 20935 ;; Hardware stack levels used:    1
 20936 ;; Hardware stack levels required when called:    5
 20937 ;; This function calls:
 20938 ;;		_I2C_ReStart
 20939 ;;		_I2C_Read
 20940 ;;		_I2C_Start
 20941 ;;		_I2C_Stop
 20942 ;;		_I2C_Write
 20943 ;; This function is called by:
 20944 ;;		_main
 20945 ;; This function uses a non-reentrant model
 20946 ;;
 20947                           
 20948                           	psect	text111
 20949  004A90                     __ptext111:
 20950                           	opt stack 0
 20951  004A90                     _DS1621_Read_Temp:
 20952                           	opt stack 25
 20953                           
 20954                           ;I2C_Support.c: 32: char Device = 0x48;
 20955                           
 20956                           ;incstack = 0
 20957  004A90  0E48               	movlw	72
 20958  004A92  6E18               	movwf	DS1621_Read_Temp@Device,c
 20959                           
 20960                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 20961  004A94  0EAA               	movlw	170
 20962  004A96  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 20963                           
 20964                           ;I2C_Support.c: 34: char Data_Ret;
 20965                           ;I2C_Support.c: 35: I2C_Start();
 20966  004A98  ECDF  F027         	call	_I2C_Start	;wreg free
 20967                           
 20968                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 20969  004A9C  5018               	movf	DS1621_Read_Temp@Device,w,c
 20970  004A9E  2418               	addwf	DS1621_Read_Temp@Device,w,c
 20971  004AA0  EC0B  F025         	call	_I2C_Write
 20972                           
 20973                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 20974  004AA4  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 20975  004AA6  EC0B  F025         	call	_I2C_Write
 20976                           
 20977                           ;I2C_Support.c: 38: I2C_ReStart();
 20978  004AAA  EC7F  F027         	call	_I2C_ReStart	;wreg free
 20979                           
 20980                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 20981  004AAE  80D8               	bsf	status,0,c
 20982  004AB0  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 20983  004AB2  EC0B  F025         	call	_I2C_Write
 20984                           
 20985                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 20986  004AB6  0E00               	movlw	0
 20987  004AB8  EC68  F024         	call	_I2C_Read
 20988  004ABC  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 20989                           
 20990                           ;I2C_Support.c: 41: I2C_Stop();
 20991  004ABE  ECD6  F027         	call	_I2C_Stop	;wreg free
 20992                           
 20993                           ;I2C_Support.c: 42: return Data_Ret;
 20994  004AC2  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 20995  004AC6  6A15               	clrf	?_DS1621_Read_Temp+1,c
 20996  004AC8  D000               	goto	l205
 20997  004ACA                     l205:
 20998  004ACA  0012               	return		;funcret
 20999  004ACC                     __end_of_DS1621_Read_Temp:
 21000                           	opt stack 0
 21001                           tblptru	equ	0xFF8
 21002                           tblptrh	equ	0xFF7
 21003                           tblptrl	equ	0xFF6
 21004                           tablat	equ	0xFF5
 21005                           prodh	equ	0xFF4
 21006                           prodl	equ	0xFF3
 21007                           intcon	equ	0xFF2
 21008                           intcon2	equ	0xFF1
 21009                           intcon3	equ	0xFF0
 21010                           postinc0	equ	0xFEE
 21011                           wreg	equ	0xFE8
 21012                           postdec1	equ	0xFE5
 21013                           fsr1l	equ	0xFE1
 21014                           indf2	equ	0xFDF
 21015                           postinc2	equ	0xFDE
 21016                           postdec2	equ	0xFDD
 21017                           fsr2h	equ	0xFDA
 21018                           fsr2l	equ	0xFD9
 21019                           status	equ	0xFD8
 21020                           
 21021 ;; *************** function _I2C_Write *****************
 21022 ;; Defined at:
 21023 ;;		line 41 in file "I2C_Soft.c"
 21024 ;; Parameters:    Size  Location     Type
 21025 ;;  outByte         1    wreg     unsigned char 
 21026 ;; Auto vars:     Size  Location     Type
 21027 ;;  outByte         1   16[COMRAM] unsigned char 
 21028 ;;  n               1   17[COMRAM] unsigned char 
 21029 ;; Return value:  Size  Location     Type
 21030 ;;		None               void
 21031 ;; Registers used:
 21032 ;;		wreg, status,2, status,0, cstack
 21033 ;; Tracked objects:
 21034 ;;		On entry : 0/0
 21035 ;;		On exit  : 0/0
 21036 ;;		Unchanged: 0/0
 21037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21041 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21042 ;;Total ram usage:        2 bytes
 21043 ;; Hardware stack levels used:    1
 21044 ;; Hardware stack levels required when called:    3
 21045 ;; This function calls:
 21046 ;;		_i2cHighScl
 21047 ;;		_i2cHighSda
 21048 ;;		_i2cLowScl
 21049 ;;		_i2cLowSda
 21050 ;; This function is called by:
 21051 ;;		_I2C_Write_Address_Read_One_Byte
 21052 ;;		_I2C_Write_Address_Write_One_Byte
 21053 ;;		_I2C_Write_Cmd_Only
 21054 ;;		_I2C_Write_Cmd_Write_Data
 21055 ;;		_DS1621_Read_Temp
 21056 ;;		_DS3231_Read_Time
 21057 ;;		_DS3231_Write_Time
 21058 ;;		_DS3231_Read_Alarm_Time
 21059 ;;		_DS3231_Init
 21060 ;;		_DS3231_Write_Alarm_Time
 21061 ;;		_I2C_Write_Cmd_Read_One_Byte
 21062 ;;		_DS3231_Setup_Time
 21063 ;;		_DS3231_Write_Initial_Alarm_Time
 21064 ;; This function uses a non-reentrant model
 21065 ;;
 21066                           
 21067                           	psect	text112
 21068  004A16                     __ptext112:
 21069                           	opt stack 0
 21070  004A16                     _I2C_Write:
 21071                           	opt stack 24
 21072                           
 21073                           ;incstack = 0
 21074                           ;I2C_Write@outByte stored from wreg
 21075  004A16  6E11               	movwf	I2C_Write@outByte,c
 21076                           
 21077                           ;I2C_Soft.c: 43: unsigned char n;
 21078                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
 21079  004A18  0E00               	movlw	0
 21080  004A1A  6E12               	movwf	I2C_Write@n,c
 21081  004A1C                     l5900:
 21082  004A1C  0E07               	movlw	7
 21083  004A1E  6412               	cpfsgt	I2C_Write@n,c
 21084  004A20  D001               	goto	l93
 21085  004A22  D011               	goto	l5918
 21086  004A24                     l93:
 21087                           
 21088                           ;I2C_Soft.c: 45: {
 21089                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
 21090  004A24  AE11               	btfss	I2C_Write@outByte,7,c
 21091  004A26  D003               	goto	l5906
 21092  004A28  EC56  F028         	call	_i2cHighSda	;wreg free
 21093  004A2C  D003               	goto	l5908
 21094  004A2E                     l5906:
 21095                           
 21096                           ;I2C_Soft.c: 47: else i2cLowSda();
 21097  004A2E  EC44  F028         	call	_i2cLowSda	;wreg free
 21098  004A32  D000               	goto	l5908
 21099  004A34                     l5908:
 21100                           
 21101                           ;I2C_Soft.c: 48: i2cHighScl();
 21102  004A34  EC34  F028         	call	_i2cHighScl	;wreg free
 21103                           
 21104                           ;I2C_Soft.c: 49: i2cLowScl();
 21105  004A38  EC52  F028         	call	_i2cLowScl	;wreg free
 21106                           
 21107                           ;I2C_Soft.c: 50: outByte = outByte << 1;
 21108  004A3C  5011               	movf	I2C_Write@outByte,w,c
 21109  004A3E  2411               	addwf	I2C_Write@outByte,w,c
 21110  004A40  6E11               	movwf	I2C_Write@outByte,c
 21111  004A42  2A12               	incf	I2C_Write@n,f,c
 21112  004A44  D7EB               	goto	l5900
 21113  004A46                     l5918:
 21114                           
 21115                           ;I2C_Soft.c: 51: }
 21116                           ;I2C_Soft.c: 52: i2cHighSda();
 21117  004A46  EC56  F028         	call	_i2cHighSda	;wreg free
 21118                           
 21119                           ;I2C_Soft.c: 53: i2cHighScl();
 21120  004A4A  EC34  F028         	call	_i2cHighScl	;wreg free
 21121                           
 21122                           ;I2C_Soft.c: 54: i2cLowScl();
 21123  004A4E  EC52  F028         	call	_i2cLowScl	;wreg free
 21124  004A52  0012               	return		;funcret
 21125  004A54                     __end_of_I2C_Write:
 21126                           	opt stack 0
 21127                           tblptru	equ	0xFF8
 21128                           tblptrh	equ	0xFF7
 21129                           tblptrl	equ	0xFF6
 21130                           tablat	equ	0xFF5
 21131                           prodh	equ	0xFF4
 21132                           prodl	equ	0xFF3
 21133                           intcon	equ	0xFF2
 21134                           intcon2	equ	0xFF1
 21135                           intcon3	equ	0xFF0
 21136                           postinc0	equ	0xFEE
 21137                           wreg	equ	0xFE8
 21138                           postdec1	equ	0xFE5
 21139                           fsr1l	equ	0xFE1
 21140                           indf2	equ	0xFDF
 21141                           postinc2	equ	0xFDE
 21142                           postdec2	equ	0xFDD
 21143                           fsr2h	equ	0xFDA
 21144                           fsr2l	equ	0xFD9
 21145                           status	equ	0xFD8
 21146                           
 21147 ;; *************** function _I2C_Stop *****************
 21148 ;; Defined at:
 21149 ;;		line 88 in file "I2C_Soft.c"
 21150 ;; Parameters:    Size  Location     Type
 21151 ;;		None
 21152 ;; Auto vars:     Size  Location     Type
 21153 ;;		None
 21154 ;; Return value:  Size  Location     Type
 21155 ;;		None               void
 21156 ;; Registers used:
 21157 ;;		wreg, cstack
 21158 ;; Tracked objects:
 21159 ;;		On entry : 0/0
 21160 ;;		On exit  : 0/0
 21161 ;;		Unchanged: 0/0
 21162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21167 ;;Total ram usage:        0 bytes
 21168 ;; Hardware stack levels used:    1
 21169 ;; Hardware stack levels required when called:    3
 21170 ;; This function calls:
 21171 ;;		_i2cHighScl
 21172 ;;		_i2cHighSda
 21173 ;;		_i2cLowScl
 21174 ;;		_i2cLowSda
 21175 ;; This function is called by:
 21176 ;;		_I2C_Write_Address_Read_One_Byte
 21177 ;;		_I2C_Write_Address_Write_One_Byte
 21178 ;;		_I2C_Write_Cmd_Only
 21179 ;;		_I2C_Write_Cmd_Write_Data
 21180 ;;		_DS1621_Read_Temp
 21181 ;;		_DS3231_Read_Time
 21182 ;;		_DS3231_Write_Time
 21183 ;;		_DS3231_Read_Alarm_Time
 21184 ;;		_DS3231_Init
 21185 ;;		_DS3231_Write_Alarm_Time
 21186 ;;		_I2C_Write_Cmd_Read_One_Byte
 21187 ;;		_DS3231_Setup_Time
 21188 ;;		_DS3231_Write_Initial_Alarm_Time
 21189 ;; This function uses a non-reentrant model
 21190 ;;
 21191                           
 21192                           	psect	text113
 21193  004FAC                     __ptext113:
 21194                           	opt stack 0
 21195  004FAC                     _I2C_Stop:
 21196                           	opt stack 24
 21197                           
 21198                           ;I2C_Soft.c: 90: i2cLowScl();
 21199                           
 21200                           ;incstack = 0
 21201  004FAC  EC52  F028         	call	_i2cLowScl	;wreg free
 21202                           
 21203                           ;I2C_Soft.c: 91: i2cLowSda();
 21204  004FB0  EC44  F028         	call	_i2cLowSda	;wreg free
 21205                           
 21206                           ;I2C_Soft.c: 92: i2cHighScl();
 21207  004FB4  EC34  F028         	call	_i2cHighScl	;wreg free
 21208                           
 21209                           ;I2C_Soft.c: 93: i2cHighSda();
 21210  004FB8  EC56  F028         	call	_i2cHighSda	;wreg free
 21211  004FBC  0012               	return		;funcret
 21212  004FBE                     __end_of_I2C_Stop:
 21213                           	opt stack 0
 21214                           tblptru	equ	0xFF8
 21215                           tblptrh	equ	0xFF7
 21216                           tblptrl	equ	0xFF6
 21217                           tablat	equ	0xFF5
 21218                           prodh	equ	0xFF4
 21219                           prodl	equ	0xFF3
 21220                           intcon	equ	0xFF2
 21221                           intcon2	equ	0xFF1
 21222                           intcon3	equ	0xFF0
 21223                           postinc0	equ	0xFEE
 21224                           wreg	equ	0xFE8
 21225                           postdec1	equ	0xFE5
 21226                           fsr1l	equ	0xFE1
 21227                           indf2	equ	0xFDF
 21228                           postinc2	equ	0xFDE
 21229                           postdec2	equ	0xFDD
 21230                           fsr2h	equ	0xFDA
 21231                           fsr2l	equ	0xFD9
 21232                           status	equ	0xFD8
 21233                           
 21234 ;; *************** function _I2C_Start *****************
 21235 ;; Defined at:
 21236 ;;		line 71 in file "I2C_Soft.c"
 21237 ;; Parameters:    Size  Location     Type
 21238 ;;		None
 21239 ;; Auto vars:     Size  Location     Type
 21240 ;;		None
 21241 ;; Return value:  Size  Location     Type
 21242 ;;		None               void
 21243 ;; Registers used:
 21244 ;;		wreg, cstack
 21245 ;; Tracked objects:
 21246 ;;		On entry : 0/0
 21247 ;;		On exit  : 0/0
 21248 ;;		Unchanged: 0/0
 21249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21254 ;;Total ram usage:        0 bytes
 21255 ;; Hardware stack levels used:    1
 21256 ;; Hardware stack levels required when called:    3
 21257 ;; This function calls:
 21258 ;;		_i2cHighScl
 21259 ;;		_i2cHighSda
 21260 ;;		_i2cLowScl
 21261 ;;		_i2cLowSda
 21262 ;; This function is called by:
 21263 ;;		_I2C_Write_Address_Read_One_Byte
 21264 ;;		_I2C_Write_Address_Write_One_Byte
 21265 ;;		_I2C_Write_Cmd_Only
 21266 ;;		_I2C_Write_Cmd_Write_Data
 21267 ;;		_DS1621_Read_Temp
 21268 ;;		_DS3231_Read_Time
 21269 ;;		_DS3231_Write_Time
 21270 ;;		_DS3231_Read_Alarm_Time
 21271 ;;		_DS3231_Init
 21272 ;;		_DS3231_Write_Alarm_Time
 21273 ;;		_I2C_Write_Cmd_Read_One_Byte
 21274 ;;		_DS3231_Setup_Time
 21275 ;;		_DS3231_Write_Initial_Alarm_Time
 21276 ;; This function uses a non-reentrant model
 21277 ;;
 21278                           
 21279                           	psect	text114
 21280  004FBE                     __ptext114:
 21281                           	opt stack 0
 21282  004FBE                     _I2C_Start:
 21283                           	opt stack 24
 21284                           
 21285                           ;I2C_Soft.c: 73: i2cHighSda();
 21286                           
 21287                           ;incstack = 0
 21288  004FBE  EC56  F028         	call	_i2cHighSda	;wreg free
 21289                           
 21290                           ;I2C_Soft.c: 74: i2cHighScl();
 21291  004FC2  EC34  F028         	call	_i2cHighScl	;wreg free
 21292                           
 21293                           ;I2C_Soft.c: 75: i2cLowSda();
 21294  004FC6  EC44  F028         	call	_i2cLowSda	;wreg free
 21295                           
 21296                           ;I2C_Soft.c: 76: i2cLowScl();
 21297  004FCA  EC52  F028         	call	_i2cLowScl	;wreg free
 21298  004FCE  0012               	return		;funcret
 21299  004FD0                     __end_of_I2C_Start:
 21300                           	opt stack 0
 21301                           tblptru	equ	0xFF8
 21302                           tblptrh	equ	0xFF7
 21303                           tblptrl	equ	0xFF6
 21304                           tablat	equ	0xFF5
 21305                           prodh	equ	0xFF4
 21306                           prodl	equ	0xFF3
 21307                           intcon	equ	0xFF2
 21308                           intcon2	equ	0xFF1
 21309                           intcon3	equ	0xFF0
 21310                           postinc0	equ	0xFEE
 21311                           wreg	equ	0xFE8
 21312                           postdec1	equ	0xFE5
 21313                           fsr1l	equ	0xFE1
 21314                           indf2	equ	0xFDF
 21315                           postinc2	equ	0xFDE
 21316                           postdec2	equ	0xFDD
 21317                           fsr2h	equ	0xFDA
 21318                           fsr2l	equ	0xFD9
 21319                           status	equ	0xFD8
 21320                           
 21321 ;; *************** function _I2C_Read *****************
 21322 ;; Defined at:
 21323 ;;		line 20 in file "I2C_Soft.c"
 21324 ;; Parameters:    Size  Location     Type
 21325 ;;  ack             1    wreg     unsigned char 
 21326 ;; Auto vars:     Size  Location     Type
 21327 ;;  ack             1   16[COMRAM] unsigned char 
 21328 ;;  inByte          1   18[COMRAM] unsigned char 
 21329 ;;  n               1   17[COMRAM] unsigned char 
 21330 ;; Return value:  Size  Location     Type
 21331 ;;                  1    wreg      unsigned char 
 21332 ;; Registers used:
 21333 ;;		wreg, status,2, status,0, cstack
 21334 ;; Tracked objects:
 21335 ;;		On entry : 0/0
 21336 ;;		On exit  : 0/0
 21337 ;;		Unchanged: 0/0
 21338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21342 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21343 ;;Total ram usage:        3 bytes
 21344 ;; Hardware stack levels used:    1
 21345 ;; Hardware stack levels required when called:    4
 21346 ;; This function calls:
 21347 ;;		_i2cAck
 21348 ;;		_i2cHighScl
 21349 ;;		_i2cHighSda
 21350 ;;		_i2cLowScl
 21351 ;;		_i2cNack
 21352 ;; This function is called by:
 21353 ;;		_I2C_Write_Address_Read_One_Byte
 21354 ;;		_DS1621_Read_Temp
 21355 ;;		_DS3231_Read_Time
 21356 ;;		_DS3231_Read_Alarm_Time
 21357 ;;		_DS3231_Init
 21358 ;;		_I2C_Write_Cmd_Read_One_Byte
 21359 ;; This function uses a non-reentrant model
 21360 ;;
 21361                           
 21362                           	psect	text115
 21363  0048D0                     __ptext115:
 21364                           	opt stack 0
 21365  0048D0                     _I2C_Read:
 21366                           	opt stack 23
 21367                           
 21368                           ;incstack = 0
 21369                           ;I2C_Read@ack stored from wreg
 21370  0048D0  6E11               	movwf	I2C_Read@ack,c
 21371                           
 21372                           ;I2C_Soft.c: 22: unsigned char inByte, n;
 21373                           ;I2C_Soft.c: 23: i2cHighSda();
 21374  0048D2  EC56  F028         	call	_i2cHighSda	;wreg free
 21375                           
 21376                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
 21377  0048D6  0E00               	movlw	0
 21378  0048D8  6E12               	movwf	I2C_Read@n,c
 21379  0048DA                     l5870:
 21380  0048DA  0E07               	movlw	7
 21381  0048DC  6412               	cpfsgt	I2C_Read@n,c
 21382  0048DE  D001               	goto	l5874
 21383  0048E0  D00F               	goto	l5888
 21384  0048E2                     l5874:
 21385                           
 21386                           ;I2C_Soft.c: 25: {
 21387                           ;I2C_Soft.c: 26: i2cHighScl();
 21388  0048E2  EC34  F028         	call	_i2cHighScl	;wreg free
 21389                           
 21390                           ;I2C_Soft.c: 28: if (PORTDbits.RD1)
 21391  0048E6  A283               	btfss	3971,1,c	;volatile
 21392  0048E8  D003               	goto	l5880
 21393                           
 21394                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
 21395  0048EA  80D8               	bsf	status,0,c
 21396  0048EC  3613               	rlcf	I2C_Read@inByte,f,c
 21397  0048EE  D004               	goto	l5882
 21398  0048F0                     l5880:
 21399                           
 21400                           ;I2C_Soft.c: 30: else
 21401                           ;I2C_Soft.c: 31: inByte = inByte << 1;
 21402  0048F0  5013               	movf	I2C_Read@inByte,w,c
 21403  0048F2  2413               	addwf	I2C_Read@inByte,w,c
 21404  0048F4  6E13               	movwf	I2C_Read@inByte,c
 21405  0048F6  D000               	goto	l5882
 21406  0048F8                     l5882:
 21407                           
 21408                           ;I2C_Soft.c: 32: i2cLowScl();
 21409  0048F8  EC52  F028         	call	_i2cLowScl	;wreg free
 21410  0048FC  2A12               	incf	I2C_Read@n,f,c
 21411  0048FE  D7ED               	goto	l5870
 21412  004900                     l5888:
 21413                           
 21414                           ;I2C_Soft.c: 33: }
 21415                           ;I2C_Soft.c: 34: if (ack) i2cAck();
 21416  004900  5011               	movf	I2C_Read@ack,w,c
 21417  004902  B4D8               	btfsc	status,2,c
 21418  004904  D003               	goto	l5892
 21419  004906  ECE8  F027         	call	_i2cAck	;wreg free
 21420  00490A  D003               	goto	l5894
 21421  00490C                     l5892:
 21422                           
 21423                           ;I2C_Soft.c: 35: else i2cNack();
 21424  00490C  EC3F  F028         	call	_i2cNack	;wreg free
 21425  004910  D000               	goto	l5894
 21426  004912                     l5894:
 21427                           
 21428                           ;I2C_Soft.c: 38: return(inByte);
 21429  004912  5013               	movf	I2C_Read@inByte,w,c
 21430  004914  D000               	goto	l90
 21431  004916                     l90:
 21432  004916  0012               	return		;funcret
 21433  004918                     __end_of_I2C_Read:
 21434                           	opt stack 0
 21435                           tblptru	equ	0xFF8
 21436                           tblptrh	equ	0xFF7
 21437                           tblptrl	equ	0xFF6
 21438                           tablat	equ	0xFF5
 21439                           prodh	equ	0xFF4
 21440                           prodl	equ	0xFF3
 21441                           intcon	equ	0xFF2
 21442                           intcon2	equ	0xFF1
 21443                           intcon3	equ	0xFF0
 21444                           postinc0	equ	0xFEE
 21445                           wreg	equ	0xFE8
 21446                           postdec1	equ	0xFE5
 21447                           fsr1l	equ	0xFE1
 21448                           indf2	equ	0xFDF
 21449                           postinc2	equ	0xFDE
 21450                           postdec2	equ	0xFDD
 21451                           fsr2h	equ	0xFDA
 21452                           fsr2l	equ	0xFD9
 21453                           status	equ	0xFD8
 21454                           
 21455 ;; *************** function _i2cNack *****************
 21456 ;; Defined at:
 21457 ;;		line 57 in file "I2C_Soft.c"
 21458 ;; Parameters:    Size  Location     Type
 21459 ;;		None
 21460 ;; Auto vars:     Size  Location     Type
 21461 ;;		None
 21462 ;; Return value:  Size  Location     Type
 21463 ;;		None               void
 21464 ;; Registers used:
 21465 ;;		wreg, cstack
 21466 ;; Tracked objects:
 21467 ;;		On entry : 0/0
 21468 ;;		On exit  : 0/0
 21469 ;;		Unchanged: 0/0
 21470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21475 ;;Total ram usage:        0 bytes
 21476 ;; Hardware stack levels used:    1
 21477 ;; Hardware stack levels required when called:    3
 21478 ;; This function calls:
 21479 ;;		_i2cHighScl
 21480 ;;		_i2cLowScl
 21481 ;; This function is called by:
 21482 ;;		_I2C_Read
 21483 ;; This function uses a non-reentrant model
 21484 ;;
 21485                           
 21486                           	psect	text116
 21487  00507E                     __ptext116:
 21488                           	opt stack 0
 21489  00507E                     _i2cNack:
 21490                           	opt stack 23
 21491                           
 21492                           ;I2C_Soft.c: 59: i2cHighScl();
 21493                           
 21494                           ;incstack = 0
 21495  00507E  EC34  F028         	call	_i2cHighScl	;wreg free
 21496                           
 21497                           ;I2C_Soft.c: 60: i2cLowScl();
 21498  005082  EC52  F028         	call	_i2cLowScl	;wreg free
 21499  005086  0012               	return		;funcret
 21500  005088                     __end_of_i2cNack:
 21501                           	opt stack 0
 21502                           tblptru	equ	0xFF8
 21503                           tblptrh	equ	0xFF7
 21504                           tblptrl	equ	0xFF6
 21505                           tablat	equ	0xFF5
 21506                           prodh	equ	0xFF4
 21507                           prodl	equ	0xFF3
 21508                           intcon	equ	0xFF2
 21509                           intcon2	equ	0xFF1
 21510                           intcon3	equ	0xFF0
 21511                           postinc0	equ	0xFEE
 21512                           wreg	equ	0xFE8
 21513                           postdec1	equ	0xFE5
 21514                           fsr1l	equ	0xFE1
 21515                           indf2	equ	0xFDF
 21516                           postinc2	equ	0xFDE
 21517                           postdec2	equ	0xFDD
 21518                           fsr2h	equ	0xFDA
 21519                           fsr2l	equ	0xFD9
 21520                           status	equ	0xFD8
 21521                           
 21522 ;; *************** function _i2cAck *****************
 21523 ;; Defined at:
 21524 ;;		line 63 in file "I2C_Soft.c"
 21525 ;; Parameters:    Size  Location     Type
 21526 ;;		None
 21527 ;; Auto vars:     Size  Location     Type
 21528 ;;		None
 21529 ;; Return value:  Size  Location     Type
 21530 ;;		None               void
 21531 ;; Registers used:
 21532 ;;		wreg, cstack
 21533 ;; Tracked objects:
 21534 ;;		On entry : 0/0
 21535 ;;		On exit  : 0/0
 21536 ;;		Unchanged: 0/0
 21537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21542 ;;Total ram usage:        0 bytes
 21543 ;; Hardware stack levels used:    1
 21544 ;; Hardware stack levels required when called:    3
 21545 ;; This function calls:
 21546 ;;		_i2cHighScl
 21547 ;;		_i2cHighSda
 21548 ;;		_i2cLowScl
 21549 ;;		_i2cLowSda
 21550 ;; This function is called by:
 21551 ;;		_I2C_Read
 21552 ;; This function uses a non-reentrant model
 21553 ;;
 21554                           
 21555                           	psect	text117
 21556  004FD0                     __ptext117:
 21557                           	opt stack 0
 21558  004FD0                     _i2cAck:
 21559                           	opt stack 23
 21560                           
 21561                           ;I2C_Soft.c: 65: i2cLowSda();
 21562                           
 21563                           ;incstack = 0
 21564  004FD0  EC44  F028         	call	_i2cLowSda	;wreg free
 21565                           
 21566                           ;I2C_Soft.c: 66: i2cHighScl();
 21567  004FD4  EC34  F028         	call	_i2cHighScl	;wreg free
 21568                           
 21569                           ;I2C_Soft.c: 67: i2cLowScl();
 21570  004FD8  EC52  F028         	call	_i2cLowScl	;wreg free
 21571                           
 21572                           ;I2C_Soft.c: 68: i2cHighSda();
 21573  004FDC  EC56  F028         	call	_i2cHighSda	;wreg free
 21574  004FE0  0012               	return		;funcret
 21575  004FE2                     __end_of_i2cAck:
 21576                           	opt stack 0
 21577                           tblptru	equ	0xFF8
 21578                           tblptrh	equ	0xFF7
 21579                           tblptrl	equ	0xFF6
 21580                           tablat	equ	0xFF5
 21581                           prodh	equ	0xFF4
 21582                           prodl	equ	0xFF3
 21583                           intcon	equ	0xFF2
 21584                           intcon2	equ	0xFF1
 21585                           intcon3	equ	0xFF0
 21586                           postinc0	equ	0xFEE
 21587                           wreg	equ	0xFE8
 21588                           postdec1	equ	0xFE5
 21589                           fsr1l	equ	0xFE1
 21590                           indf2	equ	0xFDF
 21591                           postinc2	equ	0xFDE
 21592                           postdec2	equ	0xFDD
 21593                           fsr2h	equ	0xFDA
 21594                           fsr2l	equ	0xFD9
 21595                           status	equ	0xFD8
 21596                           
 21597 ;; *************** function _I2C_ReStart *****************
 21598 ;; Defined at:
 21599 ;;		line 79 in file "I2C_Soft.c"
 21600 ;; Parameters:    Size  Location     Type
 21601 ;;		None
 21602 ;; Auto vars:     Size  Location     Type
 21603 ;;		None
 21604 ;; Return value:  Size  Location     Type
 21605 ;;		None               void
 21606 ;; Registers used:
 21607 ;;		wreg, cstack
 21608 ;; Tracked objects:
 21609 ;;		On entry : 0/0
 21610 ;;		On exit  : 0/0
 21611 ;;		Unchanged: 0/0
 21612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21617 ;;Total ram usage:        0 bytes
 21618 ;; Hardware stack levels used:    1
 21619 ;; Hardware stack levels required when called:    3
 21620 ;; This function calls:
 21621 ;;		_i2cHighScl
 21622 ;;		_i2cHighSda
 21623 ;;		_i2cLowScl
 21624 ;;		_i2cLowSda
 21625 ;; This function is called by:
 21626 ;;		_I2C_Write_Address_Read_One_Byte
 21627 ;;		_DS1621_Read_Temp
 21628 ;;		_DS3231_Read_Time
 21629 ;;		_DS3231_Read_Alarm_Time
 21630 ;;		_DS3231_Init
 21631 ;;		_I2C_Write_Cmd_Read_One_Byte
 21632 ;; This function uses a non-reentrant model
 21633 ;;
 21634                           
 21635                           	psect	text118
 21636  004EFE                     __ptext118:
 21637                           	opt stack 0
 21638  004EFE                     _I2C_ReStart:
 21639                           	opt stack 24
 21640                           
 21641                           ;I2C_Soft.c: 81: i2cLowScl();
 21642                           
 21643                           ;incstack = 0
 21644  004EFE  EC52  F028         	call	_i2cLowScl	;wreg free
 21645                           
 21646                           ;I2C_Soft.c: 82: i2cHighSda();
 21647  004F02  EC56  F028         	call	_i2cHighSda	;wreg free
 21648                           
 21649                           ;I2C_Soft.c: 83: i2cHighScl();
 21650  004F06  EC34  F028         	call	_i2cHighScl	;wreg free
 21651                           
 21652                           ;I2C_Soft.c: 84: i2cLowSda();
 21653  004F0A  EC44  F028         	call	_i2cLowSda	;wreg free
 21654                           
 21655                           ;I2C_Soft.c: 85: i2cLowScl();
 21656  004F0E  EC52  F028         	call	_i2cLowScl	;wreg free
 21657  004F12  0012               	return		;funcret
 21658  004F14                     __end_of_I2C_ReStart:
 21659                           	opt stack 0
 21660                           tblptru	equ	0xFF8
 21661                           tblptrh	equ	0xFF7
 21662                           tblptrl	equ	0xFF6
 21663                           tablat	equ	0xFF5
 21664                           prodh	equ	0xFF4
 21665                           prodl	equ	0xFF3
 21666                           intcon	equ	0xFF2
 21667                           intcon2	equ	0xFF1
 21668                           intcon3	equ	0xFF0
 21669                           postinc0	equ	0xFEE
 21670                           wreg	equ	0xFE8
 21671                           postdec1	equ	0xFE5
 21672                           fsr1l	equ	0xFE1
 21673                           indf2	equ	0xFDF
 21674                           postinc2	equ	0xFDE
 21675                           postdec2	equ	0xFDD
 21676                           fsr2h	equ	0xFDA
 21677                           fsr2l	equ	0xFD9
 21678                           status	equ	0xFD8
 21679                           
 21680 ;; *************** function _i2cLowSda *****************
 21681 ;; Defined at:
 21682 ;;		line 102 in file "I2C_Soft.c"
 21683 ;; Parameters:    Size  Location     Type
 21684 ;;		None
 21685 ;; Auto vars:     Size  Location     Type
 21686 ;;		None
 21687 ;; Return value:  Size  Location     Type
 21688 ;;		None               void
 21689 ;; Registers used:
 21690 ;;		None
 21691 ;; Tracked objects:
 21692 ;;		On entry : 0/0
 21693 ;;		On exit  : 0/0
 21694 ;;		Unchanged: 0/0
 21695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21700 ;;Total ram usage:        0 bytes
 21701 ;; Hardware stack levels used:    1
 21702 ;; Hardware stack levels required when called:    2
 21703 ;; This function calls:
 21704 ;;		Nothing
 21705 ;; This function is called by:
 21706 ;;		_I2C_Write
 21707 ;;		_i2cAck
 21708 ;;		_I2C_Start
 21709 ;;		_I2C_ReStart
 21710 ;;		_I2C_Stop
 21711 ;; This function uses a non-reentrant model
 21712 ;;
 21713                           
 21714                           	psect	text119
 21715  005088                     __ptext119:
 21716                           	opt stack 0
 21717  005088                     _i2cLowSda:
 21718                           	opt stack 24
 21719                           
 21720                           ;I2C_Soft.c: 104: PORTDbits.RD1 = 0;
 21721                           
 21722                           ;incstack = 0
 21723  005088  9283               	bcf	3971,1,c	;volatile
 21724                           
 21725                           ;I2C_Soft.c: 105: TRISDbits.RD1 = 0;
 21726  00508A  9295               	bcf	3989,1,c	;volatile
 21727                           
 21728                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 21729  00508C  D000               	nop2		;2 cycle nop
 21730  00508E  D000               	nop2		;2 cycle nop
 21731  005090  0012               	return		;funcret
 21732  005092                     __end_of_i2cLowSda:
 21733                           	opt stack 0
 21734                           tblptru	equ	0xFF8
 21735                           tblptrh	equ	0xFF7
 21736                           tblptrl	equ	0xFF6
 21737                           tablat	equ	0xFF5
 21738                           prodh	equ	0xFF4
 21739                           prodl	equ	0xFF3
 21740                           intcon	equ	0xFF2
 21741                           intcon2	equ	0xFF1
 21742                           intcon3	equ	0xFF0
 21743                           postinc0	equ	0xFEE
 21744                           wreg	equ	0xFE8
 21745                           postdec1	equ	0xFE5
 21746                           fsr1l	equ	0xFE1
 21747                           indf2	equ	0xFDF
 21748                           postinc2	equ	0xFDE
 21749                           postdec2	equ	0xFDD
 21750                           fsr2h	equ	0xFDA
 21751                           fsr2l	equ	0xFD9
 21752                           status	equ	0xFD8
 21753                           
 21754 ;; *************** function _i2cLowScl *****************
 21755 ;; Defined at:
 21756 ;;		line 115 in file "I2C_Soft.c"
 21757 ;; Parameters:    Size  Location     Type
 21758 ;;		None
 21759 ;; Auto vars:     Size  Location     Type
 21760 ;;		None
 21761 ;; Return value:  Size  Location     Type
 21762 ;;		None               void
 21763 ;; Registers used:
 21764 ;;		None
 21765 ;; Tracked objects:
 21766 ;;		On entry : 0/0
 21767 ;;		On exit  : 0/0
 21768 ;;		Unchanged: 0/0
 21769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21774 ;;Total ram usage:        0 bytes
 21775 ;; Hardware stack levels used:    1
 21776 ;; Hardware stack levels required when called:    2
 21777 ;; This function calls:
 21778 ;;		Nothing
 21779 ;; This function is called by:
 21780 ;;		_I2C_Read
 21781 ;;		_I2C_Write
 21782 ;;		_i2cNack
 21783 ;;		_i2cAck
 21784 ;;		_I2C_Start
 21785 ;;		_I2C_ReStart
 21786 ;;		_I2C_Stop
 21787 ;; This function uses a non-reentrant model
 21788 ;;
 21789                           
 21790                           	psect	text120
 21791  0050A4                     __ptext120:
 21792                           	opt stack 0
 21793  0050A4                     _i2cLowScl:
 21794                           	opt stack 24
 21795                           
 21796                           ;I2C_Soft.c: 117: PORTDbits.RD0 = 0;
 21797                           
 21798                           ;incstack = 0
 21799  0050A4  9083               	bcf	3971,0,c	;volatile
 21800                           
 21801                           ;I2C_Soft.c: 118: TRISDbits.RD0 = 0;
 21802  0050A6  9095               	bcf	3989,0,c	;volatile
 21803                           
 21804                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 21805  0050A8  D000               	nop2		;2 cycle nop
 21806  0050AA  0012               	return		;funcret
 21807  0050AC                     __end_of_i2cLowScl:
 21808                           	opt stack 0
 21809                           tblptru	equ	0xFF8
 21810                           tblptrh	equ	0xFF7
 21811                           tblptrl	equ	0xFF6
 21812                           tablat	equ	0xFF5
 21813                           prodh	equ	0xFF4
 21814                           prodl	equ	0xFF3
 21815                           intcon	equ	0xFF2
 21816                           intcon2	equ	0xFF1
 21817                           intcon3	equ	0xFF0
 21818                           postinc0	equ	0xFEE
 21819                           wreg	equ	0xFE8
 21820                           postdec1	equ	0xFE5
 21821                           fsr1l	equ	0xFE1
 21822                           indf2	equ	0xFDF
 21823                           postinc2	equ	0xFDE
 21824                           postdec2	equ	0xFDD
 21825                           fsr2h	equ	0xFDA
 21826                           fsr2l	equ	0xFD9
 21827                           status	equ	0xFD8
 21828                           
 21829 ;; *************** function _i2cHighSda *****************
 21830 ;; Defined at:
 21831 ;;		line 96 in file "I2C_Soft.c"
 21832 ;; Parameters:    Size  Location     Type
 21833 ;;		None
 21834 ;; Auto vars:     Size  Location     Type
 21835 ;;		None
 21836 ;; Return value:  Size  Location     Type
 21837 ;;		None               void
 21838 ;; Registers used:
 21839 ;;		None
 21840 ;; Tracked objects:
 21841 ;;		On entry : 0/0
 21842 ;;		On exit  : 0/0
 21843 ;;		Unchanged: 0/0
 21844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21849 ;;Total ram usage:        0 bytes
 21850 ;; Hardware stack levels used:    1
 21851 ;; Hardware stack levels required when called:    2
 21852 ;; This function calls:
 21853 ;;		Nothing
 21854 ;; This function is called by:
 21855 ;;		_I2C_Init
 21856 ;;		_I2C_Read
 21857 ;;		_I2C_Write
 21858 ;;		_i2cAck
 21859 ;;		_I2C_Start
 21860 ;;		_I2C_ReStart
 21861 ;;		_I2C_Stop
 21862 ;; This function uses a non-reentrant model
 21863 ;;
 21864                           
 21865                           	psect	text121
 21866  0050AC                     __ptext121:
 21867                           	opt stack 0
 21868  0050AC                     _i2cHighSda:
 21869                           	opt stack 24
 21870                           
 21871                           ;I2C_Soft.c: 98: TRISDbits.RD1 = 1;
 21872                           
 21873                           ;incstack = 0
 21874  0050AC  8295               	bsf	3989,1,c	;volatile
 21875                           
 21876                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 21877  0050AE  D000               	nop2		;2 cycle nop
 21878  0050B0  D000               	nop2		;2 cycle nop
 21879  0050B2  0012               	return		;funcret
 21880  0050B4                     __end_of_i2cHighSda:
 21881                           	opt stack 0
 21882                           tblptru	equ	0xFF8
 21883                           tblptrh	equ	0xFF7
 21884                           tblptrl	equ	0xFF6
 21885                           tablat	equ	0xFF5
 21886                           prodh	equ	0xFF4
 21887                           prodl	equ	0xFF3
 21888                           intcon	equ	0xFF2
 21889                           intcon2	equ	0xFF1
 21890                           intcon3	equ	0xFF0
 21891                           postinc0	equ	0xFEE
 21892                           wreg	equ	0xFE8
 21893                           postdec1	equ	0xFE5
 21894                           fsr1l	equ	0xFE1
 21895                           indf2	equ	0xFDF
 21896                           postinc2	equ	0xFDE
 21897                           postdec2	equ	0xFDD
 21898                           fsr2h	equ	0xFDA
 21899                           fsr2l	equ	0xFD9
 21900                           status	equ	0xFD8
 21901                           
 21902 ;; *************** function _i2cHighScl *****************
 21903 ;; Defined at:
 21904 ;;		line 109 in file "I2C_Soft.c"
 21905 ;; Parameters:    Size  Location     Type
 21906 ;;		None
 21907 ;; Auto vars:     Size  Location     Type
 21908 ;;		None
 21909 ;; Return value:  Size  Location     Type
 21910 ;;		None               void
 21911 ;; Registers used:
 21912 ;;		wreg
 21913 ;; Tracked objects:
 21914 ;;		On entry : 0/0
 21915 ;;		On exit  : 0/0
 21916 ;;		Unchanged: 0/0
 21917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21922 ;;Total ram usage:        0 bytes
 21923 ;; Hardware stack levels used:    1
 21924 ;; Hardware stack levels required when called:    2
 21925 ;; This function calls:
 21926 ;;		Nothing
 21927 ;; This function is called by:
 21928 ;;		_I2C_Init
 21929 ;;		_I2C_Read
 21930 ;;		_I2C_Write
 21931 ;;		_i2cNack
 21932 ;;		_i2cAck
 21933 ;;		_I2C_Start
 21934 ;;		_I2C_ReStart
 21935 ;;		_I2C_Stop
 21936 ;; This function uses a non-reentrant model
 21937 ;;
 21938                           
 21939                           	psect	text122
 21940  005068                     __ptext122:
 21941                           	opt stack 0
 21942  005068                     _i2cHighScl:
 21943                           	opt stack 24
 21944                           
 21945                           ;I2C_Soft.c: 111: TRISDbits.RD0 = 1;
 21946                           
 21947                           ;incstack = 0
 21948  005068  8095               	bsf	3989,0,c	;volatile
 21949                           
 21950                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 21951  00506A  0E06               	movlw	6
 21952  00506C                     u9217:
 21953  00506C  2EE8               	decfsz	wreg,f,c
 21954  00506E  D7FE               	goto	u9217
 21955  005070  D000               	nop2		;nop
 21956  005072  0012               	return		;funcret
 21957  005074                     __end_of_i2cHighScl:
 21958                           	opt stack 0
 21959                           tblptru	equ	0xFF8
 21960                           tblptrh	equ	0xFF7
 21961                           tblptrl	equ	0xFF6
 21962                           tablat	equ	0xFF5
 21963                           prodh	equ	0xFF4
 21964                           prodl	equ	0xFF3
 21965                           intcon	equ	0xFF2
 21966                           intcon2	equ	0xFF1
 21967                           intcon3	equ	0xFF0
 21968                           postinc0	equ	0xFEE
 21969                           wreg	equ	0xFE8
 21970                           postdec1	equ	0xFE5
 21971                           fsr1l	equ	0xFE1
 21972                           indf2	equ	0xFDF
 21973                           postinc2	equ	0xFDE
 21974                           postdec2	equ	0xFDD
 21975                           fsr2h	equ	0xFDA
 21976                           fsr2l	equ	0xFD9
 21977                           status	equ	0xFD8
 21978                           
 21979 ;; *************** function _chkisr *****************
 21980 ;; Defined at:
 21981 ;;		line 38 in file "Interrupt.c"
 21982 ;; Parameters:    Size  Location     Type
 21983 ;;		None
 21984 ;; Auto vars:     Size  Location     Type
 21985 ;;		None
 21986 ;; Return value:  Size  Location     Type
 21987 ;;		None               void
 21988 ;; Registers used:
 21989 ;;		wreg, status,2, status,0, cstack
 21990 ;; Tracked objects:
 21991 ;;		On entry : 0/0
 21992 ;;		On exit  : 0/0
 21993 ;;		Unchanged: 0/0
 21994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21997 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21998 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21999 ;;Total ram usage:       14 bytes
 22000 ;; Hardware stack levels used:    1
 22001 ;; Hardware stack levels required when called:    1
 22002 ;; This function calls:
 22003 ;;		_INT0_isr
 22004 ;;		_INT2_isr
 22005 ;;		_TIMER1_isr
 22006 ;; This function is called by:
 22007 ;;		Interrupt level 2
 22008 ;; This function uses a non-reentrant model
 22009 ;;
 22010                           
 22011                           	psect	intcode
 22012  000008                     __pintcode:
 22013                           	opt stack 0
 22014  000008                     _chkisr:
 22015                           	opt stack 19
 22016                           
 22017                           ;incstack = 0
 22018  000008  CFFA F003          	movff	pclath,??_chkisr
 22019  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 22020  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 22021  000014  ED84  F020         	call	int_func,f	;refresh shadow registers
 22022                           pclatu	equ	0xFFB
 22023                           pclath	equ	0xFFA
 22024                           tblptru	equ	0xFF8
 22025                           tblptrh	equ	0xFF7
 22026                           tblptrl	equ	0xFF6
 22027                           tablat	equ	0xFF5
 22028                           prodh	equ	0xFF4
 22029                           prodl	equ	0xFF3
 22030                           intcon	equ	0xFF2
 22031                           intcon2	equ	0xFF1
 22032                           intcon3	equ	0xFF0
 22033                           postinc0	equ	0xFEE
 22034                           fsr0l	equ	0xFE9
 22035                           wreg	equ	0xFE8
 22036                           postdec1	equ	0xFE5
 22037                           fsr1l	equ	0xFE1
 22038                           indf2	equ	0xFDF
 22039                           postinc2	equ	0xFDE
 22040                           postdec2	equ	0xFDD
 22041                           fsr2h	equ	0xFDA
 22042                           fsr2l	equ	0xFD9
 22043                           status	equ	0xFD8
 22044                           
 22045                           	psect	intcode_body
 22046  004108                     __pintcode_body:
 22047                           	opt stack 19
 22048  004108                     int_func:
 22049                           	opt stack 19
 22050  004108  0006               	pop		; remove dummy address from shadow register refresh
 22051  00410A  CFEA F006          	movff	fsr0h,??_chkisr+3
 22052  00410E  CFE1 F007          	movff	fsr1l,??_chkisr+4
 22053  004112  CFE2 F008          	movff	fsr1h,??_chkisr+5
 22054  004116  CFD9 F009          	movff	fsr2l,??_chkisr+6
 22055  00411A  CFDA F00A          	movff	fsr2h,??_chkisr+7
 22056  00411E  CFF3 F00B          	movff	prodl,??_chkisr+8
 22057  004122  CFF4 F00C          	movff	prodh,??_chkisr+9
 22058  004126  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 22059  00412A  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 22060  00412E  CFF8 F00F          	movff	tblptru,??_chkisr+12
 22061  004132  CFF5 F010          	movff	tablat,??_chkisr+13
 22062                           
 22063                           ;Interrupt.c: 41: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 22064  004136  A09E               	btfss	3998,0,c	;volatile
 22065  004138  D003               	goto	i2l8476
 22066  00413A  EC27  F028         	call	_TIMER1_isr	;wreg free
 22067  00413E  D000               	goto	i2l8476
 22068  004140                     i2l8476:
 22069                           
 22070                           ;Interrupt.c: 42: if (INTCONbits.INT0IF == 1) INT0_isr();
 22071  004140  A2F2               	btfss	intcon,1,c	;volatile
 22072  004142  D003               	goto	i2l8480
 22073  004144  EC7E  F012         	call	_INT0_isr	;wreg free
 22074  004148  D000               	goto	i2l8480
 22075  00414A                     i2l8480:
 22076                           
 22077                           ;Interrupt.c: 43: if (INTCON3bits.INT2IF ==1) INT2_isr();
 22078  00414A  A2F0               	btfss	intcon3,1,c	;volatile
 22079  00414C  D003               	goto	i2l279
 22080  00414E  EC49  F028         	call	_INT2_isr	;wreg free
 22081  004152  D000               	goto	i2l279
 22082  004154                     i2l279:
 22083  004154  C010  FFF5         	movff	??_chkisr+13,tablat
 22084  004158  C00F  FFF8         	movff	??_chkisr+12,tblptru
 22085  00415C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 22086  004160  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 22087  004164  C00C  FFF4         	movff	??_chkisr+9,prodh
 22088  004168  C00B  FFF3         	movff	??_chkisr+8,prodl
 22089  00416C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 22090  004170  C009  FFD9         	movff	??_chkisr+6,fsr2l
 22091  004174  C008  FFE2         	movff	??_chkisr+5,fsr1h
 22092  004178  C007  FFE1         	movff	??_chkisr+4,fsr1l
 22093  00417C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 22094  004180  C005  FFE9         	movff	??_chkisr+2,fsr0l
 22095  004184  C004  FFFB         	movff	??_chkisr+1,pclatu
 22096  004188  C003  FFFA         	movff	??_chkisr,pclath
 22097  00418C  0011               	retfie		f
 22098  00418E                     __end_of_chkisr:
 22099                           	opt stack 0
 22100                           pclatu	equ	0xFFB
 22101                           pclath	equ	0xFFA
 22102                           tblptru	equ	0xFF8
 22103                           tblptrh	equ	0xFF7
 22104                           tblptrl	equ	0xFF6
 22105                           tablat	equ	0xFF5
 22106                           prodh	equ	0xFF4
 22107                           prodl	equ	0xFF3
 22108                           intcon	equ	0xFF2
 22109                           intcon2	equ	0xFF1
 22110                           intcon3	equ	0xFF0
 22111                           postinc0	equ	0xFEE
 22112                           fsr0h	equ	0xFEA
 22113                           fsr0l	equ	0xFE9
 22114                           wreg	equ	0xFE8
 22115                           postdec1	equ	0xFE5
 22116                           fsr1h	equ	0xFE2
 22117                           fsr1l	equ	0xFE1
 22118                           indf2	equ	0xFDF
 22119                           postinc2	equ	0xFDE
 22120                           postdec2	equ	0xFDD
 22121                           fsr2h	equ	0xFDA
 22122                           fsr2l	equ	0xFD9
 22123                           status	equ	0xFD8
 22124                           
 22125 ;; *************** function _TIMER1_isr *****************
 22126 ;; Defined at:
 22127 ;;		line 46 in file "Interrupt.c"
 22128 ;; Parameters:    Size  Location     Type
 22129 ;;		None
 22130 ;; Auto vars:     Size  Location     Type
 22131 ;;		None
 22132 ;; Return value:  Size  Location     Type
 22133 ;;		None               void
 22134 ;; Registers used:
 22135 ;;		wreg, status,2
 22136 ;; Tracked objects:
 22137 ;;		On entry : 0/0
 22138 ;;		On exit  : 0/0
 22139 ;;		Unchanged: 0/0
 22140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22145 ;;Total ram usage:        0 bytes
 22146 ;; Hardware stack levels used:    1
 22147 ;; This function calls:
 22148 ;;		Nothing
 22149 ;; This function is called by:
 22150 ;;		_chkisr
 22151 ;; This function uses a non-reentrant model
 22152 ;;
 22153                           
 22154                           	psect	text124
 22155  00504E                     __ptext124:
 22156                           	opt stack 0
 22157  00504E                     _TIMER1_isr:
 22158                           	opt stack 19
 22159                           
 22160                           ;Interrupt.c: 48: Nec_state = 0;
 22161                           
 22162                           ;incstack = 0
 22163  00504E  0E00               	movlw	0
 22164  005050  0100               	movlb	0	; () banked
 22165  005052  6FA2               	movwf	_Nec_state& (0+255),b
 22166                           
 22167                           ; BSR set to: 0
 22168                           ;Interrupt.c: 49: INTCON2bits.INTEDG0 = 0;
 22169  005054  9CF1               	bcf	intcon2,6,c	;volatile
 22170                           
 22171                           ; BSR set to: 0
 22172                           ;Interrupt.c: 50: T1CONbits.TMR1ON = 0;
 22173  005056  90CD               	bcf	4045,0,c	;volatile
 22174                           
 22175                           ; BSR set to: 0
 22176                           ;Interrupt.c: 51: PIR1bits.TMR1IF = 0;
 22177  005058  909E               	bcf	3998,0,c	;volatile
 22178                           
 22179                           ; BSR set to: 0
 22180  00505A  0012               	return		;funcret
 22181  00505C                     __end_of_TIMER1_isr:
 22182                           	opt stack 0
 22183                           pclatu	equ	0xFFB
 22184                           pclath	equ	0xFFA
 22185                           tblptru	equ	0xFF8
 22186                           tblptrh	equ	0xFF7
 22187                           tblptrl	equ	0xFF6
 22188                           tablat	equ	0xFF5
 22189                           prodh	equ	0xFF4
 22190                           prodl	equ	0xFF3
 22191                           intcon	equ	0xFF2
 22192                           intcon2	equ	0xFF1
 22193                           intcon3	equ	0xFF0
 22194                           postinc0	equ	0xFEE
 22195                           fsr0h	equ	0xFEA
 22196                           fsr0l	equ	0xFE9
 22197                           wreg	equ	0xFE8
 22198                           postdec1	equ	0xFE5
 22199                           fsr1h	equ	0xFE2
 22200                           fsr1l	equ	0xFE1
 22201                           indf2	equ	0xFDF
 22202                           postinc2	equ	0xFDE
 22203                           postdec2	equ	0xFDD
 22204                           fsr2h	equ	0xFDA
 22205                           fsr2l	equ	0xFD9
 22206                           status	equ	0xFD8
 22207                           
 22208 ;; *************** function _INT2_isr *****************
 22209 ;; Defined at:
 22210 ;;		line 164 in file "Interrupt.c"
 22211 ;; Parameters:    Size  Location     Type
 22212 ;;		None
 22213 ;; Auto vars:     Size  Location     Type
 22214 ;;		None
 22215 ;; Return value:  Size  Location     Type
 22216 ;;		None               void
 22217 ;; Registers used:
 22218 ;;		wreg, status,2
 22219 ;; Tracked objects:
 22220 ;;		On entry : 0/0
 22221 ;;		On exit  : 0/0
 22222 ;;		Unchanged: 0/0
 22223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22228 ;;Total ram usage:        0 bytes
 22229 ;; Hardware stack levels used:    1
 22230 ;; This function calls:
 22231 ;;		Nothing
 22232 ;; This function is called by:
 22233 ;;		_chkisr
 22234 ;; This function uses a non-reentrant model
 22235 ;;
 22236                           
 22237                           	psect	text125
 22238  005092                     __ptext125:
 22239                           	opt stack 0
 22240  005092                     _INT2_isr:
 22241                           	opt stack 19
 22242                           
 22243                           ;Interrupt.c: 167: INTCON3bits.INT2IF =0;
 22244                           
 22245                           ; BSR set to: 0
 22246                           ;incstack = 0
 22247  005092  92F0               	bcf	intcon3,1,c	;volatile
 22248                           
 22249                           ;Interrupt.c: 168: INT2_flag = 1;
 22250  005094  0E01               	movlw	1
 22251  005096  0100               	movlb	0	; () banked
 22252  005098  6F9D               	movwf	_INT2_flag& (0+255),b
 22253                           
 22254                           ; BSR set to: 0
 22255  00509A  0012               	return		;funcret
 22256  00509C                     __end_of_INT2_isr:
 22257                           	opt stack 0
 22258                           pclatu	equ	0xFFB
 22259                           pclath	equ	0xFFA
 22260                           tblptru	equ	0xFF8
 22261                           tblptrh	equ	0xFF7
 22262                           tblptrl	equ	0xFF6
 22263                           tablat	equ	0xFF5
 22264                           prodh	equ	0xFF4
 22265                           prodl	equ	0xFF3
 22266                           intcon	equ	0xFF2
 22267                           intcon2	equ	0xFF1
 22268                           intcon3	equ	0xFF0
 22269                           postinc0	equ	0xFEE
 22270                           fsr0h	equ	0xFEA
 22271                           fsr0l	equ	0xFE9
 22272                           wreg	equ	0xFE8
 22273                           postdec1	equ	0xFE5
 22274                           fsr1h	equ	0xFE2
 22275                           fsr1l	equ	0xFE1
 22276                           indf2	equ	0xFDF
 22277                           postinc2	equ	0xFDE
 22278                           postdec2	equ	0xFDD
 22279                           fsr2h	equ	0xFDA
 22280                           fsr2l	equ	0xFD9
 22281                           status	equ	0xFD8
 22282                           
 22283 ;; *************** function _INT0_isr *****************
 22284 ;; Defined at:
 22285 ;;		line 60 in file "Interrupt.c"
 22286 ;; Parameters:    Size  Location     Type
 22287 ;;		None
 22288 ;; Auto vars:     Size  Location     Type
 22289 ;;		None
 22290 ;; Return value:  Size  Location     Type
 22291 ;;		None               void
 22292 ;; Registers used:
 22293 ;;		wreg, status,2, status,0
 22294 ;; Tracked objects:
 22295 ;;		On entry : 0/0
 22296 ;;		On exit  : 0/0
 22297 ;;		Unchanged: 0/0
 22298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;Total ram usage:        2 bytes
 22304 ;; Hardware stack levels used:    1
 22305 ;; This function calls:
 22306 ;;		Nothing
 22307 ;; This function is called by:
 22308 ;;		_chkisr
 22309 ;; This function uses a non-reentrant model
 22310 ;;
 22311                           
 22312                           	psect	text126
 22313  0024FC                     __ptext126:
 22314                           	opt stack 0
 22315  0024FC                     _INT0_isr:
 22316                           	opt stack 19
 22317                           
 22318                           ;Interrupt.c: 63: INTCONbits.INT0IF = 0;
 22319                           
 22320                           ; BSR set to: 0
 22321                           ;incstack = 0
 22322  0024FC  92F2               	bcf	intcon,1,c	;volatile
 22323                           
 22324                           ;Interrupt.c: 64: if (Nec_state != 0)
 22325  0024FE  0100               	movlb	0	; () banked
 22326  002500  51A2               	movf	_Nec_state& (0+255),w,b
 22327  002502  B4D8               	btfsc	status,2,c
 22328  002504  D0B4               	goto	i2l7928
 22329                           
 22330                           ; BSR set to: 0
 22331                           ;Interrupt.c: 65: {
 22332                           ;Interrupt.c: 66: Time_Elapsed = (TMR1H << 8) | TMR1L;
 22333  002506  50CE               	movf	4046,w,c	;volatile
 22334  002508  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 22335  00250C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 22336  00250E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 22337  002512  6A01               	clrf	??_INT0_isr,c
 22338  002514  1001               	iorwf	??_INT0_isr,w,c
 22339  002516  6E60               	movwf	_Time_Elapsed,c
 22340  002518  5002               	movf	??_INT0_isr+1,w,c
 22341  00251A  6E61               	movwf	_Time_Elapsed+1,c
 22342                           
 22343                           ; BSR set to: 0
 22344                           ;Interrupt.c: 67: TMR1H = 0;
 22345  00251C  0E00               	movlw	0
 22346  00251E  6ECF               	movwf	4047,c	;volatile
 22347                           
 22348                           ; BSR set to: 0
 22349                           ;Interrupt.c: 68: TMR1L = 0;
 22350  002520  0E00               	movlw	0
 22351  002522  6ECE               	movwf	4046,c	;volatile
 22352                           
 22353                           ; BSR set to: 0
 22354                           ;Interrupt.c: 69: }
 22355                           ;Interrupt.c: 71: switch(Nec_state)
 22356  002524  D0A4               	goto	i2l7928
 22357  002526                     i2l7858:
 22358                           
 22359                           ; BSR set to: 0
 22360                           ;Interrupt.c: 74: {
 22361                           ;Interrupt.c: 76: TMR1H = 0;
 22362  002526  0E00               	movlw	0
 22363  002528  6ECF               	movwf	4047,c	;volatile
 22364                           
 22365                           ;Interrupt.c: 77: TMR1L = 0;
 22366  00252A  0E00               	movlw	0
 22367  00252C  6ECE               	movwf	4046,c	;volatile
 22368                           
 22369                           ; BSR set to: 0
 22370                           ;Interrupt.c: 78: PIR1bits.TMR1IF = 0;
 22371  00252E  909E               	bcf	3998,0,c	;volatile
 22372                           
 22373                           ;Interrupt.c: 79: T1CON= 0x90;
 22374  002530  0E90               	movlw	144
 22375  002532  6ECD               	movwf	4045,c	;volatile
 22376                           
 22377                           ; BSR set to: 0
 22378                           ;Interrupt.c: 80: T1CONbits.TMR1ON = 1;
 22379  002534  80CD               	bsf	4045,0,c	;volatile
 22380                           
 22381                           ;Interrupt.c: 81: bit_count = 0;
 22382  002536  0E00               	movlw	0
 22383  002538  0100               	movlb	0	; () banked
 22384  00253A  6FA8               	movwf	_bit_count& (0+255),b
 22385                           
 22386                           ;Interrupt.c: 82: Nec_code = 0;
 22387  00253C  0E00               	movlw	0
 22388  00253E  0100               	movlb	0	; () banked
 22389  002540  6F80               	movwf	_Nec_code& (0+255),b
 22390  002542  0E00               	movlw	0
 22391  002544  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22392  002546  0E00               	movlw	0
 22393  002548  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22394  00254A  0E00               	movlw	0
 22395  00254C  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22396                           
 22397                           ;Interrupt.c: 83: Nec_state = 1;
 22398  00254E  0E01               	movlw	1
 22399  002550  0100               	movlb	0	; () banked
 22400  002552  6FA2               	movwf	_Nec_state& (0+255),b
 22401  002554  D08A               	goto	i2l7922
 22402                           
 22403                           ; BSR set to: 0
 22404                           ;Interrupt.c: 87: return;
 22405                           
 22406                           ; BSR set to: 0
 22407                           ;Interrupt.c: 84: INTCON2bits.INTEDG0 = 1;
 22408  002556  D09D               	goto	i2l291
 22409  002558                     i2l7868:
 22410                           
 22411                           ; BSR set to: 0
 22412                           ;Interrupt.c: 91: {
 22413                           ;Interrupt.c: 93: if((Time_Elapsed > 8500) && (Time_Elapsed <9500))
 22414  002558  0E35               	movlw	53
 22415  00255A  5C60               	subwf	_Time_Elapsed,w,c
 22416  00255C  0E21               	movlw	33
 22417  00255E  5861               	subwfb	_Time_Elapsed+1,w,c
 22418  002560  A0D8               	btfss	status,0,c
 22419  002562  D008               	goto	i2l7874
 22420                           
 22421                           ; BSR set to: 0
 22422  002564  0E1C               	movlw	28
 22423  002566  5C60               	subwf	_Time_Elapsed,w,c
 22424  002568  0E25               	movlw	37
 22425  00256A  5861               	subwfb	_Time_Elapsed+1,w,c
 22426  00256C  B0D8               	btfsc	status,0,c
 22427  00256E  D002               	goto	i2l7874
 22428                           
 22429                           ; BSR set to: 0
 22430                           ;Interrupt.c: 94: {
 22431                           ;Interrupt.c: 95: Nec_state =2;
 22432  002570  0E02               	movlw	2
 22433  002572  D025               	goto	L24
 22434  002574                     i2l7874:
 22435                           
 22436                           ; BSR set to: 0
 22437                           ;Interrupt.c: 98: {
 22438                           ;Interrupt.c: 99: Nec_state =0;
 22439  002574  0E00               	movlw	0
 22440  002576  D023               	goto	L24
 22441                           
 22442                           ; BSR set to: 0
 22443  002578  D025               	goto	i2l7900
 22444                           
 22445                           ; BSR set to: 0
 22446                           ;Interrupt.c: 102: return;
 22447                           
 22448                           ; BSR set to: 0
 22449                           ;Interrupt.c: 100: }
 22450                           ;Interrupt.c: 101: INTCON2bits.INTEDG0 = 0;
 22451  00257A  D08B               	goto	i2l291
 22452  00257C                     i2l7880:
 22453                           
 22454                           ; BSR set to: 0
 22455                           ;Interrupt.c: 106: {
 22456                           ;Interrupt.c: 107: if((Time_Elapsed > 4000) && (Time_Elapsed <5000))
 22457  00257C  0EA1               	movlw	161
 22458  00257E  5C60               	subwf	_Time_Elapsed,w,c
 22459  002580  0E0F               	movlw	15
 22460  002582  5861               	subwfb	_Time_Elapsed+1,w,c
 22461  002584  A0D8               	btfss	status,0,c
 22462  002586  D008               	goto	i2l7886
 22463                           
 22464                           ; BSR set to: 0
 22465  002588  0E88               	movlw	136
 22466  00258A  5C60               	subwf	_Time_Elapsed,w,c
 22467  00258C  0E13               	movlw	19
 22468  00258E  5861               	subwfb	_Time_Elapsed+1,w,c
 22469  002590  B0D8               	btfsc	status,0,c
 22470  002592  D002               	goto	i2l7886
 22471  002594                     
 22472                           ; BSR set to: 0
 22473                           ;Interrupt.c: 108: {
 22474                           ;Interrupt.c: 109: Nec_state =3;
 22475  002594  0E03               	movlw	3
 22476  002596  D066               	goto	L25
 22477  002598                     i2l7886:
 22478                           
 22479                           ; BSR set to: 0
 22480                           ;Interrupt.c: 112: {
 22481                           ;Interrupt.c: 113: Nec_state =0;
 22482  002598  0E00               	movlw	0
 22483  00259A  D064               	goto	L25
 22484                           
 22485                           ; BSR set to: 0
 22486  00259C  D066               	goto	i2l7922
 22487                           
 22488                           ; BSR set to: 0
 22489                           ;Interrupt.c: 117: return;
 22490                           
 22491                           ; BSR set to: 0
 22492                           ;Interrupt.c: 114: }
 22493                           ;Interrupt.c: 115: INTCON2bits.INTEDG0 = 1;
 22494  00259E  D079               	goto	i2l291
 22495  0025A0                     i2l7892:
 22496                           
 22497                           ; BSR set to: 0
 22498                           ;Interrupt.c: 121: {
 22499                           ;Interrupt.c: 122: if((Time_Elapsed > 400) && (Time_Elapsed <700))
 22500  0025A0  0E91               	movlw	145
 22501  0025A2  5C60               	subwf	_Time_Elapsed,w,c
 22502  0025A4  0E01               	movlw	1
 22503  0025A6  5861               	subwfb	_Time_Elapsed+1,w,c
 22504  0025A8  A0D8               	btfss	status,0,c
 22505  0025AA  D7E4               	goto	i2l7874
 22506                           
 22507                           ; BSR set to: 0
 22508  0025AC  0EBC               	movlw	188
 22509  0025AE  5C60               	subwf	_Time_Elapsed,w,c
 22510  0025B0  0E02               	movlw	2
 22511  0025B2  5861               	subwfb	_Time_Elapsed+1,w,c
 22512  0025B4  B0D8               	btfsc	status,0,c
 22513  0025B6  D7DE               	goto	i2l7874
 22514                           
 22515                           ; BSR set to: 0
 22516                           ;Interrupt.c: 123: {
 22517                           ;Interrupt.c: 124: Nec_state =4;
 22518  0025B8  0E04               	movlw	4
 22519  0025BA  D001               	goto	L24
 22520                           
 22521                           ; BSR set to: 0
 22522                           
 22523                           ;Interrupt.c: 126: }else
 22524  0025BC  D7DB               	goto	i2l7874
 22525  0025BE                     L24:
 22526  0025BE  0100               	movlb	0	; () banked
 22527  0025C0  6FA2               	movwf	_Nec_state& (0+255),b
 22528  0025C2  D000               	goto	i2l7900
 22529  0025C4                     i2l7900:
 22530                           
 22531                           ; BSR set to: 0
 22532                           ;Interrupt.c: 129: }
 22533                           ;Interrupt.c: 130: INTCON2bits.INTEDG0 = 0;
 22534  0025C4  9CF1               	bcf	intcon2,6,c	;volatile
 22535                           
 22536                           ; BSR set to: 0
 22537                           ;Interrupt.c: 131: return;
 22538  0025C6  D065               	goto	i2l291
 22539  0025C8                     i2l7904:
 22540                           
 22541                           ; BSR set to: 0
 22542                           ;Interrupt.c: 135: {
 22543                           ;Interrupt.c: 136: if((Time_Elapsed > 400) && (Time_Elapsed <1800))
 22544  0025C8  0E91               	movlw	145
 22545  0025CA  5C60               	subwf	_Time_Elapsed,w,c
 22546  0025CC  0E01               	movlw	1
 22547  0025CE  5861               	subwfb	_Time_Elapsed+1,w,c
 22548  0025D0  A0D8               	btfss	status,0,c
 22549  0025D2  D7E2               	goto	i2l7886
 22550                           
 22551                           ; BSR set to: 0
 22552  0025D4  0E08               	movlw	8
 22553  0025D6  5C60               	subwf	_Time_Elapsed,w,c
 22554  0025D8  0E07               	movlw	7
 22555  0025DA  5861               	subwfb	_Time_Elapsed+1,w,c
 22556  0025DC  B0D8               	btfsc	status,0,c
 22557  0025DE  D7DC               	goto	i2l7886
 22558                           
 22559                           ; BSR set to: 0
 22560                           ;Interrupt.c: 137: {
 22561                           ;Interrupt.c: 138: Nec_code = Nec_code<<1;
 22562  0025E0  90D8               	bcf	status,0,c
 22563  0025E2  0100               	movlb	0	; () banked
 22564  0025E4  3580               	rlcf	_Nec_code& (0+255),w,b
 22565  0025E6  0100               	movlb	0	; () banked
 22566  0025E8  6F80               	movwf	_Nec_code& (0+255),b
 22567  0025EA  0100               	movlb	0	; () banked
 22568  0025EC  3581               	rlcf	(_Nec_code+1)& (0+255),w,b
 22569  0025EE  0100               	movlb	0	; () banked
 22570  0025F0  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22571  0025F2  0100               	movlb	0	; () banked
 22572  0025F4  3582               	rlcf	(_Nec_code+2)& (0+255),w,b
 22573  0025F6  0100               	movlb	0	; () banked
 22574  0025F8  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22575  0025FA  0100               	movlb	0	; () banked
 22576  0025FC  3583               	rlcf	(_Nec_code+3)& (0+255),w,b
 22577  0025FE  0100               	movlb	0	; () banked
 22578  002600  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22579                           
 22580                           ;Interrupt.c: 139: if(Time_Elapsed > 1000)
 22581  002602  0EE9               	movlw	233
 22582  002604  5C60               	subwf	_Time_Elapsed,w,c
 22583  002606  0E03               	movlw	3
 22584  002608  5861               	subwfb	_Time_Elapsed+1,w,c
 22585  00260A  A0D8               	btfss	status,0,c
 22586  00260C  D014               	goto	i2l303
 22587                           
 22588                           ; BSR set to: 0
 22589                           ;Interrupt.c: 140: Nec_code = Nec_code +1;
 22590  00260E  0E01               	movlw	1
 22591  002610  0100               	movlb	0	; () banked
 22592  002612  2580               	addwf	_Nec_code& (0+255),w,b
 22593  002614  0100               	movlb	0	; () banked
 22594  002616  6F80               	movwf	_Nec_code& (0+255),b
 22595  002618  0E00               	movlw	0
 22596  00261A  0100               	movlb	0	; () banked
 22597  00261C  2181               	addwfc	(_Nec_code+1)& (0+255),w,b
 22598  00261E  0100               	movlb	0	; () banked
 22599  002620  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22600  002622  0E00               	movlw	0
 22601  002624  0100               	movlb	0	; () banked
 22602  002626  2182               	addwfc	(_Nec_code+2)& (0+255),w,b
 22603  002628  0100               	movlb	0	; () banked
 22604  00262A  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22605  00262C  0E00               	movlw	0
 22606  00262E  0100               	movlb	0	; () banked
 22607  002630  2183               	addwfc	(_Nec_code+3)& (0+255),w,b
 22608  002632  0100               	movlb	0	; () banked
 22609  002634  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22610  002636                     i2l303:
 22611                           
 22612                           ; BSR set to: 0
 22613                           ;Interrupt.c: 141: bit_count =bit_count+1;
 22614  002636  0100               	movlb	0	; () banked
 22615  002638  29A8               	incf	_bit_count& (0+255),w,b
 22616  00263A  0100               	movlb	0	; () banked
 22617  00263C  6FA8               	movwf	_bit_count& (0+255),b
 22618                           
 22619                           ;Interrupt.c: 142: if(bit_count >31)
 22620  00263E  0E1F               	movlw	31
 22621  002640  0100               	movlb	0	; () banked
 22622  002642  65A8               	cpfsgt	_bit_count& (0+255),b
 22623  002644  D7A7               	goto	L26
 22624                           
 22625                           ; BSR set to: 0
 22626                           ;Interrupt.c: 143: {
 22627                           ;Interrupt.c: 144: nec_ok =1;
 22628  002646  0E00               	movlw	0
 22629  002648  0100               	movlb	0	; () banked
 22630  00264A  6F96               	movwf	(_nec_ok+1)& (0+255),b
 22631  00264C  0E01               	movlw	1
 22632  00264E  6F95               	movwf	_nec_ok& (0+255),b
 22633                           
 22634                           ; BSR set to: 0
 22635                           ;Interrupt.c: 145: INTCONbits.INT0IE =0;
 22636  002650  98F2               	bcf	intcon,4,c	;volatile
 22637                           
 22638                           ;Interrupt.c: 146: Nec_state = 0;
 22639  002652  0E00               	movlw	0
 22640  002654  0100               	movlb	0	; () banked
 22641  002656  6FA2               	movwf	_Nec_state& (0+255),b
 22642                           
 22643                           ; BSR set to: 0
 22644                           ;Interrupt.c: 147: Nec_code1 =(char) ((Nec_code>>8));
 22645  002658  C081  F0A1         	movff	_Nec_code+1,_Nec_code1
 22646                           
 22647                           ;Interrupt.c: 148: }else
 22648  00265C  D006               	goto	i2l7922
 22649                           
 22650                           ; BSR set to: 0
 22651  00265E  D79A               	goto	L26
 22652                           
 22653                           ; BSR set to: 0
 22654                           ;Interrupt.c: 151: }
 22655                           ;Interrupt.c: 152: }else
 22656                           
 22657                           ; BSR set to: 0
 22658                           ;Interrupt.c: 149: {
 22659                           ;Interrupt.c: 150: Nec_state = 3;
 22660  002660  D004               	goto	i2l7922
 22661                           
 22662                           ; BSR set to: 0
 22663  002662  D79A               	goto	i2l7886
 22664  002664                     L25:
 22665  002664  0100               	movlb	0	; () banked
 22666  002666  6FA2               	movwf	_Nec_state& (0+255),b
 22667  002668  D000               	goto	i2l7922
 22668  00266A                     i2l7922:
 22669                           
 22670                           ; BSR set to: 0
 22671                           ;Interrupt.c: 155: }
 22672                           ;Interrupt.c: 156: INTCON2bits.INTEDG0 = 1;
 22673  00266A  8CF1               	bsf	intcon2,6,c	;volatile
 22674                           
 22675                           ; BSR set to: 0
 22676                           ;Interrupt.c: 158: }
 22677                           ;Interrupt.c: 159: }
 22678                           
 22679                           ; BSR set to: 0
 22680                           ;Interrupt.c: 157: return;
 22681  00266C  D012               	goto	i2l291
 22682  00266E                     i2l7928:
 22683                           
 22684                           ; BSR set to: 0
 22685  00266E  0100               	movlb	0	; () banked
 22686  002670  51A2               	movf	_Nec_state& (0+255),w,b
 22687                           
 22688                           ; Switch size 1, requested type "space"
 22689                           ; Number of cases is 5, Range of values is 0 to 4
 22690                           ; switch strategies available:
 22691                           ; Name         Instructions Cycles
 22692                           ; simple_byte           16     9 (average)
 22693                           ;	Chosen strategy is simple_byte
 22694  002672  0A00               	xorlw	0	; case 0
 22695  002674  B4D8               	btfsc	status,2,c
 22696  002676  D757               	goto	i2l7858
 22697  002678  0A01               	xorlw	1	; case 1
 22698  00267A  B4D8               	btfsc	status,2,c
 22699  00267C  D76D               	goto	i2l7868
 22700  00267E  0A03               	xorlw	3	; case 2
 22701  002680  B4D8               	btfsc	status,2,c
 22702  002682  D77C               	goto	i2l7880
 22703  002684  0A01               	xorlw	1	; case 3
 22704  002686  B4D8               	btfsc	status,2,c
 22705  002688  D78B               	goto	i2l7892
 22706  00268A  0A07               	xorlw	7	; case 4
 22707  00268C  B4D8               	btfsc	status,2,c
 22708  00268E  D79C               	goto	i2l7904
 22709  002690  D000               	goto	i2l291
 22710  002692                     i2l291:
 22711                           
 22712                           ; BSR set to: 0
 22713  002692  0012               	return		;funcret
 22714  002694                     __end_of_INT0_isr:
 22715                           	opt stack 0
 22716                           pclatu	equ	0xFFB
 22717                           pclath	equ	0xFFA
 22718                           tblptru	equ	0xFF8
 22719                           tblptrh	equ	0xFF7
 22720                           tblptrl	equ	0xFF6
 22721                           tablat	equ	0xFF5
 22722                           prodh	equ	0xFF4
 22723                           prodl	equ	0xFF3
 22724                           intcon	equ	0xFF2
 22725                           intcon2	equ	0xFF1
 22726                           intcon3	equ	0xFF0
 22727                           postinc0	equ	0xFEE
 22728                           fsr0h	equ	0xFEA
 22729                           fsr0l	equ	0xFE9
 22730                           wreg	equ	0xFE8
 22731                           postdec1	equ	0xFE5
 22732                           fsr1h	equ	0xFE2
 22733                           fsr1l	equ	0xFE1
 22734                           indf2	equ	0xFDF
 22735                           postinc2	equ	0xFDE
 22736                           postdec2	equ	0xFDD
 22737                           fsr2h	equ	0xFDA
 22738                           fsr2l	equ	0xFD9
 22739                           status	equ	0xFD8
 22740                           pclatu	equ	0xFFB
 22741                           pclath	equ	0xFFA
 22742                           tblptru	equ	0xFF8
 22743                           tblptrh	equ	0xFF7
 22744                           tblptrl	equ	0xFF6
 22745                           tablat	equ	0xFF5
 22746                           prodh	equ	0xFF4
 22747                           prodl	equ	0xFF3
 22748                           intcon	equ	0xFF2
 22749                           intcon2	equ	0xFF1
 22750                           intcon3	equ	0xFF0
 22751                           postinc0	equ	0xFEE
 22752                           fsr0h	equ	0xFEA
 22753                           fsr0l	equ	0xFE9
 22754                           wreg	equ	0xFE8
 22755                           postdec1	equ	0xFE5
 22756                           fsr1h	equ	0xFE2
 22757                           fsr1l	equ	0xFE1
 22758                           indf2	equ	0xFDF
 22759                           postinc2	equ	0xFDE
 22760                           postdec2	equ	0xFDD
 22761                           fsr2h	equ	0xFDA
 22762                           fsr2l	equ	0xFD9
 22763                           status	equ	0xFD8
 22764                           
 22765                           	psect	rparam
 22766  0000                     pclatu	equ	0xFFB
 22767                           pclath	equ	0xFFA
 22768                           tblptru	equ	0xFF8
 22769                           tblptrh	equ	0xFF7
 22770                           tblptrl	equ	0xFF6
 22771                           tablat	equ	0xFF5
 22772                           prodh	equ	0xFF4
 22773                           prodl	equ	0xFF3
 22774                           intcon	equ	0xFF2
 22775                           intcon2	equ	0xFF1
 22776                           intcon3	equ	0xFF0
 22777                           postinc0	equ	0xFEE
 22778                           fsr0h	equ	0xFEA
 22779                           fsr0l	equ	0xFE9
 22780                           wreg	equ	0xFE8
 22781                           postdec1	equ	0xFE5
 22782                           fsr1h	equ	0xFE2
 22783                           fsr1l	equ	0xFE1
 22784                           indf2	equ	0xFDF
 22785                           postinc2	equ	0xFDE
 22786                           postdec2	equ	0xFDD
 22787                           fsr2h	equ	0xFDA
 22788                           fsr2l	equ	0xFD9
 22789                           status	equ	0xFD8


Data Sizes:
    Strings     330
    Constant    625
    Data        152
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     95     111
    BANK0           128     25     118
    BANK1           256     26     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[12]), STR_31(CODE[21]), 
		 -> STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[21]), STR_26(CODE[5]), 
		 -> STR_25(CODE[11]), STR_24(CODE[20]), STR_23(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[5]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[7]), STR_14(CODE[13]), 
		 -> STR_13(CODE[9]), STR_12(CODE[11]), STR_11(CODE[5]), STR_10(CODE[5]), 
		 -> STR_9(CODE[2]), STR_8(CODE[3]), STR_7(CODE[13]), STR_6(CODE[21]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_35(CODE[22]), STR_27(CODE[11]), STR_5(CODE[12]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_check_for_button_input
    _test_alarm->_DS3231_Turn_Off_Alarm
    _test_alarm->_DS3231_Turn_On_Alarm
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    _Setup_Temp_Fan->_check_for_button_input
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Monitor_Fan->_do_update_pwm
    _Do_Setup_Time->_check_for_button_input
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Do_Setup_Alarm_Time->_check_for_button_input
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___ftdiv->___ftmul
    _printf->___ftsub
    _scale->___awmod
    _fround->___awmod
    ___ftmul->___awdiv
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Setup_Temp_Fan
    _Setup_Temp_Fan->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input
    _Do_Setup_Alarm_Time->_check_for_button_input
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 1682080
                                             24 BANK0      1     1      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
                      _Do_Setup_Time
                  _Initialize_Screen
                        _Monitor_Fan
                     _Setup_Temp_Fan
                 _Toggle_Fan_Monitor
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
                         _test_alarm
 ---------------------------------------------------------------------------------
 (1) _test_alarm                                           0     0      0    7371
               _Activate_Buzzer_4KHz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        1     1      0      45
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    1765
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     687
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     581
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_4KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    8657
                                             60 COMRAM     8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2386
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    8251
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   49991
                                             73 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan_Monitor                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup_Temp_Fan                                       2     2      0  361069
                                             22 BANK0      2     2      0
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                _Exit_Setup_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
            _Update_Setup_Fan_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   36095
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   41183
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Fan_Temp                                  0     0      0   54746
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   54746
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   41183
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   41183
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   11368
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       5     1      4     194
                                             16 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  398854
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   45075
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   41081
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   54746
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   64849
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10103
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   41081
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   41081
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  607524
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0   69493
                                             94 COMRAM     1     1      0
                                             20 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   45075
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0  110441
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9312
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9334
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   54746
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   65439
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   54451
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3043
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    1819
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    5210
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _TFT_GreenTab_Initialize                              0     0      0    8884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd3                                                0     0      0    4352
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd1                                                0     0      0    4352
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0    4262
                           _delay_ms
 ---------------------------------------------------------------------------------
 (6) _delay_ms                                             6     4      2    4262
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0   10398
                                             73 COMRAM     2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    9944
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11220
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11220
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0   11174
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0  110441
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0  110441
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   69360
                                              0 BANK0     20     6     14
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   18743
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18464
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4976
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4853
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    4995
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     826
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                             88 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     718
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   31233
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17378
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8980
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3222
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     822
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Setup_Temp_Fan
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Toggle_Fan_Monitor
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
     _isdigit
     _putch
     _scale
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _test_alarm
     _Activate_Buzzer_4KHz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
     ___ftge

 _chkisr (ROOT)
   _INT0_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      8A       7       53.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      76       5       92.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5F      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16F      34        0.0%
DATA                 0      0     16F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May 13 10:11:37 2021

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            l31 4B02  
                                          l25 4B66                                            l28 4AF4  
                                          l36 4EFC                                            l39 4998  
                                          l90 4916                                            l93 4A24  
                __size_of_Do_Setup_Alarm_Time 00C0                                  ___awdiv@sign 001C  
                               read_volt@volt 0040                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 004A                                  ___ftadd@exp1 0058  
                                ___ftadd@exp2 0057                                  ___ftadd@sign 0056  
                                         l205 4ACA                                           l127 4B34  
                                         l515 5036                                           l554 32A2  
                                         l803 2410                                           l733 4BC8  
                                         l739 4106                                           l755 296C  
                                         l764 28C2                                           l757 2846  
                                         l679 4830                                           l792 3712  
                                         _FAN 009B                                           l689 4F4A  
                                         l793 367E                                           l795 36EE  
                                         l796 3710                                           _PR2 000FCB  
                              read_volt@nStep 0043                          DS3231_Init@Address_7 0017  
                        DS3231_Init@Address_E 0018                                           _day 0067  
                           _Deactivate_Buzzer 509C                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0014                                           _dow 00AA  
                                         _nbr 0093                                           _rpm 0097  
                       __size_of_Turn_Off_Fan 000C                                           _rps 0099  
                                         _txt 0062                                  ___awmod@sign 0042  
                                         wreg 000FE8                                 _Increase_Time 2A88  
                __size_of_Go_Next_Alarm_Field 0020                            ?_Deactivate_Buzzer 0001  
             Update_Setup_Fan_Screen@dc_char1 004A               Update_Setup_Fan_Screen@dc_char2 004B  
             Update_Setup_Fan_Screen@dc_char3 004C                                    _Fan_SW_Txt 00CF  
                 __end_of_Decrease_Alarm_Time 45D4        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 4BCA  
                                ___ftdiv@cntr 0037                                  ___ftdiv@sign 003C  
                                __CFG_WDT$OFF 000000                                          l2001 30C4  
                                        l2011 4CD2                                drawFastVLine@h 0019  
                                        l2022 3472                                          l2018 495A  
                                        l2037 4D00                                          l1261 2198  
                                        l1342 4C1E                                          l2063 4CBA  
                                        l1272 234C                                          l1425 1652  
                                        l1345 46EA                                          l2066 406E  
                                        l1418 1C16                                          l1338 3FF2  
                                        l2172 4A14                                          l2076 4360  
                              drawFastVLine@x 0022                                drawFastVLine@y 0018  
                                        l1454 08A4                                          l1359 4DC0  
                                        l1391 4C94                                          l1560 439E  
                                        l2096 4632                                          l1536 0C5E  
                                        l1385 44AC                                          l1564 43B8  
                                        l1572 4C6E                                          l1388 4C74  
                                        l1565 43BA                                          l1493 071A  
                                        l1566 43C4                                          l1567 43C6  
                                        l1569 43E0                                          l6100 49E8  
                                        l1908 3958                                          l1941 1E8A  
                                        l1765 3E34                                          l6110 3648  
                                        l1790 4A8E                                          l1952 1F4C  
                                        l1856 2FCC                                          l1961 1F68  
                                        l1937 1E60                                          l1865 2FBC  
                                        l1938 1FDE                                          l1778 4290  
                                        l1980 2D46                                          l1972 3520  
                                        l6132 36F2                                          l6116 36B6  
                                        l6142 370C                                          l6136 36FC  
                                        l6128 36E4                                          l1897 3980  
                                        l1977 2DB6                                          l1969 3554  
                                        l1986 2DA6                                          l1995 3ECA  
                                        l1979 2D1E                                          l7150 4396  
                                        l7142 4384                                          l7302 2324  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l7162 43B0  
                                        l7154 43A2                                          l7146 438E  
                                        l6098 49E2                                          l9002 3DDE  
                                        l7322 4DAA                                          l5900 4A1C  
                                        l5580 40FC                                          l5564 4090  
                                        l9004 3DE8                                          l7260 207E  
                                        l7340 4B5E                                          l5654 4BAA  
                                        l5662 4890                                          l9022 3E2A  
                                        l9014 3E0E                                          l9006 3DF0  
                                        l7326 4DB8                                          l7270 2130  
                                        l7254 1FEC                                          l5568 40C8  
                                        l9200 2960                                          l7264 20BA  
                                        l7504 4D98                                          l7280 21A6  
                                        l5906 4A2E                                          l5578 40EE  
                                        l5666 48AC                                          l9018 3E1A  
                                        l9050 426A                                          l9042 4242  
                                        l9034 4226                                          l7258 2048  
                                        l7290 226E                                          l7282 21DC  
                                        l7338 4B4E                                          l5908 4A34  
                                        l9044 424C                                          l9220 1B12  
                                        l7268 20F6                                          l7276 2170  
                                        l7292 22A8                                          l5870 48DA  
                                        l5918 4A46                                          l9206 2968  
                                        l9046 4254                                          l9054 4276  
                                        l9038 4234                                          l7286 2218  
                                        l5880 48F0                                          l9160 2828  
                                        l6832 4B72                                          l7296 22E8  
                                        l7464 4EE2                                          l5882 48F8  
                                        l5874 48E2                                          l9170 284A  
                                        l9410 3E68                                          l9402 4930  
                                        l9330 2D7E                                          l9058 4286  
                                        l9242 13A0                                          l6834 4B7C  
                                        l7810 4EF4                                          l5892 490C  
                                        l9180 28B6                                          l9164 2834  
                                        l9420 3EC6                                          l9500 4314  
                                        l9324 2D68                                          l9316 2D54  
                                        l9228 1BD6                                          l9260 157C  
                                        l9252 1458                                          l7636 4D32  
                                        l5894 4912                                          l9190 28E4  
                                        l9182 28BA                                          l9174 2852  
                                        l9414 3E9A                                          l9502 4322  
                                        l9350 2EE4                                          l9334 2D92  
                                        l6918 24E6                                          l7494 4D72  
                                        l7646 4D58                                          l7638 4D38  
                                        l5888 4900                                          l9192 290C  
                                        l9168 2842                                          l9504 432A  
                                        l9344 2ED4                                          l9336 2DA0  
                                        l9328 2D78                                          l9248 1448  
                                        l9600 02DA                                          l7496 4D78  
                                        l9178 2882                                          l9434 33AC  
                                        l9514 45DA                                          l9266 162E  
                                        l9610 0360                                          l9530 002C  
                                        l6890 23F6                                          l8900 1EF0  
                                        l9452 3406                                          l9508 4350  
                                        l9516 45E8                                          l9372 2F5A  
                                        l9364 2F28                                          l9620 03CC  
                                        l9604 0302                                          l9540 0066  
                                        l9198 2938                                          l8830 3920  
                                        l8822 38DC                                          l8902 1EFC  
                                        l9470 3460                                          l9462 3430  
                                        l9390 2F94                                          l9294 2CE4  
                                        l9278 4CF8                                          l9702 0746  
                                        l9622 03D8                                          l9630 045E  
                                        l9606 0318                                          l9542 007C  
                                        l9534 0042                                          l8840 3960  
                                        l8832 3940                                          l8824 38E8  
                                        l8920 1F86                                          l8912 1F34  
                                        l8904 1F08                                          l9464 343E  
                                        l9456 3416                                          l9480 4016  
                                        l9384 2F7E                                          l9376 2F6A  
                                        l9288 2CC6                                          l9800 0AFE  
                                        l9712 0874                                          l9640 04DA  
                                        l9616 03A6                                          l9608 034A  
                                        l9560 012A                                          l9536 0058  
                                        l8834 394C                                          l8826 3908  
                                        l8818 38CC                                          l8930 1FB8  
                                        l8914 1F40                                          l8906 1F10  
                                        l9458 341C                                          l9466 3448  
                                        l9482 4024                                          l9394 2FA8  
                                        l9802 0B10                                          l9810 0C04  
                                        l9730 08F0                                          l9714 0884  
                                        l9706 0798                                          l9634 04C6  
                                        l9626 041C                                          l9562 0166  
                                        l9554 0118                                          l9546 009C  
                                        l9492 405E                                          l9484 402C  
                                        l9396 2FB6                                          l9388 2F8E  
                                        l8940 2FEC                                          l9804 0B90  
                                        l9812 0C18                                          l9740 092E  
                                        l9652 056C                                          l9644 0514  
                                        l9636 04CC                                          l9628 044A  
                                        l9556 011E                                          l8846 3972  
                                        l8942 3006                                          l9814 0C22  
                                        l9750 0976                                          l9734 091A  
                                        l9718 0894                                          l9662 05C4  
                                        l8872 1E6E                                          l8960 3048  
                                        l9744 0968                                          l9736 0920  
                                        l9672 05FE                                          l9656 0596  
                                        l9648 051A                                          l9592 0272  
                                        l9576 01C2                                          l9816 0C3C  
                                        l8970 3076                                          l8946 3014  
                                        l9754 0984                                          l9690 06E8  
                                        l9674 0612                                          l9666 05D4  
                                        l9860 35C6                                          l8884 1EA4  
                                        l8964 305A                                          l9772 0A10  
                                        l9748 0970                                          l9764 09C6  
                                        l9692 06FC                                          l9668 05EE  
                                        l9684 06C8                                          l9908 34FA  
                                        l8894 1ECC                                          l8878 1E98  
                                        l8990 3DB6                                          l8974 3088  
                                        l9790 0AAC                                          l9758 09BE  
                                        l9766 09DA                                          l9686 06D8  
                                        l9678 063A                                          l9918 352E  
                                        STR_1 FEB4                                          l9872 3624  
                                        l9864 35E0                                          l9848 357E  
                                        l8968 3070                                          l9792 0AB8  
                                        l9784 0A82                                          l9776 0A48  
                                        l9696 0720                                          l9936 3C46  
                                        STR_2 FF14                                          STR_3 FED2  
                                        l9874 362A                                          l8978 309E  
                                        l9786 0A8E                                          l9778 0A54  
                                        l9882 3492                                          STR_4 FF3D  
                                        STR_5 FFA2                                          l8996 3DC8  
                                        l9796 0AD6                                          l9884 34AC  
                                        STR_6 FEFF                                          STR_7 FF70  
                                        STR_8 FFF5                                          STR_9 FFEF  
                                        l9888 34BA                                          u4160 3676  
                                        u4170 36AC                                  printf@tmpval 0178  
                                        u3380 40BE                                          u7011 2FFC  
                                        u8050 0712                                          u7411 2CB8  
                                        u8300 35AA                                          u7431 2CD6  
                                        u7280 291A                  __end_of_Activate_Buzzer_2KHz 4F9A  
                                        u7621 339E                                          u8351 3484  
                                        u7640 33CA                                          u9217 506C  
                                        u9170 1D22                                          u8371 34A2  
                                        u6781 1E2C                                          u7645 33C2  
                                        _RBPU 007F8F                                          u7830 0208  
                                        u6791 1E40                  __end_of_Activate_Buzzer_4KHz 4F76  
                                        u9178 1D26                                          u7835 01FC  
                                        u6991 2FDE                                          _TRMT 007D61  
                    ??_Do_Save_New_Alarm_Time 004C                                  _DS1621_tempC 0089  
                                _DS1621_tempF 008B                           ??_Deactivate_Buzzer 0011  
                                        _date 013D                                          _main 1C18  
                                        _font FC43       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 006A                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 507E                              __end_of_I2C_Read 4918  
                                        _time 0161                                          _year 00B4  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 00B7                                          _volt 0084  
                            __end_of_I2C_Stop 4FBE                        ?_DS3231_Turn_Off_Alarm 0001  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                             __end_of_Do_Init 4694                                   _Do_Beep_Bad 4EBA  
                             ??_drawFastVLine 001C                                  ___ftmul@cntr 002C  
                             __end_of_i2cNack 5088                                  ___param_bank 000010  
                                ___ftmul@sign 002D       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 003C                     ??_DS3231_Write_Alarm_Time 004A  
                       __size_of_Do_Beep_Good 0018                                  _Turn_Off_Fan 505C  
                                ___fttol@lval 0038                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 2694                                         l10100 3FCA  
                                       l10200 4554                                         l10104 3FD4  
                            __end_of_INT2_isr 509C                                         l10202 456C  
                                       l10114 3FEE                                         l10310 29D4  
                                       l10302 29BE                                         l10160 458A  
                                       l10304 29C2                                         l10170 45B0  
                                       l10154 4574                                         l10090 3F86  
                                       l10314 29E2                                         l10306 29C8  
                                       l10322 29F4                                         l10164 459A  
                                       l10180 4512                                         l10324 2A42  
                                       l10332 2A58                                         l10166 45A0  
                                       l10158 4584                                         l10174 45B6  
                                       l10094 3FA0                                         l10318 29EE  
                                       l10334 2A82                                         l10350 2AB6  
                                       l10238 4E6A                                         l10246 4E50  
                                       l10176 45CE                                         l10192 453E  
                                       l10328 2A52                                         l10280 2970  
                                       l10344 2AA0                                         l10408 4A6A  
                                       l10186 4528                                         l10290 2996  
                                       l10362 2ADC                                         l10338 2A8A  
                                       l10418 4AF8                                         l10514 0D78  
                                       l10292 299C                                         l10284 2980  
                                       l10372 2AF0                                         l10364 2AE2  
                                       l10380 2B04                                         l10356 2ACC  
                                       l10508 0D38                                         l10460 3238  
                                       l10710 3AA8                                         l10286 2986  
                                       l10382 2B52                                         l10390 2B68  
                                       l10446 31E0                                         l10296 29AC  
                                       l10376 2AFE                                         l10368 2AE8  
                                       l10392 2B92                                         l10640 3768  
                                       l10448 31E6                                         l10730 3AEE  
                                       l10722 3AD2                                         l10714 3AB6  
                                       l10298 29B2                                         l10554 0E52  
                                       l10474 3272                                         l10732 3AF2  
                                       l10660 37AC                                         l10652 3790  
                                       l10572 0F06                                         l10556 0E68  
                                       l10492 0CA2                                         l10900 1DC4  
                                       l10726 3AE0                                         l10718 3AC4  
                                       l10734 3AF8                                         l10574 0F0E  
                                       l10566 0EE8                                         l10672 37D6  
                                       l10664 37BA                                         l10656 379E  
                                       l10744 3EE0                                         l10568 0EFE  
                                       l10904 1DCA                                         l10674 37DA  
                                       l10770 3F4C                                         l10762 3F30  
                                       l10498 0CE2                                         l10914 1E0C  
                                       l10906 1DE8                                         l10668 37C8  
                                       l10676 37E0                                         l10772 3F50  
                                       l10852 1C38                                         l10766 3F3E  
                                       l10758 3F22                                         l10774 3F56  
              __size_of_Activate_Buzzer_500Hz 0012                                         l10880 1D86  
                                       l10698 3A80                                         l10892 1DB0  
                                       l10884 1D9C                     __end_of_Deactivate_Buzzer 50A4  
                                       l10896 1DBA                                         l10888 1DA6  
                             ??_do_update_pwm 003D                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                 __end_of_Activate_Buzzer_500Hz 4FAC  
                                       ?_main 0001                               __end_of___awdiv 3E36  
                             __end_of___ftadd 1FE0                               drawCircle@ddF_x 0026  
                                       STR_10 FFCA                               drawCircle@ddF_y 0028  
                                       STR_11 FFDF                                         STR_20 FFE9  
                                       STR_12 FFC4                                         STR_21 FFED  
                                       STR_13 FFCF                                         STR_22 FFE9  
                                       STR_14 FF7D                                         STR_30 FF61  
                                       STR_31 FEFF                                         STR_23 FFED  
                                       STR_15 FFD8                                         STR_16 FFF8  
                                       STR_32 FF8A                                         STR_24 FF29  
                                       STR_33 FFCA                                         STR_17 FFFB  
                                       STR_25 FFB9                                         STR_26 FFCA  
                                       STR_34 FFDF                                         STR_18 FFE4  
                                       STR_19 FFF1                                         STR_27 FFAE  
                                       STR_35 FEE9                                         STR_28 FEFF  
                                       STR_36 FF50                               __end_of___awmod 4292  
                                       STR_29 FF96                               __end_of___ftdiv 3556  
                             __end_of___ftneg 4CE0                               __end_of___lldiv 4080  
                             __end_of___ftmul 30C6                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                                         _T1CON 000FCD  
                             __end_of___llmod 4372                               __end_of___ftsub 495C  
                             __end_of___fttol 3474                                         _T2CON 000FCA  
                                       _T3CON 000FB1                                         i2l303 2636  
                                       i2l291 2692                                         i2l279 4154  
                             ___awdiv@counter 001B                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 499A                                         _Rcmd1 2B98  
                                       _Rcmd3 30C6                                  ___lltoft@exp 0021  
    Update_Setup_Screen_Cursor_Backward@field 002E                 __size_of_Do_Save_New_Fan_Temp 0014  
                                  _i2cHighSda 50AC                                    _i2cHighScl 5068  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FE46  
                                       _color 0091                                         _font2 FD42  
            __size_of_Update_Setup_Fan_Screen 0096                                         _found 0069  
                                       _scale 1274                               __end_of_isdigit 4D02  
                                       _tempC 00D3                                         _tempF 00D7  
                                       _month 006C                                 ___ftpack@sign 0015  
                                       _putch 5032                             __end_of_I2C_Start 4FD0  
                           __end_of_I2C_Write 4A54                                __CFG_BOREN$OFF 000000  
                                       tablat 000FF5                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 4EA2  
             __size_of_check_for_button_input 0094                         __end_of_Go_Next_Field 4D62  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                          Set_RGB_Color@color 0011                         _Select_Fan_Temp_Field 00A4  
                             __initialization 44AE                                  __end_of_main 1E1C  
                                __end_of_font FD42                              __end_of_Init_ADC 504E  
                            __end_of_Rcmd2red 49D8                            _Select_Alarm_Field 00A3  
                                      ??_main 00F5                                 ___fttol@sign1 0037  
                __size_of_Exit_Setup_Fan_Temp 0010                             _Decrease_Fan_Temp 4E56  
                               __activetblptr 000002                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 4F88                          __size_of__tdiv_to_l_ 0110  
     I2C_Write_Address_Write_One_Byte@Address 0013                         __end_of_Go_Prev_Field 4D42  
                   ??_TFT_GreenTab_Initialize 001D                            ?_Decrease_Fan_Temp 0001  
                  ??_Update_Setup_Time_Screen 004A                                _Init_Interrupt 4DC2  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                         _In_Alarm_Time_Setup 009E                                     I2C_Read@n 0012  
                 DS3231_Turn_Off_Alarm@Device 001F                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                              ___llmod@dividend 001E  
                                      ?_scale 0043                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 0017  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 4A90                                        ?_putch 0001  
                            __end_of___ftpack 3982                              __end_of___lbtoft 4CBC  
                          _Toggle_Fan_Monitor 4EE8                           ??_Decrease_Fan_Temp 004D  
                            __end_of___lltoft 4634                                 ??_Monitor_Fan 0046  
                                      _DC_Txt 00CB                                     ??_Do_Init 0017  
                                      i2l7900 25C4                                        i2l7904 25C8  
                                      i2l8480 414A                                        i2l7922 266A  
                                      i2l8476 4140                                        i2l7880 257C  
                                      i2l7928 266E                                        i2l7874 2574  
                                      i2l7858 2526                                        i2l7892 25A0  
                                      i2l7868 2558                                        i2l7886 2598  
                                      _OSCCON 000FD3               __size_of_Do_Save_New_Alarm_Time 0018  
                         __size_of_TIMER1_isr 000E                                        _SPBRGH 000FB0  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                                _Alarm_SW_Txt 00C7                              __end_of_delay_ms 4838  
                                      _i2cAck 4FD0                           ?_Toggle_Fan_Monitor 0001  
                __size_of_Go_Prev_Alarm_Field 0020                              __end_of_fillRect 48D0  
                            __end_of_drawChar 296E                              __end_of__powers_ FE94  
                          __size_of_OpenUSART 0070                                        ___ftge 3E36  
         __end_of_Initialize_Setup_Fan_Screen 3BBA                   _Initialize_Setup_Fan_Screen 3B02  
                 __end_of_Increase_Alarm_Time 4572                          DS3231_Init@control_E 0019  
                                      ___wmul 4C48                                     ??___awdiv 001B  
                            __end_of_drawtext 3638                                     ??___ftadd 0053  
                                   ??___awmod 0041                                     ??___ftdiv 0034  
                           _In_Fan_Temp_Setup 009F                                     ??___ftneg 0014  
                                   ??___lldiv 0019                                     ??___ftmul 0025  
                                   ??___llmod 0026                                     ??___ftsub 005F  
                                   ??___fttol 0032                                        _chkisr 0008  
                                      _array1 011F                                        _buffer 0100  
              __size_of_Exit_Setup_Alarm_Time 0010                                        _nec_ok 0095  
               __end_of_Exit_Setup_Alarm_Time 5012                     __end_of_Decrease_Fan_Temp 4E70  
                                      _fround 19D4                                        clear_0 44B4  
                                      clear_1 44C0                              ___awdiv@quotient 001D  
                                      _minute 006B                                        _second 006D  
                             ___awmod@divisor 003F                          _Activate_Buzzer_2KHz 4F88  
                        _Activate_Buzzer_4KHz 4F64                                     ??_get_RPM 0021  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 0041  
                                      _printf 001C                                  drawtext@size 0040  
                             ??_Increase_Time 004A                                        _strcpy 4B68  
                                      _strlen 49D8                         ___ftmul@f3_as_product 0029  
                      __end_of_Init_Interrupt 4DE2                          __end_of_get_full_ADC 4C96  
                      _check_for_button_input 3F60                              _Do_Save_New_Time 4F28  
                        ??_Toggle_Fan_Monitor 0011                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FC42                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 4E02                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                      __size_of_Set_RGB_Color 0016                              __end_of_spiwrite 4F50  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                         _Do_Setup_Alarm_Time 3A42                                    __accesstop 0080  
                     __end_of__initialization 4506                              ??_get_duty_cycle 0015  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0058  
                                  ___ftadd@f1 004D                                    ___ftadd@f2 0050  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT2_isr 0001  
                          _setup_alarm_minute 00AD                            _setup_alarm_second 00AE  
                               ___rparam_used 000001                                    ___ftdiv@f1 002E  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           __end_of_Monitor_Fan 4B04  
                     __size_of_Setup_Temp_Fan 0094                           _Go_Next_Alarm_Field 4D82  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0059                                    ___ftsub@f2 005C  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 2CA8  
                               __end_of_Rcmd3 31B8                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 001B                 DS3231_Turn_On_Alarm@Address_F 001C  
                                __pidataBANK0 4C20                                  __pidataBANK1 4292  
                                  ___lltoft@c 0019                                 __end_of_font2 FE1E  
                           __end_of_i2cLowSda 5092                             __end_of_i2cLowScl 50AC  
                               __end_of_scale 1654                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 5040                         ?_Activate_Buzzer_2KHz 0001  
                       ?_Activate_Buzzer_4KHz 0001                        _Do_Save_New_Alarm_Time 4E8A  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 0047  
                                dec_2_bcd@dec 0049                        __size_of_Decrease_Time 011A  
                          _setup_fan_set_temp 00AF                            _setup_fan_set_text 00C2  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  __div_to_l_ 2EC4                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                  _alarm_minute 0065  
                                _alarm_second 0066              ??_Update_Setup_Alarm_Time_Screen 005F  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 4794  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                     _Update_Setup_Fan_Screen 3D0A                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 43E2                               __div_to_l_@exp1 001C  
                             __div_to_l_@cntr 001B                                       ??_scale 0046  
                             __div_to_l_@quot 0017                                       ??_putch 0011  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 0080  
                            _setup_alarm_hour 00AC                                     ?_Init_ADC 0001  
                            _setup_alarm_time 0146          __end_of_Initialize_Setup_Time_Screen 2EC4  
       __size_of_Initialize_Setup_Time_Screen 010C                  _Initialize_Setup_Time_Screen 2DB8  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                            __size_of_init_UART 0014  
                             spiwrite@spidata 0012                                    _alarm_date 00A7  
                                  ??_INT0_isr 0001                                    ??_INT2_isr 0001  
                                  _alarm_mode 008F                                    _alarm_hour 0064  
                                  _alarm_time 0134                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                 __div_to_l_@f1 0011  
                               __div_to_l_@f2 0014                                  _fan_set_temp 00B5  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                          __size_of_read_volt 0064                            __CFG_CCP2MX$PORTBE 000000  
                               _Set_RGB_Color 4ED2                                I2C_Read@inByte 0013  
                                     ?___ftge 0011                    DS3231_Turn_On_Alarm@Device 001F  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                         ??_Do_Setup_Alarm_Time 0060  
                                     ?_chkisr 0001                        __size_of_setAddrWindow 0056  
                           __end_of_bcd_2_dec 4C20                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 00D6                                  ??_TIMER1_isr 0001  
                  __size_of_Decrease_Fan_Temp 001A                                       ?_fround 0043  
                               ??_I2C_ReStart 0011                                       _ALARMEN 0087  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                    I2C_Write@n 0012  
                                     ?_printf 00DD                                     ?___lltoft 0019  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 46EC                                    _fillScreen 4E20  
                                     _MATCHED 008D                         __end_of_Update_Screen 1274  
                    ??_DS3231_Read_Alarm_Time 0014                                    _drawCircle 234E  
                       ??_Go_Next_Alarm_Field 0031                                     ?_delay_ms 0017  
                                   ?_fillRect 0023                                     ?_drawChar 002E  
                                     _SSPCON1 000FC6                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00BD                         __end_of_fillRectangle 3714  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 4634                                   _Monitor_Fan 4ACC  
                    _I2C_Write_Cmd_Write_Data 4DE2                    __end_of_I2C_Write_Cmd_Only 4E8A  
                                  ??_Rcmd2red 0014                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 296E                           _Exit_Setup_Fan_Temp 4FE2  
                              ??_Wait_One_Sec 0011                                       _i2cNack 507E  
                          __end_of_TIMER1_isr 505C                 ?_Initialize_Setup_Time_Screen 0001  
                __size_of_Decrease_Alarm_Time 0062                                 _write_command 5022  
                                   _I2C_Start 4FBE                                     _I2C_Write 4A16  
                           ??_Exit_Time_Setup 004A                               __size_of_i2cAck 0012  
                           __end_of__npowers_ FE6D                                       __Hparam 0000  
                                  _scale$3056 0046                  __end_of_Do_Save_New_Fan_Temp 4F28  
                                     __Lparam 0000                                ?_Set_RGB_Color 0001  
                         __end_of_DS1621_Init 4E20                           __end_of_DS3231_Init 3A42  
                           __end_of_drawPixel 4BCA                         __end_of_drawFastVLine 4108  
                             __size_of___ftge 0096                                       ___awdiv 3DA0  
                                     ___ftadd 1E1C                                       ___awmod 4210  
                                     ___ftdiv 3474                                       ___ftneg 4CBC  
                                     ___lldiv 3FF4                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 2FCE  
                                     ___llmod 4302                        ??_Activate_Buzzer_4KHz 0011  
                                     ___ftsub 4918                                       ___fttol 338E  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 4186  
                                   ?_spiwrite 0001                                       __pcinit 44AE  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                               __size_of_fround 0244  
                                     __ramtop 1000                                       _get_RPM 495C  
                                  ??___lltoft 001D                                       __ptext0 1C18  
                                     __ptext1 31B8                                       __ptext2 4ED2  
                                     __ptext3 4742                                       __ptext4 4794  
                                     __ptext5 3982                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 4D02                                       __ptext7 4B04  
                                     __ptext8 4F64                                       __ptext9 444A  
                        ?_Exit_Setup_Fan_Temp 0001                               __size_of_printf 0C44  
                           __end_of_init_UART 4F64                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FEB4                                     _T1CONbits 000FCD  
                                 ?__div_to_l_ 0011                     ??_Update_Setup_Fan_Screen 004A  
                                     _dpowers FE1E                         __end_of_do_update_pwm 3C70  
                                     _isdigit 4CE0                         _Activate_Buzzer_500Hz 4F9A  
                            ___awmod@dividend 003D                                    _duty_cycle 0068  
                         _Go_Prev_Alarm_Field 4D62                             __end_of_read_volt 44AE  
                                  ??_delay_ms 0019                           __end_of_I2C_ReStart 4F14  
                               drawtext@_text 003A                                 drawtext@color 003C  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 4F76                             _DS3231_Write_Time 3C70  
                               _setAddrWindow 46EC                                __pintcode_body 4108  
                               Wait_One_Sec@k 0011                                    delay_ms@ms 0017  
                        end_of_initialization 4506                                 _Do_Setup_Time 3714  
                                   _INT1_flag 009C                                     _INT2_flag 009D  
                                  ??_drawtext 0041                             _Increase_Fan_Temp 4E3C  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
               DS3231_Turn_On_Alarm@control_E 001D                 DS3231_Turn_On_Alarm@control_F 001E  
                              ?_write_command 0001                                 __Lmediumconst FC42  
                   __size_of_DS3231_Read_Time 0068                                       int_func 4108  
                          ?_Increase_Fan_Temp 0001                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 004B                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 0021  
                    __end_of_Do_Save_New_Time 4F3C                                  _get_full_ADC 4C70  
                             ___lldiv@divisor 0015                                _Setup_Temp_Fan 3ECC  
                         ??_DS3231_Write_Time 004A                          ?_Go_Prev_Alarm_Field 0001  
                             ___lldiv@counter 001D                       check_for_button_input@j 00F1  
                    ?_DS3231_Write_Alarm_Time 0001                                    _tempSecond 00B6  
                        _DS3231_Turn_On_Alarm 4742                                     _RCSTAbits 000FAB  
                                     printf@c 0189                                       printf@f 00DD  
                         ??_Increase_Fan_Temp 004D                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                                __tdiv_to_l_@f1 0011  
                              __tdiv_to_l_@f2 0014                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                               ??__tdiv_to_l_ 0017                   I2C_Write_Cmd_Write_Data@Cmd 0013  
                       ??_Exit_Setup_Fan_Temp 004A                                     _PORTAbits 000F80  
                            drawtext@cursor_x 0049                              drawtext@cursor_y 0048  
                                   _PORTBbits 000F81                                     _PORTDbits 000F83  
                                  _test_alarm 31B8                              I2C_Write@outByte 0011  
                                  _setup_date 014F                                   ?_fillScreen 0024  
                                  _setup_hour 00B0                                    _setup_time 0158  
                                  _setup_year 00B3                                   ?_drawCircle 001C  
             __size_of_DS3231_Read_Alarm_Time 004E                                    drawChar@bg 0032  
                   __end_of_DS3231_Write_Time 3D0A                DS3231_Turn_Off_Alarm@Address_E 001B  
              DS3231_Turn_Off_Alarm@Address_F 001C                                     _TRISCbits 000F94  
                                   _TRISDbits 000F95          __size_of_Initialize_Setup_Fan_Screen 00B8  
                      __size_of_Go_Next_Field 0020        I2C_Write_Address_Read_One_Byte@Address 0014  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                   __end_of_Increase_Fan_Temp 4E56                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                              drawtext@textsize 0044  
                                  drawPixel@x 001B                                    drawPixel@y 0018  
                                 _DS1621_Init 4E02                                   _DS3231_Init 3982  
                      __end_of_Setup_Temp_Fan 3F60                                   ___ftdiv@exp 003B  
                                 printf@width 017C                                     _TXSTAbits 000FAC  
                             ??_Set_RGB_Color 0011                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 0184                            get_full_ADC@result 0015  
                         __size_of__div_to_l_ 010A                     ?_Update_Setup_Time_Screen 0001  
                       ?_DS3231_Turn_On_Alarm 0001                             __size_of_INT0_isr 0198  
                           __size_of_INT2_isr 000A                                __end_of_i2cAck 4FE2  
                                 ___ftmul@exp 0028                        __size_of_Go_Prev_Field 0020  
              ??_Initialize_Setup_Time_Screen 004A                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0018                      DS1621_Read_Temp@Data_Ret 0017  
              __end_of_check_for_button_input 3FF4                              ??_Init_Interrupt 0011  
                          __end_of_i2cHighSda 50B4                                __end_of___ftge 3ECC  
                          __end_of_i2cHighScl 5074                                __end_of___wmul 4C70  
                               delay_ms@count 001B                                    _write_data 5012  
                              __end_of_chkisr 418E                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 4EFE                                    drawtext@bg 003E  
                              __end_of_fround 1C18                         _Exit_Setup_Alarm_Time 5002  
                      ?_Activate_Buzzer_500Hz 0001                                     _Nec_code1 00A1  
                                   _i2cLowSda 5088                                     _i2cLowScl 50A4  
                __size_of_Increase_Alarm_Time 0062                          __end_of_Wait_One_Sec 4DC2  
                              __end_of_printf 0C60                         __end_of_Increase_Time 2B98  
                              __end_of_strcpy 4B9A                                __end_of_strlen 4A16  
                 __size_of_Toggle_Fan_Monitor 0016                                     _Nec_state 00A2  
                         start_initialization 44AE                           __end_of__tdiv_to_l_ 2DB8  
                        _Do_Save_New_Fan_Temp 4F14                        Update_Screen@neg_tempF 004C  
                             ??_Decrease_Time 004A                            get_duty_cycle@temp 0011  
                             ??_write_command 0013               __end_of_DS3231_Write_Alarm_Time 4210  
                                   _OpenUSART 4372                __size_of_DS3231_Turn_Off_Alarm 0052  
                DS3231_Read_Alarm_Time@Device 0015                 __end_of_DS3231_Turn_Off_Alarm 47E6  
                             ?_Setup_Temp_Fan 0001                               ___llmod@divisor 0022  
                            __CFG_OSC$INTIO67 000000                                   ??_I2C_Start 0011  
                           __size_of_Init_ADC 000E                               ___llmod@counter 0026  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 4838  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 4EA2                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 4D42                                      ??___ftge 0017  
                                    ??___wmul 0015                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 00B5  
                                 __pdataBANK1 0100                                      ??_fround 0046  
                             setAddrWindow@x0 0017                               setAddrWindow@x1 0015  
                             setAddrWindow@y0 0014                               setAddrWindow@y1 0016  
                                    ??_printf 00EB                              _DS1621_Read_Temp 4A90  
                                 ?_test_alarm 0001                                      ??_strcpy 0015  
                                    ??_strlen 0013                                    ?_i2cLowSda 0001  
                                  ?_i2cLowScl 0001                           _Decrease_Alarm_Time 4572  
                                   _bcd_2_dec 4BF6                                    fround@prec 004C  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                             __size_of___lltoft 0060  
                                 __pbssCOMRAM 0060                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 009A                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00DD                                 __pcstackBANK1 0170  
                               _Go_Prev_Field 4D22                               ??_Do_Setup_Time 0060  
                       ?_Do_Save_New_Fan_Temp 0001                                     _dec_2_bcd 4694  
                             _Exit_Time_Setup 4FF2                    __size_of_Increase_Fan_Temp 001A  
                                 ??_LCD_Reset 001D                                  _isdigit$2691 0012  
                           __size_of_delay_ms 0052                                      ?_Do_Init 0001  
                                ?_Monitor_Fan 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 43E2                                      ?_i2cNack 0001  
                        ?_Decrease_Alarm_Time 0001                             __size_of_drawtext 00E2  
                               ?_Do_Beep_Good 0001                        ??_DS3231_Turn_On_Alarm 001B  
 __end_of_Update_Setup_Screen_Cursor_Backward 234E  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 219A                   __end_of_Do_Setup_Alarm_Time 3B02  
                              ?_Go_Next_Field 0001                                   I2C_Read@ack 0011  
                                   _bit_count 00A8                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 4BF6                                ??_Turn_Off_Fan 0011  
                               __pmediumconst FC42                                      ?___awdiv 0017  
                                   __ptext100 4C48                                     __ptext101 4634  
                                   __ptext110 4E70                                     __ptext102 4F50  
                                   __ptext111 4A90                                     __ptext103 4372  
                                   __ptext120 50A4                                     __ptext112 4A16  
                                   __ptext104 505C                                     __ptext121 50AC  
                                   __ptext113 4FAC                                     __ptext105 4DC2  
                                   __ptext122 5068                                     __ptext114 4FBE  
                                   __ptext106 5040                                     __ptext115 48D0  
                                   __ptext107 5074                                     __ptext124 504E  
                                   __ptext116 507E                                     __ptext108 4E02  
                                   __ptext125 5092                                     __ptext117 4FD0  
                                   __ptext109 4DE2                                      ?___ftadd 004D  
                                   __ptext126 24FC                                     __ptext118 4EFE  
                                   __ptext119 5088                                      ?___awmod 003D  
                                    ?___ftdiv 002E                                      ?___ftneg 0011  
                                    ?___lldiv 0011                                      ?___ftmul 001F  
                                    ?___llmod 001E                                      ?___ftsub 0059  
                                   __npowers_ FE46                                      ?___fttol 002E  
                     __size_of_get_duty_cycle 0032                                     __tft_type 00A6  
                          _I2C_Write_Cmd_Only 4E70                   __end_of_Go_Next_Alarm_Field 4DA2  
              DS3231_Turn_Off_Alarm@control_E 001D                DS3231_Turn_Off_Alarm@control_F 001E  
                          drawFastVLine@color 001A                                   ?_write_data 0001  
                      ?_Exit_Setup_Alarm_Time 0001                                     _drawPixel 4B9A  
                                    ?_get_RPM 001F                                   __tdiv_to_l_ 2CA8  
                           __size_of_spiwrite 0014                                  ??__div_to_l_ 0017  
                                  ?_bcd_2_dec 0001                           ?_I2C_Write_Cmd_Only 0013  
                                    ?_isdigit 0001                                      _I2C_Init 5074  
                                    _I2C_Read 48D0                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 4FAC                             _Initialize_Screen 1654  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                                   _init_UART 4F50                                    ?_dec_2_bcd 0043  
                    I2C_Write_Cmd_Only@Device 0014                                     _hexpowers FE94  
                          ?_Initialize_Screen 0001                                __size_of_scale 03E0  
                              __size_of_putch 000E                                     _read_volt 444A  
    __end_of_I2C_Write_Address_Write_One_Byte 4D22     __size_of_I2C_Write_Address_Write_One_Byte 0020  
          ??_I2C_Write_Address_Write_One_Byte 0015             ?_I2C_Write_Address_Write_One_Byte 0013  
            _I2C_Write_Address_Write_One_Byte 4D02                         ??_Decrease_Alarm_Time 005F  
                              ___wmul@product 0015                                ??_Do_Beep_Good 0046  
                         ??_Initialize_Screen 004A                                  _Select_Field 00A5  
                                    _INT0_isr 24FC                                      _INT2_isr 5092  
                        ??_I2C_Write_Cmd_Only 0014                           __size_of_test_alarm 00EC  
                                    _PIE1bits 000F9D                             ?_Do_Save_New_Time 0001  
                      __size_of_Update_Screen 0614                        DS3231_Read_Time@Device 0015  
                     DS3231_Write_Time@Device 004A                                      _PIR1bits 000F9E  
                          __end_of__div_to_l_ 2FCE                                 _In_Time_Setup 00A0  
                          ??_Do_Save_New_Time 004C                              _Fan_Set_Temp_Txt 00B8  
                ?_Initialize_Setup_Fan_Screen 0001                         __size_of_Wait_One_Sec 0020  
                                   _setup_day 006E                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012                 __size_of_Activate_Buzzer_4KHz 0012  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                                  _ADCON0bits 000FC2                       __end_of_Exit_Time_Setup 5002  
                           ___wmul@multiplier 0011                     __end_of_Initialize_Screen 19D4  
                                 ??_i2cLowSda 0011                                   ??_i2cLowScl 0011  
               DS3231_Read_Alarm_Time@Address 0014                                  ??_fillScreen 0026  
            __size_of_DS3231_Write_Alarm_Time 0082                                  ??_drawCircle 0024  
                                  printf@flag 0184                                    printf@fval 0186  
                                  printf@prec 0176                        ??_Do_Save_New_Fan_Temp 004A  
                                  ?_init_UART 0001              __end_of_Update_Setup_Time_Screen 2818  
                                 _INTCON2bits 000FF1       __end_of_I2C_Write_Address_Read_One_Byte 4B36  
    __size_of_I2C_Write_Address_Read_One_Byte 0032             ??_I2C_Write_Address_Read_One_Byte 0015  
            ?_I2C_Write_Address_Read_One_Byte 0014               _I2C_Write_Address_Read_One_Byte 4B04  
                                 _INTCON3bits 000FF0                                     copy_data0 44DA  
                                   copy_data1 44FA                                     drawtext@i 0046  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0043  
                                   drawtext@y 0039                                    ?_read_volt 003D  
                                    _Nec_code 0080                                      _Init_ADC 5040  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 38BC  
 __size_of_Initialize_Setup_Alarm_Time_Screen 00D2          ??_Initialize_Setup_Alarm_Time_Screen 004A  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 37EA  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 499A                              __size_of_Do_Init 0060  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                  _Time_Elapsed 0060  
                         _Increase_Alarm_Time 4510                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00DB                                  _Wait_One_Sec 4DA2  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00B6  
                          __end_of_fillScreen 4E3C                                      __Lrparam 0000  
                          __end_of_drawCircle 24FC                   __end_of_Exit_Setup_Fan_Temp 4FF2  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___ftadd 01C4                      ?_Update_Setup_Fan_Screen 0001  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftneg 0024                              __size_of___lldiv 008C  
                            __size_of___ftmul 00F8                              __size_of___llmod 0070  
                            __size_of___ftsub 0044                              __size_of___fttol 00E6  
                                    _Volt_Txt 016A                 ??_Initialize_Setup_Fan_Screen 004A  
                                    ___awtoft 4A54                                      ___ftpack 38BC  
                                    ___lbtoft 4C96                                  ?_I2C_ReStart 0001  
                                 _fround$3054 0049                                   _fround$3055 0046  
                                    ___lltoft 45D4                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 003E                                   ??_bcd_2_dec 0011  
                        ?_Increase_Alarm_Time 0001                                 _Update_Screen 0C60  
                            __size_of_isdigit 0022                                      _delay_ms 47E6  
                                 ??_dec_2_bcd 0045                                      __ptext10 4C70  
                                    __ptext11 4A54                                      __ptext20 4E56  
                                    __ptext12 495C                                      __ptext21 3D0A  
                                    __ptext13 0C60                                      __ptext30 4F28  
                                    __ptext22 4ACC                                      __ptext14 4EE8  
                                    __ptext31 3C70                                      __ptext23 4B36  
                                    __ptext15 3ECC                                      __ptext40 219A  
                                    __ptext32 296E                                      __ptext24 3714  
                                    __ptext16 3B02                                      __ptext41 4D82  
                                    __ptext33 2694                                      __ptext25 2DB8  
                                    __ptext17 4E3C                                      __ptext50 4BCA  
                                    __ptext42 1FE0                                      __ptext34 3A42  
                                    __ptext26 2A88                                      __ptext18 4FE2  
                                    __ptext51 30C6                                      __ptext43 5002  
                                    __ptext35 3F60                                      __ptext27 4D22  
                                    __ptext19 4F14                                      __ptext60 4EA2  
                                    __ptext52 499A                                      __ptext44 4E8A  
                                    __ptext36 4BF6                                      __ptext28 4D42  
                                    __ptext61 4F88                                      __ptext53 2B98  
                                    __ptext45 1654                                      __ptext37 37EA  
                                    __ptext29 4FF2                                      __ptext70 32A4  
                                    __ptext62 4EBA                                      __ptext54 4F76  
                                    __ptext46 4B68                                      __ptext38 4510  
                                    __ptext71 001C                                      __ptext63 3BBA  
                                    __ptext55 47E6                                      __ptext47 4E20  
                                    __ptext39 4D62                                      __ptext80 2EC4  
                                    __ptext72 1274                                      __ptext64 4C96  
                                    __ptext56 418E                                      __ptext48 3638  
                                    __ptext81 45D4                                      __ptext73 5032  
                                    __ptext65 3474                                      __ptext57 4694  
                                    __ptext49 234E                                      __ptext90 3556  
                                    __ptext82 4302                                      __ptext74 4CE0  
                                    __ptext66 4DA2                                      __ptext58 43E2  
                                    __ptext91 49D8                                      __ptext83 3FF4  
                                    __ptext75 19D4                                      __ptext67 509C  
                                    __ptext59 4838                                      __ptext92 2818  
                                    __ptext84 338E                                      __ptext76 2FCE  
                                    __ptext68 4F9A                                      __ptext93 4886  
                                    __ptext85 4918                                      __ptext77 4210  
                                    __ptext69 4572                                      __ptext94 4080  
                                    __ptext86 1E1C                                      __ptext78 3DA0  
                                    __ptext95 4B9A                                      __ptext87 38BC  
                                    __ptext79 2CA8                                      __ptext96 46EC  
                                    __ptext88 4CBC                                      __ptext97 5012  
                                    __ptext89 3E36                                      __ptext98 5022  
                                    __ptext99 4F3C                                      _fillRect 4886  
                                    _drawChar 2818                                      __powers_ FE6D  
                            ??_Setup_Temp_Fan 00F3                          __end_of_Turn_Off_Fan 5068  
            __size_of_TFT_GreenTab_Initialize 002C    __end_of_Update_Setup_Screen_Cursor_Forward 219A  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 1FE0  
                                    _colstart 00A9                   __end_of_Go_Prev_Alarm_Field 4D82  
                                    _drawtext 3556                                    strcpy@from 0013  
                     ?_DS3231_Read_Alarm_Time 0001                                 _fillRectangle 3638  
              DS3231_Write_Alarm_Time@Address 004B                      __end_of_DS1621_Read_Temp 4ACC  
                               __size_of_main 0204                          __size_of_Monitor_Fan 0038  
                               ??_Do_Beep_Bad 0046                         __end_of_Set_RGB_Color 4EE8  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
                              _get_duty_cycle 4B36                                 _drawFastVLine 4080  
                                   printf@idx 0173                                     printf@exp 017E  
                                    _spiwrite 4F3C                                     printf@val 0180  
                           DS3231_Init@Device 001A                                   ??_drawPixel 001B  
                                    _rowstart 00AB                    __end_of_Toggle_Fan_Monitor 4EFE  
                                ??_test_alarm 0020                      __end_of_DS3231_Read_Time 444A  
                       ??_Increase_Alarm_Time 005F                    __size_of_Initialize_Screen 0380  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 4EBA  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
                               _do_update_pwm 3BBA                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
                                    scale@scl 0049                __end_of_DS3231_Read_Alarm_Time 4886  
                                 ??_read_volt 0040                                     spiwrite@x 0011  
                                    intlevel2 0000                                ?_fillRectangle 0018  
                            __tdiv_to_l_@exp1 001F                              __tdiv_to_l_@cntr 001E  
                            __tdiv_to_l_@quot 001A                         __end_of_Decrease_Time 2A88  
                    _Update_Setup_Time_Screen 2694                         __end_of_write_command 5032  
                            ___lldiv@dividend 0011                               fillScreen@color 0024  
                          __end_of_test_alarm 32A4                         _DS3231_Turn_Off_Alarm 4794  
               DS3231_Write_Alarm_Time@Device 004A                       do_update_pwm@duty_cycle 0043  
                      __end_of_get_duty_cycle 4B68                        __size_of_Increase_Time 0110  
             __end_of_Update_Setup_Fan_Screen 3DA0                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                       ??_Exit_Setup_Alarm_Time 004A  
                              ?_drawFastVLine 0018                                      printf@ap 0174  
                         __end_of_Do_Beep_Bad 4ED2                                  ??_write_data 0013  
                                  _TIMER1_isr 504E                                 fillRect@color 0026  
                                ?__tdiv_to_l_ 0011                       _DS3231_Write_Alarm_Time 418E  
                                 _printf$3057 0170                                ?_do_update_pwm 0001  
                            ___lldiv@quotient 0019                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                                  _setup_minute 00B1  
                                _setup_second 00B2                       __size_of_Init_Interrupt 0020  
                       __end_of_setAddrWindow 4742                         __end_of_Do_Setup_Time 37EA  
                          fillRectangle@color 001B                             do_update_pwm@dc_I 0044  
                           do_update_pwm@dc_f 0040                                 drawChar@color 0030  
                                 _setup_month 006F                            __end_of_write_data 5022  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 005F                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00C0  
                             ?_get_duty_cycle 0011                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 338E       __size_of_Update_Setup_Alarm_Time_Screen 00EA  
              _Update_Setup_Alarm_Time_Screen 32A4  
